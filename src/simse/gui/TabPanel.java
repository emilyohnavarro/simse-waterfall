/* File generated by: simse.codegenerator.guigenerator.TabPanelGenerator */
package simse.gui;

import simse.adts.objects.*;
import simse.state.*;
import simse.logic.*;
import simse.engine.*;

import java.util.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.border.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import java.awt.Color;
import java.io.*;

public class TabPanel extends JPanel implements ActionListener, MouseListener {
	public static final int ARTIFACT = 0;
	public static final int CUSTOMER = 1;
	public static final int EMPLOYEE = 2;
	public static final int PROJECT = 3;
	public static final int TOOL = 4;

	public static final int MAXBUTTONS = 32;

	private LogoPanel logoPane;
	private AttributePanel attributePane;
	private EmployeesAtAGlanceFrame employeeFrame;
	private ArtifactsAtAGlanceFrame artifactFrame;
	private ToolsAtAGlanceFrame toolFrame;
	private ProjectsAtAGlanceFrame projectFrame;
	private CustomersAtAGlanceFrame customerFrame;

	private GridBagLayout gbl;
	private boolean guiChanged;

	// the 5 different tabs:
	private JButton[] artifactButton;
	private JButton[] customerButton;
	private JButton[] employeeButton;
	private JButton[] projectButton;
	private JButton[] toolButton;
	private Employee rightClickedEmployee;

	private State state;
	private Logic logic;
	private SimSEGUI gui;
	private Hashtable<SSObject, ImageIcon> objsToImages; // maps Objects (keys)
															// to ImageIcons
															// (values)
	private Hashtable<JButton, SSObject> buttonsToObjs; // maps JButtons (keys)
														// to Objects (values)
	private JPanel buttonsPane;
	private SSObject objInFocus = null;

	// for the blue line around the icons:
	private Border defaultBorder;
	private Border selectedBorder;
	private Color btnBlue = new Color(180, 180, 255, 255);
	private Image border;
	private ImageIcon allIcon;

	public TabPanel(SimSEGUI g, State s, Logic l, AttributePanel a) {
		logic = l;
		gui = g;
		state = s;
		guiChanged = true;
		attributePane = a;
		objsToImages = new Hashtable();
		buttonsToObjs = new Hashtable();
		employeeFrame = new EmployeesAtAGlanceFrame(state, gui);
		artifactFrame = new ArtifactsAtAGlanceFrame(state, gui);
		toolFrame = new ToolsAtAGlanceFrame(state, gui);
		projectFrame = new ProjectsAtAGlanceFrame(state, gui);
		customerFrame = new CustomersAtAGlanceFrame(state, gui);

		border = ImageLoader
				.getImageFromURL("/simse/gui/images/layout/border.gif");
		allIcon = new ImageIcon(
				ImageLoader.getImageFromURL("/simse/gui/images/all.GIF"));

		// get the Border styles:
		defaultBorder = new JButton().getBorder();
		selectedBorder = new BevelBorder(BevelBorder.RAISED, new Color(80, 80,
				225, 255), new Color(0, 0, 115, 255));

		// Create main panel:
		gbl = new GridBagLayout();
		setBackground(new Color(102, 102, 102, 255));
		setLayout(gbl);

		logoPane = new LogoPanel(gui);
		logoPane.setMinimumSize(new Dimension(340, 90));
		logoPane.setPreferredSize(new Dimension(340, 90));
		logoPane.setTabPanel(this);

		// Create buttons pane:
		buttonsPane = new JPanel(gbl);
		buttonsPane.setBackground(new Color(69, 135, 156, 255)); // dark green
																	// color
		JScrollPane buttonsScrollPane = new JScrollPane(buttonsPane,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		buttonsScrollPane.setPreferredSize(new Dimension(292, 75));

		generateButtons();

		// Add panes and labels to main pane:

		GridBagConstraints gbc;

		// Add Logo Pane:
		gbc = new GridBagConstraints(0, 0, 1, 2, 1, 1,
				GridBagConstraints.NORTHWEST, GridBagConstraints.NONE,
				new Insets(0, 0, 0, 0), 0, 0);
		gbl.setConstraints(logoPane, gbc);
		add(logoPane);

		// Add panes and labels to main pane
		gbc = new GridBagConstraints(1, 0, 1, 1, 1, 1,
				GridBagConstraints.SOUTHWEST, GridBagConstraints.NONE,
				new Insets(0, 0, 10, 0), 0, 0);
		gbl.setConstraints(buttonsScrollPane, gbc);
		add(buttonsScrollPane);

		setPreferredSize(new Dimension(800, 100));
		updateImages(EMPLOYEE);
	}

	public void paintComponent(Graphics g) {
		Dimension d = getSize();
		int width = (int) d.getWidth();
		g.setColor(new Color(102, 102, 102, 255));
		g.fillRect(0, 0, width, 100);

		// repeat the border across the width of screen:
		for (int i = 0; i < width; i += 100) {
			g.drawImage(border, i, 92, this);
		}
	}

	public void generateButtons() {
		artifactButton = new JButton[MAXBUTTONS];
		customerButton = new JButton[MAXBUTTONS];
		employeeButton = new JButton[MAXBUTTONS];
		projectButton = new JButton[MAXBUTTONS];
		toolButton = new JButton[MAXBUTTONS];

		// generate list of <maxbuttons>:
		for (int i = 0; i < MAXBUTTONS; i++) {
			artifactButton[i] = new JButton();
			artifactButton[i].addActionListener(this);
			customerButton[i] = new JButton();
			customerButton[i].addActionListener(this);
			employeeButton[i] = new JButton();
			employeeButton[i].addActionListener(this);
			projectButton[i] = new JButton();
			projectButton[i].addActionListener(this);
			toolButton[i] = new JButton();
			toolButton[i].addActionListener(this);
			JPopupMenu popup = new JPopupMenu();
			PopupListener popupListener = new PopupListener(popup, gui);
			popupListener.setEnabled(false);
			employeeButton[i].addMouseListener(popupListener);
			employeeButton[i].addMouseListener(this);
		}

		setButtonConstraints(artifactButton, buttonsPane);
		setButtonConstraints(customerButton, buttonsPane);
		setButtonConstraints(employeeButton, buttonsPane);
		setButtonConstraints(projectButton, buttonsPane);
		setButtonConstraints(toolButton, buttonsPane);
	}

	public void setButtonConstraints(JButton[] button, JPanel pane) {
		Dimension dim = new Dimension(35, 35);
		int shift;
		int index;
		for (int j = 0; j < 2; j++) {
			shift = 16 * j;
			for (int i = 0; i < MAXBUTTONS / 2; i++) {
				GridBagConstraints gbc = new GridBagConstraints(i, j, 1, 1,
						1.0, 1.0, GridBagConstraints.NORTHWEST,
						GridBagConstraints.NONE, new Insets(2, 1, 0, 0), 0, 0);

				index = shift + i;
				if (button == employeeButton) {
					PopupListener pListener = ((PopupListener) button[index]
							.getMouseListeners()[1]);
					pListener.setEnabled(false);
				}
				button[index].setIcon(null);
				button[index].setPreferredSize(dim);
				button[index].setBackground(Color.LIGHT_GRAY);
				button[index].setBorder(defaultBorder);
				button[index].setEnabled(false);
				gbl.setConstraints(button[index], gbc);
				pane.add(button[index]);
			}
		}
	}

	public void mouseClicked(MouseEvent me) {
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void mouseReleased(MouseEvent me) {
		if (me.getComponent() instanceof JButton) {
			JButton button = (JButton) me.getComponent();
			ImageIcon ico = (ImageIcon) button.getIcon();
			if (ico != null) {
				rightClickedEmployee = (Employee) buttonsToObjs.get(button);
			}
		}
	}

	public void actionPerformed(ActionEvent evt) {
		guiChanged = true;
		Object source = evt.getSource();
		if (source instanceof JMenuItem) {
			JMenuItem jm = (JMenuItem) source;
			logic.getMenuInputManager().menuItemSelected(rightClickedEmployee,
					jm.getText(), gui);
			gui.getWorld().update();
		}
		if (source instanceof JButton) {
			JButton button = (JButton) source;
			if (buttonsToObjs.get(button) != null) {
				attributePane.setGUIChanged();
				objInFocus = buttonsToObjs.get(button);
				String filename = getImage(objInFocus);
				attributePane.setObjectInFocus(objInFocus, (new ImageIcon(
						ImageLoader.getImageFromURL(filename))));

				Enumeration<JButton> buttons = buttonsToObjs.keys();
				for (int i = 0; i < buttonsToObjs.size(); i++) {
					JButton key = buttons.nextElement();
					key.setBackground(Color.WHITE);
					key.setBorder(defaultBorder);
				}

				button.setBackground(btnBlue);
				button.setBorder(selectedBorder);
			} else if (((ImageIcon) button.getIcon()).equals(allIcon)) {
				switch (logoPane.getSelectedTabIndex()) {
				case EMPLOYEE:
					if (employeeFrame.getState() == Frame.ICONIFIED) {
						employeeFrame.setState(Frame.NORMAL);
					}
					employeeFrame.setVisible(true);
					break;
				case ARTIFACT:
					if (artifactFrame.getState() == Frame.ICONIFIED) {
						artifactFrame.setState(Frame.NORMAL);
					}
					artifactFrame.setVisible(true);
					break;
				case TOOL:
					if (toolFrame.getState() == Frame.ICONIFIED) {
						toolFrame.setState(Frame.NORMAL);
					}
					toolFrame.setVisible(true);
					break;
				case PROJECT:
					if (projectFrame.getState() == Frame.ICONIFIED) {
						projectFrame.setState(Frame.NORMAL);
					}
					projectFrame.setVisible(true);
					break;
				case CUSTOMER:
					if (customerFrame.getState() == Frame.ICONIFIED) {
						customerFrame.setState(Frame.NORMAL);
					}
					customerFrame.setVisible(true);
					break;
				default:
				}
			}
		}
	}

	public void setObjectInFocus(SSObject obj) {
		objInFocus = obj;
		update();
	}

	public void setGUIChanged() {
		guiChanged = true;
	}

	public void update() {
		update(logoPane.getSelectedTabIndex());
	}

	public void update(int index) {
		attributePane.update();
		employeeFrame.update();
		artifactFrame.update();
		toolFrame.update();
		projectFrame.update();
		customerFrame.update();
		if (!guiChanged) {
			return;
		}
		// clear buttons:
		buttonsToObjs.clear();
		buttonsPane.removeAll();

		// update images:
		updateImages(index);

		JButton[] buttonList;
		Vector<? extends SSObject> objs;

		switch (index) {
		case ARTIFACT:
			buttonList = artifactButton;
			objs = state.getArtifactStateRepository().getAll();
			break;
		case CUSTOMER:
			buttonList = customerButton;
			objs = state.getCustomerStateRepository().getAll();
			break;
		case EMPLOYEE:
			buttonList = employeeButton;
			objs = state.getEmployeeStateRepository().getAll();
			break;
		case PROJECT:
			buttonList = projectButton;
			objs = state.getProjectStateRepository().getAll();
			break;
		case TOOL:
			buttonList = toolButton;
			objs = state.getToolStateRepository().getAll();
			break;
		default:
			buttonList = toolButton;
			objs = new Vector<SSObject>();
		}
		setButtonConstraints(buttonList, buttonsPane);

		{
			boolean atLeastOneObj = false;
			if (objs.size() > 0) // there is at least one object of the selected
									// type
			{
				atLeastOneObj = true;
				JButton allButton = buttonList[0];
				allButton.setEnabled(true);
				allButton.setBorder(defaultBorder);
				allButton.setIcon(allIcon);
			}

			int j = 0;
			// go through all objects:
			for (int i = 0; i < objs.size(); i++) {
				SSObject obj = objs.elementAt(i);
				JButton button = null;
				if (atLeastOneObj) {
					button = buttonList[++j];
				} else {
					button = buttonList[j++];
				}
				if ((index == EMPLOYEE)
						&& (state.getClock().isStopped() == false)) {
					Employee e = (Employee) obj;
					PopupListener pListener = ((PopupListener) button
							.getMouseListeners()[1]);
					pListener.setEnabled(true);
					JPopupMenu p = pListener.getPopupMenu();
					p.removeAll();
					Vector<String> v = e.getMenu();
					for (int k = 0; k < v.size(); k++) {
						JMenuItem tempItem = new JMenuItem(v.elementAt(k));
						tempItem.addActionListener(this);
						p.add(tempItem);
					}
				}
				button.setEnabled(true);
				button.setIcon(objsToImages.get(obj));

				if (obj.equals(objInFocus)) {
					button.setBackground(btnBlue);
					button.setBorder(selectedBorder);
				} else {
					button.setBackground(Color.WHITE);
					button.setBorder(defaultBorder);
				}
				buttonsToObjs.put(button, obj);

				if (i == (MAXBUTTONS - 1)) // reached the max
				{
					break;
				}
			}

			validate();
			repaint();
		}
		guiChanged = false;
	}

	private void updateImages(int index) {
		Vector<? extends SSObject> objs;
		switch (index) {
		case ARTIFACT:
			objs = state.getArtifactStateRepository().getAll();
			break;
		case CUSTOMER:
			objs = state.getCustomerStateRepository().getAll();
			break;
		case EMPLOYEE:
			objs = state.getEmployeeStateRepository().getAll();
			break;
		case PROJECT:
			objs = state.getProjectStateRepository().getAll();
			break;
		case TOOL:
			objs = state.getToolStateRepository().getAll();
			break;
		default:
			objs = new Vector<SSObject>();
			break;
		}

		for (int i = 0; i < objs.size(); i++) {
			String filename = getImage(objs.elementAt(i));

			ImageIcon ico = new ImageIcon(ImageLoader.getImageFromURL(filename));
			Image scaledImage = ico.getImage().getScaledInstance(35, 35,
					Image.SCALE_AREA_AVERAGING);
			ico.setImage(scaledImage);

			objsToImages.put(objs.elementAt(i), ico);
		}
	}

	public static String getImage(Object obj) {
		String url = "";

		if (obj instanceof SoftwareEngineer) {
			SoftwareEngineer p = (SoftwareEngineer) obj;
			if (p.getName().equals("Mimi")) {
				url = "/simse/gui/icons/bev.gif";
			} else if (p.getName().equals("Roger")) {
				url = "/simse/gui/icons/ping.gif";
			} else if (p.getName().equals("Calvin")) {
				url = "/simse/gui/icons/calvin.gif";
			} else if (p.getName().equals("Anita")) {
				url = "/simse/gui/icons/anita2.png";
			} else if (p.getName().equals("Emily")) {
				url = "/simse/gui/icons/emily.gif";
			} else if (p.getName().equals("Pedro")) {
				url = "/simse/gui/icons/chris2.gif";
			} else if (p.getName().equals("Andre")) {
				url = "/simse/gui/icons/andre2.png";
			}
		} else if (obj instanceof RequirementsDocument) {
			RequirementsDocument p = (RequirementsDocument) obj;
			if (p.getName().equals("Requirements")) {
				url = "/simse/gui/icons/3.gif";
			}
		} else if (obj instanceof DesignDocument) {
			DesignDocument p = (DesignDocument) obj;
			if (p.getName().equals("Design")) {
				url = "/simse/gui/icons/1.gif";
			}
		} else if (obj instanceof Code) {
			Code p = (Code) obj;
			if (p.getName().equals("Code")) {
				url = "/simse/gui/icons/6.gif";
			}
		} else if (obj instanceof SystemTestPlan) {
			SystemTestPlan p = (SystemTestPlan) obj;
			if (p.getName().equals("TestPlan")) {
				url = "/simse/gui/icons/4.gif";
			}
		} else if (obj instanceof SEProject) {
			SEProject p = (SEProject) obj;
			if (p.getDescription().equals("Groceries@Home")) {
				url = "/simse/gui/icons/11.gif";
			}
		} else if (obj instanceof RequirementsCaptureTool) {
			RequirementsCaptureTool p = (RequirementsCaptureTool) obj;
			if (p.getName().equals("SteelTrace")) {
				url = "/simse/gui/icons/10.gif";
			}
		} else if (obj instanceof DesignEnvironment) {
			DesignEnvironment p = (DesignEnvironment) obj;
			if (p.getName().equals("RationalRose")) {
				url = "/simse/gui/icons/use_case_green.GIF";
			}
		} else if (obj instanceof IDE) {
			IDE p = (IDE) obj;
			if (p.getName().equals("Eclipse")) {
				url = "/simse/gui/icons/12.gif";
			}
		} else if (obj instanceof AutomatedTestingTool) {
			AutomatedTestingTool p = (AutomatedTestingTool) obj;
			if (p.getName().equals("JUnit")) {
				url = "/simse/gui/icons/8.gif";
			}
		} else if (obj instanceof ACustomer) {
			ACustomer p = (ACustomer) obj;
			if (p.getName().equals("Grocery Home Delivery Service")) {
				url = "/simse/gui/icons/eddie_murphy.gif";
			}
		}
		return url;
	}
}