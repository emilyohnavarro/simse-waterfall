/* File generated by: simse.codegenerator.guigenerator.AttributePanelGenerator */
package simse.gui;

import simse.engine.*;
import simse.state.*;
import simse.adts.objects.*;

import java.text.*;
import java.util.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import java.awt.Color;
import java.io.*;

public class AttributePanel extends JPanel {
	private final int ATTRIBUTE_LIST_CAPACITY = 5; // number of attributes that
													// can be displayed in a
													// list without making the
													// list scrollable

	private GridBagLayout gbl;
	private ClockPanel clockPane;

	private State state;
	private NumberFormat numFormat;

	private JScrollPane attributePaneLeft;
	private JScrollPane attributePaneRight;
	private JList attributeListLeft;
	private JList attributeListRight;

	private Vector<String> attributes;
	private SSObject objInFocus = null;
	private ImageIcon displayedIcon;

	private JLabel selectedIcon;
	private JPanel iconPanel;

	private Image border;
	private Image iconBorder;

	private boolean guiChanged;

	public AttributePanel(SimSEGUI g, State s, Engine e) {
		gbl = new GridBagLayout();
		setLayout(gbl);

		border = ImageLoader
				.getImageFromURL("/simse/gui/images/layout/border.gif");
		iconBorder = ImageLoader
				.getImageFromURL("/simse/gui/images/layout/iconBorder.gif");

		state = s;
		clockPane = new ClockPanel(g, s, e);
		clockPane.setPreferredSize(new Dimension(250, 100));

		numFormat = NumberFormat.getNumberInstance(Locale.US);

		attributes = new Vector<String>();

		attributeListLeft = new JList();
		attributePaneLeft = new JScrollPane(attributeListLeft,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		attributePaneLeft.setPreferredSize(new Dimension(300, 95));

		attributeListRight = new JList();
		attributePaneRight = new JScrollPane(attributeListRight,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		attributePaneRight.setPreferredSize(new Dimension(300, 95));

		JPanel attributePane = new JPanel();
		((FlowLayout) attributePane.getLayout()).setHgap(5);
		((FlowLayout) attributePane.getLayout()).setVgap(0);
		attributePane.add(attributePaneLeft);
		attributePane.add(attributePaneRight);
		attributePane.setBackground(new Color(102, 102, 102, 255));

		iconPanel = new JPanel(gbl);
		iconPanel.setBackground(new Color(0, 0, 0, 0));
		iconPanel.setPreferredSize(new Dimension(90, 90));
		selectedIcon = new JLabel(new ImageIcon(
				ImageLoader.getImageFromURL("/simse/gui/images/grid.gif")));
		selectedIcon.setOpaque(true);
		selectedIcon.setPreferredSize(new Dimension(50, 50));
		selectedIcon.setMinimumSize(new Dimension(50, 50));

		GridBagConstraints gbc;
		gbc = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.WEST,
				GridBagConstraints.NONE, new Insets(-3, 5, 0, 0), 0, 0);
		gbl.setConstraints(selectedIcon, gbc);
		iconPanel.add(selectedIcon);
		add(iconPanel);

		gbc = new GridBagConstraints(2, 0, 1, 1, 1, 1,
				GridBagConstraints.SOUTH, GridBagConstraints.NONE, new Insets(
						0, 0, 0, 0), 0, 0);
		gbl.setConstraints(attributePane, gbc);
		add(attributePane);

		gbc = new GridBagConstraints(3, 0, 1, 1, 1, 1,
				GridBagConstraints.SOUTHEAST, GridBagConstraints.NONE,
				new Insets(10, 0, 0, 0), 0, 0);
		gbl.setConstraints(clockPane, gbc);
		add(clockPane);
	}

	public void paintComponent(Graphics g) {
		Dimension d = getSize();
		int width = (int) d.getWidth();
		g.setColor(new Color(102, 102, 102, 255));
		g.fillRect(0, 0, width, 110);

		// repeat the border across the width of screen:
		for (int i = 0; i < width; i += 100) {
			g.drawImage(border, i, 0, this);
		}
		// draw the design for the selectedIcon
		g.drawImage(iconBorder, 05, 11, this);
	}

	public void setObjectInFocus(SSObject obj, Icon img) {
		objInFocus = obj;
		if (img != null) {
			setIcon(img);
		}
		updateAttributeList();
	}

	public void update() {
		updateAttributeList();
		clockPane.update();
	}

	public void setGUIChanged() {
		guiChanged = true;
	}

	private void updateAttributeList() {
		if (false) {
		} else {
			attributes.clear();

			// Employee:
			if ((objInFocus != null)
					&& state.getEmployeeStateRepository().getAll()
							.contains(objInFocus)) {
				if (objInFocus instanceof SoftwareEngineer) {
					SoftwareEngineer p = (SoftwareEngineer) objInFocus;
					attributes
							.add("<html><font size=2>Type: SoftwareEngineer</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Energy: "
								+ numFormat.format(p.getEnergy())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Energy: "
								+ numFormat.format(p.getEnergy())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Mood: "
								+ numFormat.format(p.getMood())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Mood: "
								+ numFormat.format(p.getMood())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes
								.add("<html><font size=2>RequirementsExperience: "
										+ p.getRequirementsExperience()
										+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes
								.add("<html><font size=2>RequirementsExperience: "
										+ p.getRequirementsExperience()
										+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>DesignExperience: "
								+ p.getDesignExperience() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>DesignExperience: "
								+ p.getDesignExperience() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>CodingExperience: "
								+ p.getCodingExperience() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>CodingExperience: "
								+ p.getCodingExperience() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>TestingExperience: "
								+ p.getTestingExperience() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>TestingExperience: "
								+ p.getTestingExperience() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>PayRate: "
								+ numFormat.format(p.getPayRate())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>PayRate: "
								+ numFormat.format(p.getPayRate())
								+ "</font></html>");
					}
				}
			}
			// Artifact:
			else if ((objInFocus != null)
					&& state.getArtifactStateRepository().getAll()
							.contains(objInFocus)) {
				if (objInFocus instanceof RequirementsDocument) {
					RequirementsDocument p = (RequirementsDocument) objInFocus;
					attributes
							.add("<html><font size=2>Type: RequirementsDocument</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumUnknownErrors: "
								+ numFormat.format(p.getNumUnknownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentErroneous: "
								+ numFormat.format(p.getPercentErroneous())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
				} else if (objInFocus instanceof DesignDocument) {
					DesignDocument p = (DesignDocument) objInFocus;
					attributes
							.add("<html><font size=2>Type: DesignDocument</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumUnknownErrors: "
								+ numFormat.format(p.getNumUnknownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentErroneous: "
								+ numFormat.format(p.getPercentErroneous())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
				} else if (objInFocus instanceof Code) {
					Code p = (Code) objInFocus;
					attributes
							.add("<html><font size=2>Type: Code</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentIntegrated: "
								+ numFormat.format(p.getPercentIntegrated())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentIntegrated: "
								+ numFormat.format(p.getPercentIntegrated())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumUnknownErrors: "
								+ numFormat.format(p.getNumUnknownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentErroneous: "
								+ numFormat.format(p.getPercentErroneous())
								+ "</font></html>");
					}
				} else if (objInFocus instanceof SystemTestPlan) {
					SystemTestPlan p = (SystemTestPlan) objInFocus;
					attributes
							.add("<html><font size=2>Type: SystemTestPlan</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumKnownErrors: "
								+ numFormat.format(p.getNumKnownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>NumUnknownErrors: "
								+ numFormat.format(p.getNumUnknownErrors())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentErroneous: "
								+ numFormat.format(p.getPercentErroneous())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(0);
						numFormat.setMaximumFractionDigits(0);
						attributes.add("<html><font size=2>PercentComplete: "
								+ numFormat.format(p.getPercentComplete())
								+ "</font></html>");
					}
				}
			}
			// Tool:
			else if ((objInFocus != null)
					&& state.getToolStateRepository().getAll()
							.contains(objInFocus)) {
				if (objInFocus instanceof RequirementsCaptureTool) {
					RequirementsCaptureTool p = (RequirementsCaptureTool) objInFocus;
					attributes
							.add("<html><font size=2>Type: RequirementsCaptureTool</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ProductivityIncreaseFactor: "
										+ numFormat.format(p
												.getProductivityIncreaseFactor())
										+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ErrorRateDecreaseFactor: "
										+ numFormat.format(p
												.getErrorRateDecreaseFactor())
										+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
				} else if (objInFocus instanceof DesignEnvironment) {
					DesignEnvironment p = (DesignEnvironment) objInFocus;
					attributes
							.add("<html><font size=2>Type: DesignEnvironment</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ProductivityIncreaseFactor: "
										+ numFormat.format(p
												.getProductivityIncreaseFactor())
										+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ErrorRateDecreaseFactor: "
										+ numFormat.format(p
												.getErrorRateDecreaseFactor())
										+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
				} else if (objInFocus instanceof IDE) {
					IDE p = (IDE) objInFocus;
					attributes
							.add("<html><font size=2>Type: IDE</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ProductivityIncreaseFactor: "
										+ numFormat.format(p
												.getProductivityIncreaseFactor())
										+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ErrorRateDecreaseFactor: "
										+ numFormat.format(p
												.getErrorRateDecreaseFactor())
										+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
				} else if (objInFocus instanceof AutomatedTestingTool) {
					AutomatedTestingTool p = (AutomatedTestingTool) objInFocus;
					attributes
							.add("<html><font size=2>Type: AutomatedTestingTool</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Cost: "
								+ numFormat.format(p.getCost())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ProductivityIncreaseFactor: "
										+ numFormat.format(p
												.getProductivityIncreaseFactor())
										+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes
								.add("<html><font size=2>ErrorRateDecreaseFactor: "
										+ numFormat.format(p
												.getErrorRateDecreaseFactor())
										+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Purchased: "
								+ p.getPurchased() + "</font></html>");
					}
				}
			}
			// Project:
			else if ((objInFocus != null)
					&& state.getProjectStateRepository().getAll()
							.contains(objInFocus)) {
				if (objInFocus instanceof SEProject) {
					SEProject p = (SEProject) objInFocus;
					attributes
							.add("<html><font size=2>Type: SEProject</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Description: "
								+ p.getDescription() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Description: "
								+ p.getDescription() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Budget: "
								+ numFormat.format(p.getBudget())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>Budget: "
								+ numFormat.format(p.getBudget())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>MoneySpent: "
								+ numFormat.format(p.getMoneySpent())
								+ "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						numFormat.setMinimumFractionDigits(2);
						numFormat.setMaximumFractionDigits(2);
						attributes.add("<html><font size=2>MoneySpent: "
								+ numFormat.format(p.getMoneySpent())
								+ "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>AllottedTime: "
								+ p.getAllottedTime() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>AllottedTime: "
								+ p.getAllottedTime() + "</font></html>");
					}
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>TimeUsed: "
								+ p.getTimeUsed() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>TimeUsed: "
								+ p.getTimeUsed() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Score: "
								+ p.getScore() + "</font></html>");
					}
				}
			}
			// Customer:
			else if ((objInFocus != null)
					&& state.getCustomerStateRepository().getAll()
							.contains(objInFocus)) {
				if (objInFocus instanceof ACustomer) {
					ACustomer p = (ACustomer) objInFocus;
					attributes
							.add("<html><font size=2>Type: aCustomer</font></html>");
					if (!state.getClock().isStopped()) // game not over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
					if (state.getClock().isStopped()) // game is over
					{
						attributes.add("<html><font size=2>Name: "
								+ p.getName() + "</font></html>");
					}
				}
			} else {
				setIcon(new ImageIcon(
						ImageLoader
								.getImageFromURL("/simse/gui/images/grid.gif")));
			}

			attributeListLeft.setListData(attributes);
			attributeListRight.setListData(new Vector());
			validate();

			// distribute attributes to both sides, if needed:
			Vector<String> rightHandAtts = new Vector<String>();
			if (attributes.size() > ATTRIBUTE_LIST_CAPACITY) // need to use 2nd
																// list
			{
				while ((ATTRIBUTE_LIST_CAPACITY) < attributes.size()) // there
																		// are
																		// still
																		// more
																		// elements
																		// to
																		// move
																		// to
																		// right
				{
					rightHandAtts.add(attributes
							.remove(ATTRIBUTE_LIST_CAPACITY)); // remove from
																// left, put on
																// right
				}
				attributeListRight.setListData(rightHandAtts);
				attributeListLeft.setListData(attributes);
				validate();
				repaint();

				if (attributePaneLeft.getHorizontalScrollBar().isVisible()) // need
																			// to
																			// move
																			// one
																			// more
																			// over
																			// to
																			// account
																			// for
																			// extra
																			// space
																			// that
				// scrollbar takes up
				{
					rightHandAtts.add(0,
							attributes.remove(attributes.size() - 1)); // move
					attributeListRight.setListData(rightHandAtts);
					attributeListLeft.setListData(attributes);
				}
			}
			repaint();
			guiChanged = false;
		}
	}

	public ClockPanel getClockPanel() {
		return clockPane;
	}

	public void setIcon(Icon img) {
		selectedIcon.setBackground(Color.WHITE);
		selectedIcon.setIcon(img);
	}
}