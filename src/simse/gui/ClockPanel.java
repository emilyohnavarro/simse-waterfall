/* File generated by: simse.codegenerator.guigenerator.ClockPanelGenerator */
package simse.gui;

import simse.engine.*;
import simse.state.*;
import java.util.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import java.awt.Color;
import java.io.*;
import javax.swing.border.LineBorder;

public class ClockPanel extends JPanel implements MouseListener {
	private State state;
	private Engine engine;
	private SimSEGUI gui;

	private int screenX = 300; // x width of the screen
	private int screenY = 100; // y width of the screen

	private JTextField txtAdvClock;
	private JLabel btnAdvClock;
	private JLabel btnNextEvent;
	private JLabel lblTimeElapsed;
	private Image[] timeElapsedDigits;
	private JCheckBox stopCBox;

	private boolean cursorDisplayed;
	private String cursor;

	private static ImageIcon icoNextEvent = new ImageIcon(
			ImageLoader
					.getImageFromURL("/simse/gui/images/layout/btnNextEvent.gif"));
	private static ImageIcon icoAdvClock = new ImageIcon(
			ImageLoader
					.getImageFromURL("/simse/gui/images/layout/btnAdvClock.gif"));
	private static ImageIcon icoStopClock = new ImageIcon(
			ImageLoader
					.getImageFromURL("/simse/gui/images/layout/btnStopClock.gif"));

	public ClockPanel(SimSEGUI g, State s, Engine e) {
		gui = g;
		state = s;
		engine = e;
		buildGUI();
		update();
	}

	private void buildGUI() {
		GridBagLayout gbl = new GridBagLayout();
		setLayout(gbl);
		GridBagConstraints gbc;

		gbc = new GridBagConstraints(0, 0, 1, 1, 1, 0,
				GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,
				new Insets(12, 0, 0, 25), 0, 0);
		btnNextEvent = new JLabel(icoNextEvent);
		btnNextEvent.addMouseListener(this);
		gbl.setConstraints(btnNextEvent, gbc);
		add(btnNextEvent);

		gbc = new GridBagConstraints(0, 1, 1, 1, 1, 0,
				GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,
				new Insets(2, 0, 0, 25), 0, 0);
		btnAdvClock = new JLabel(icoAdvClock);
		btnAdvClock.addMouseListener(this);
		gbl.setConstraints(btnAdvClock, gbc);
		add(btnAdvClock);

		gbc = new GridBagConstraints(0, 2, 1, 1, 1, 0,
				GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,
				new Insets(-3, 0, 0, 100), 0, 0);
		stopCBox = new JCheckBox();
		stopCBox.setBackground(Color.WHITE);
		stopCBox.setOpaque(false);
		stopCBox.addMouseListener(this);
		gbl.setConstraints(stopCBox, gbc);
		add(stopCBox);

		gbc = new GridBagConstraints(0, 3, 1, 1, 1, 1,
				GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,
				new Insets(-5, 0, 0, 30), 0, 0);
		txtAdvClock = new JTextField("1");
		txtAdvClock.setForeground(Color.DARK_GRAY);
		txtAdvClock.setOpaque(false);
		txtAdvClock.setPreferredSize(new Dimension(90, 18));
		txtAdvClock.setBorder(new LineBorder(new Color(0, 0, 0, 0)));
		gbl.setConstraints(txtAdvClock, gbc);
		add(txtAdvClock);
	}

	public void resetAdvClockImage() {
		stopCBox.setEnabled(true);
		btnAdvClock.setIcon(icoAdvClock);
	}

	public void setAdvClockImage() {
		btnAdvClock.setIcon(icoStopClock);
	}

	public void mouseClicked(MouseEvent me) {
		if (state.getClock().isStopped() == false) // clock not stopped
		{
			Object source = me.getSource();
			if (source == btnNextEvent) {
				stopCBox.setEnabled(false);
				nextEvent();
			} else if (source == btnAdvClock) {
				if (engine.isRunning()) {
					engine.stop();
				} else {
					int ticks = 0;
					try {
						ticks = Integer.parseInt(txtAdvClock.getText().trim());
						if (ticks <= 0) // negative number entered)
						{
							JOptionPane
									.showMessageDialog(
											null,
											"Please enter a positive integer number of clock ticks",
											"Error", JOptionPane.ERROR_MESSAGE);
						} else {
							engine.setSteps(ticks);
						}
					} catch (NumberFormatException nfe) {
						JOptionPane
								.showMessageDialog(
										null,
										"Please enter a positive integer number of clock ticks",
										"Error", JOptionPane.ERROR_MESSAGE);
					}
				}
			}
			if (stopCBox.isEnabled()) {
				engine.setStopAtEvents(stopCBox.isSelected());
			}

		}
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseReleased(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
		Object source = me.getSource();
		if (source == btnNextEvent || source == btnAdvClock) {
			setCursor(new Cursor(Cursor.HAND_CURSOR));
		}
	}

	public void mouseExited(MouseEvent me) {
		setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}

	public void paintComponent(Graphics g) {
		Image img = ImageLoader
				.getImageFromURL("/simse/gui/images/layout/clock.gif");

		g.setColor(Color.DARK_GRAY);
		g.fillRect(0, 0, 242 + 10, 96 + 20);
		g.drawImage(img, 0, 0, this);

		// draws the Time Elapsed numbers
		for (int i = 0; i < timeElapsedDigits.length && i < 9; i++) {
			int blanks = (9 - timeElapsedDigits.length) * 10;
			if (blanks < 0) {
				blanks = 0;
			}

			int x = 20 + blanks + (i * 10);
			g.drawImage(timeElapsedDigits[i], x, 52, this);
		}
	}

	// jumps to the next event -- the next time someone has an overhead text to
	// say
	public void nextEvent() {
		engine.setStopAtEvents(true);
		engine.setSteps(10000);
	}

	// used to refresh the clock number displayed next to Elapsed Time
	public void update() {
		// offset used so that when the number of digits increase (1, 10, 100,
		// 1000, etc) it shifts accordingly
		int clockTicks = state.getClock().getTime();
		convert(clockTicks);
	}

	// converts the time into a series of digit images
	private void convert(int time) {
		ArrayList<Image> list = new ArrayList<Image>();
		String s = "" + time;

		for (int i = 0; i < s.length(); i++) {
			int digit = Character.digit(s.charAt(i), 10);
			Image img = ImageLoader
					.getImageFromURL("/simse/gui/images/layout/n" + digit
							+ ".gif");
			list.add(img);
		}
		timeElapsedDigits = (Image[]) list.toArray(new Image[1]);
		repaint();
	}
}