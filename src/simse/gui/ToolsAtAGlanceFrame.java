/* File generated by: simse.codegenerator.guigenerator.AtAGlanceFramesGenerator */
package simse.gui;

import simse.state.*;

import java.awt.event.*;
import java.awt.*;
import java.awt.Dimension;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.border.*;
import java.util.*;
import java.text.*;
import java.awt.Color;

public class ToolsAtAGlanceFrame extends JFrame implements MouseListener,
		ActionListener {

	private State state;

	private JPopupMenu popup;
	private PopupListener popupListener;
	private JTable requirementscapturetoolTable;
	private RequirementsCaptureToolTableModel requirementscapturetoolModel;
	private JPanel requirementscapturetoolTitlePane;
	private JTable designenvironmentTable;
	private DesignEnvironmentTableModel designenvironmentModel;
	private JPanel designenvironmentTitlePane;
	private JTable ideTable;
	private IDETableModel ideModel;
	private JPanel ideTitlePane;
	private JTable automatedtestingtoolTable;
	private AutomatedTestingToolTableModel automatedtestingtoolModel;
	private JPanel automatedtestingtoolTitlePane;
	private JPanel mainPane;

	private int realColumnIndex; // index of selected column
	private JTable selectedTable; // selected table

	public ToolsAtAGlanceFrame(State s, SimSEGUI gui) {
		state = s;
		// Set window title:
		setTitle("Tools At-A-Glance");

		// Create tables:
		int numCols;

		requirementscapturetoolModel = new RequirementsCaptureToolTableModel(s);
		requirementscapturetoolTable = new JTable(requirementscapturetoolModel);
		requirementscapturetoolTable.setColumnSelectionAllowed(false);
		requirementscapturetoolTable.setRowSelectionAllowed(false);
		requirementscapturetoolTable.addMouseListener(this);
		requirementscapturetoolTable.getTableHeader().setReorderingAllowed(
				false);
		// make it so that the user can make each column disappear if they want:
		numCols = requirementscapturetoolTable.getColumnCount();
		for (int i = 0; i < numCols; i++) {
			requirementscapturetoolTable.getColumnModel().getColumn(i)
					.setMinWidth(0);
		}
		designenvironmentModel = new DesignEnvironmentTableModel(s);
		designenvironmentTable = new JTable(designenvironmentModel);
		designenvironmentTable.setColumnSelectionAllowed(false);
		designenvironmentTable.setRowSelectionAllowed(false);
		designenvironmentTable.addMouseListener(this);
		designenvironmentTable.getTableHeader().setReorderingAllowed(false);
		// make it so that the user can make each column disappear if they want:
		numCols = designenvironmentTable.getColumnCount();
		for (int i = 0; i < numCols; i++) {
			designenvironmentTable.getColumnModel().getColumn(i).setMinWidth(0);
		}
		ideModel = new IDETableModel(s);
		ideTable = new JTable(ideModel);
		ideTable.setColumnSelectionAllowed(false);
		ideTable.setRowSelectionAllowed(false);
		ideTable.addMouseListener(this);
		ideTable.getTableHeader().setReorderingAllowed(false);
		// make it so that the user can make each column disappear if they want:
		numCols = ideTable.getColumnCount();
		for (int i = 0; i < numCols; i++) {
			ideTable.getColumnModel().getColumn(i).setMinWidth(0);
		}
		automatedtestingtoolModel = new AutomatedTestingToolTableModel(s);
		automatedtestingtoolTable = new JTable(automatedtestingtoolModel);
		automatedtestingtoolTable.setColumnSelectionAllowed(false);
		automatedtestingtoolTable.setRowSelectionAllowed(false);
		automatedtestingtoolTable.addMouseListener(this);
		automatedtestingtoolTable.getTableHeader().setReorderingAllowed(false);
		// make it so that the user can make each column disappear if they want:
		numCols = automatedtestingtoolTable.getColumnCount();
		for (int i = 0; i < numCols; i++) {
			automatedtestingtoolTable.getColumnModel().getColumn(i)
					.setMinWidth(0);
		}

		// right click menu:
		popup = new JPopupMenu();
		popupListener = new PopupListener(popup, gui);

		// Create panes:
		JScrollPane requirementscapturetoolPane = new JScrollPane(
				requirementscapturetoolTable);
		JScrollPane designenvironmentPane = new JScrollPane(
				designenvironmentTable);
		JScrollPane idePane = new JScrollPane(ideTable);
		JScrollPane automatedtestingtoolPane = new JScrollPane(
				automatedtestingtoolTable);

		// Table headers:
		requirementscapturetoolTitlePane = new JPanel();
		requirementscapturetoolTitlePane.add(new JLabel(
				"RequirementsCaptureTools:"));
		designenvironmentTitlePane = new JPanel();
		designenvironmentTitlePane.add(new JLabel("DesignEnvironments:"));
		ideTitlePane = new JPanel();
		ideTitlePane.add(new JLabel("IDEs:"));
		automatedtestingtoolTitlePane = new JPanel();
		automatedtestingtoolTitlePane.add(new JLabel("AutomatedTestingTools:"));

		// Create main pane:
		mainPane = new JPanel();
		mainPane.setLayout(new BoxLayout(mainPane, BoxLayout.Y_AXIS));

		// Add panes to main pane:
		mainPane.add(requirementscapturetoolTitlePane);
		mainPane.add(requirementscapturetoolPane);
		mainPane.add(designenvironmentTitlePane);
		mainPane.add(designenvironmentPane);
		mainPane.add(ideTitlePane);
		mainPane.add(idePane);
		mainPane.add(automatedtestingtoolTitlePane);
		mainPane.add(automatedtestingtoolPane);

		// Set main window frame properties:
		setBackground(Color.white);
		setContentPane(mainPane);
		setVisible(false);
		pack();
		validate();

		resetHeight();
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseClicked(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void mouseReleased(MouseEvent me) {
		Point p = me.getPoint();

		if (me.isPopupTrigger()) {
			if (me.getComponent().equals(requirementscapturetoolTable)) // correct
																		// table
			{
				createPopupMenu(requirementscapturetoolTable, p);
			} else if (me.getComponent().equals(designenvironmentTable)) // correct
																			// table
			{
				createPopupMenu(designenvironmentTable, p);
			} else if (me.getComponent().equals(ideTable)) // correct table
			{
				createPopupMenu(ideTable, p);
			} else if (me.getComponent().equals(automatedtestingtoolTable)) // correct
																			// table
			{
				createPopupMenu(automatedtestingtoolTable, p);
			}
		}
	}

	public void actionPerformed(ActionEvent e) // dealing with actions generated
												// by popup menus
	{
		Object source = e.getSource();
		if (source instanceof JMenuItem) {
			String itemText = ((JMenuItem) source).getText();
			if (itemText.equals("Hide")) {
				if (selectedTable != null) {
					selectedTable.getColumnModel().getColumn(realColumnIndex)
							.setMaxWidth(0);
				}
			} else // an item on the "Unhide" menu
			{
				if (selectedTable != null) {
					TableModel model = selectedTable.getModel();
					TableColumn column = null;
					if (model instanceof RequirementsCaptureToolTableModel) {
						column = selectedTable
								.getColumnModel()
								.getColumn(
										((RequirementsCaptureToolTableModel) selectedTable
												.getModel())
												.getColumnIndex(itemText));
					} else if (model instanceof DesignEnvironmentTableModel) {
						column = selectedTable.getColumnModel().getColumn(
								((DesignEnvironmentTableModel) selectedTable
										.getModel()).getColumnIndex(itemText));
					} else if (model instanceof IDETableModel) {
						column = selectedTable.getColumnModel().getColumn(
								((IDETableModel) selectedTable.getModel())
										.getColumnIndex(itemText));
					} else if (model instanceof AutomatedTestingToolTableModel) {
						column = selectedTable.getColumnModel().getColumn(
								((AutomatedTestingToolTableModel) selectedTable
										.getModel()).getColumnIndex(itemText));
					}
					if (column != null) {
						column.setMinWidth(0);
						column.setMaxWidth(2147483647);
						column.setPreferredWidth(selectedTable.getWidth()
								/ (selectedTable.getColumnCount()
										- getAllHiddenColumnIndices(
												selectedTable).size() + 1));
					}
				}
			}
		}
	}

	public void createPopupMenu(JTable table, Point p) {
		popup.removeAll();

		int colIndex = table.columnAtPoint(p);
		realColumnIndex = table.convertColumnIndexToModel(colIndex);

		Vector<Integer> hiddenCols = getAllHiddenColumnIndices(table);

		if ((realColumnIndex >= 0) || (hiddenCols.size() > 0)) // user clicked
																// on a column
																// and/or there
																// is at least
																// one hidden
																// column
		{
			if (realColumnIndex >= 0) {
				JMenuItem hideItem = new JMenuItem("Hide");
				hideItem.addActionListener(this);
				popup.add(hideItem);
			}

			if (hiddenCols.size() > 0) // there is at least one hidden column
			{
				JMenu unhideMenu = new JMenu("Unhide");
				for (int i = 0; i < hiddenCols.size(); i++) {
					int index = hiddenCols.elementAt(i).intValue();
					JMenuItem tempItem = new JMenuItem(
							table.getColumnName(index));
					tempItem.addActionListener(this);
					unhideMenu.add(tempItem);
				}
				if (popup.getComponents().length > 0) // already has the hide
														// menu item
				{
					popup.addSeparator();
				}
				popup.add(unhideMenu);
			}

			addMouseListener(popupListener);
			popup.show(table, (int) p.getX(), (int) p.getY());
			selectedTable = table;
			repaint();
		}
	}

	public void update() {
		DefaultTableCellRenderer rightAlignRenderer = new DefaultTableCellRenderer();
		rightAlignRenderer.setHorizontalAlignment(JLabel.RIGHT);
		requirementscapturetoolModel.update();
		if (!state.getClock().isStopped()) { // game not over
			requirementscapturetoolTable
					.getColumnModel()
					.getColumn(
							requirementscapturetoolModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
		} else { // game over
			requirementscapturetoolTable
					.getColumnModel()
					.getColumn(
							requirementscapturetoolModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
			requirementscapturetoolTable
					.getColumnModel()
					.getColumn(
							requirementscapturetoolModel
									.getColumnIndex("ProductivityIncreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
			requirementscapturetoolTable
					.getColumnModel()
					.getColumn(
							requirementscapturetoolModel
									.getColumnIndex("ErrorRateDecreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
		}
		requirementscapturetoolTable.update(requirementscapturetoolTable
				.getGraphics());
		designenvironmentModel.update();
		if (!state.getClock().isStopped()) { // game not over
			designenvironmentTable.getColumnModel()
					.getColumn(designenvironmentModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
		} else { // game over
			designenvironmentTable.getColumnModel()
					.getColumn(designenvironmentModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
			designenvironmentTable
					.getColumnModel()
					.getColumn(
							designenvironmentModel
									.getColumnIndex("ProductivityIncreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
			designenvironmentTable
					.getColumnModel()
					.getColumn(
							designenvironmentModel
									.getColumnIndex("ErrorRateDecreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
		}
		designenvironmentTable.update(designenvironmentTable.getGraphics());
		ideModel.update();
		if (!state.getClock().isStopped()) { // game not over
			ideTable.getColumnModel()
					.getColumn(ideModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
		} else { // game over
			ideTable.getColumnModel()
					.getColumn(ideModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
			ideTable.getColumnModel()
					.getColumn(
							ideModel.getColumnIndex("ProductivityIncreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
			ideTable.getColumnModel()
					.getColumn(
							ideModel.getColumnIndex("ErrorRateDecreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
		}
		ideTable.update(ideTable.getGraphics());
		automatedtestingtoolModel.update();
		if (!state.getClock().isStopped()) { // game not over
			automatedtestingtoolTable
					.getColumnModel()
					.getColumn(automatedtestingtoolModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
		} else { // game over
			automatedtestingtoolTable
					.getColumnModel()
					.getColumn(automatedtestingtoolModel.getColumnIndex("Cost"))
					.setCellRenderer(rightAlignRenderer);
			automatedtestingtoolTable
					.getColumnModel()
					.getColumn(
							automatedtestingtoolModel
									.getColumnIndex("ProductivityIncreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
			automatedtestingtoolTable
					.getColumnModel()
					.getColumn(
							automatedtestingtoolModel
									.getColumnIndex("ErrorRateDecreaseFactor"))
					.setCellRenderer(rightAlignRenderer);
		}
		automatedtestingtoolTable.update(automatedtestingtoolTable
				.getGraphics());
		resetHeight();
	}

	private void resetHeight() {
		// Set appropriate height:
		double height = 0;
		height += ((requirementscapturetoolTable.getRowHeight() + (requirementscapturetoolTable
				.getRowMargin() * 2)) * (requirementscapturetoolTable
				.getRowCount() + 1));
		height += requirementscapturetoolTitlePane.getSize().getHeight();
		height += ((designenvironmentTable.getRowHeight() + (designenvironmentTable
				.getRowMargin() * 2)) * (designenvironmentTable.getRowCount() + 1));
		height += designenvironmentTitlePane.getSize().getHeight();
		height += ((ideTable.getRowHeight() + (ideTable.getRowMargin() * 2)) * (ideTable
				.getRowCount() + 1));
		height += ideTitlePane.getSize().getHeight();
		height += ((automatedtestingtoolTable.getRowHeight() + (automatedtestingtoolTable
				.getRowMargin() * 2)) * (automatedtestingtoolTable
				.getRowCount() + 1));
		height += automatedtestingtoolTitlePane.getSize().getHeight();

		mainPane.setPreferredSize(new Dimension((int) (mainPane.getSize()
				.getWidth()), (int) height));
		pack();
		validate();
		repaint();
	}

	private Vector<Integer> getAllHiddenColumnIndices(JTable table) {
		Vector<Integer> hiddenCols = new Vector<Integer>();
		int numCols = table.getColumnModel().getColumnCount();
		for (int i = 0; i < numCols; i++) {
			TableColumn col = table.getColumnModel().getColumn(i);
			if (col.getWidth() == 0) // hidden
			{
				hiddenCols.add(new Integer(i));
			}
		}
		return hiddenCols;
	}
}