/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.objects;

public class SEProject extends Project implements Cloneable {
	private String description;
	private int requiredsizeofcode;
	private double budget;
	private double moneyspent;
	private int allottedtime;
	private int timeused;
	private double codecompletenessscore;
	private double codecorrectnessscore;
	private double budgetscore;
	private double schedulescore;
	private int score;
	private boolean suggestedrequirementsdone;
	private boolean suggesteddesigndone;
	private boolean suggestedimplementationintegrationdone;
	private boolean suggestedtestdone;

	public SEProject(String d0, int r1, double b2, double m3, int a4, int t5,
			double c6, double c7, double b8, double s9, int s10, boolean s11,
			boolean s12, boolean s13, boolean s14) {
		setDescription(d0);
		setRequiredSizeOfCode(r1);
		setBudget(b2);
		setMoneySpent(m3);
		setAllottedTime(a4);
		setTimeUsed(t5);
		setCodeCompletenessScore(c6);
		setCodeCorrectnessScore(c7);
		setBudgetScore(b8);
		setScheduleScore(s9);
		setScore(s10);
		setSuggestedRequirementsDone(s11);
		setSuggestedDesignDone(s12);
		setSuggestedImplementationIntegrationDone(s13);
		setSuggestedTestDone(s14);
	}

	public Object clone() {
		SEProject cl = (SEProject) (super.clone());
		cl.description = description;
		cl.requiredsizeofcode = requiredsizeofcode;
		cl.budget = budget;
		cl.moneyspent = moneyspent;
		cl.allottedtime = allottedtime;
		cl.timeused = timeused;
		cl.codecompletenessscore = codecompletenessscore;
		cl.codecorrectnessscore = codecorrectnessscore;
		cl.budgetscore = budgetscore;
		cl.schedulescore = schedulescore;
		cl.score = score;
		cl.suggestedrequirementsdone = suggestedrequirementsdone;
		cl.suggesteddesigndone = suggesteddesigndone;
		cl.suggestedimplementationintegrationdone = suggestedimplementationintegrationdone;
		cl.suggestedtestdone = suggestedtestdone;
		return cl;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String a) {
		description = a;
	}

	public int getRequiredSizeOfCode() {
		return requiredsizeofcode;
	}

	public void setRequiredSizeOfCode(int a) {
		if (a < 0) {
			requiredsizeofcode = 0;
		} else {
			requiredsizeofcode = a;
		}
	}

	public double getBudget() {
		return budget;
	}

	public void setBudget(double a) {
		if (a < 1.0) {
			budget = 1.0;
		} else {
			budget = a;
		}
	}

	public double getMoneySpent() {
		return moneyspent;
	}

	public void setMoneySpent(double a) {
		if (a < 0.0) {
			moneyspent = 0.0;
		} else {
			moneyspent = a;
		}
	}

	public int getAllottedTime() {
		return allottedtime;
	}

	public void setAllottedTime(int a) {
		if (a < 1) {
			allottedtime = 1;
		} else {
			allottedtime = a;
		}
	}

	public int getTimeUsed() {
		return timeused;
	}

	public void setTimeUsed(int a) {
		if (a < 0) {
			timeused = 0;
		} else {
			timeused = a;
		}
	}

	public double getCodeCompletenessScore() {
		return codecompletenessscore;
	}

	public void setCodeCompletenessScore(double a) {
		if (a > 1.0) {
			codecompletenessscore = 1.0;
		} else {
			codecompletenessscore = a;
		}
	}

	public double getCodeCorrectnessScore() {
		return codecorrectnessscore;
	}

	public void setCodeCorrectnessScore(double a) {
		if (a > 1.0) {
			codecorrectnessscore = 1.0;
		} else {
			codecorrectnessscore = a;
		}
	}

	public double getBudgetScore() {
		return budgetscore;
	}

	public void setBudgetScore(double a) {
		if (a > 1.0) {
			budgetscore = 1.0;
		} else {
			budgetscore = a;
		}
	}

	public double getScheduleScore() {
		return schedulescore;
	}

	public void setScheduleScore(double a) {
		if (a > 1.0) {
			schedulescore = 1.0;
		} else {
			schedulescore = a;
		}
	}

	public int getScore() {
		return score;
	}

	public void setScore(int a) {
		if (a < 0) {
			score = 0;
		} else if (a > 100) {
			score = 100;
		} else {
			score = a;
		}
	}

	public boolean getSuggestedRequirementsDone() {
		return suggestedrequirementsdone;
	}

	public void setSuggestedRequirementsDone(boolean a) {
		suggestedrequirementsdone = a;
	}

	public boolean getSuggestedDesignDone() {
		return suggesteddesigndone;
	}

	public void setSuggestedDesignDone(boolean a) {
		suggesteddesigndone = a;
	}

	public boolean getSuggestedImplementationIntegrationDone() {
		return suggestedimplementationintegrationdone;
	}

	public void setSuggestedImplementationIntegrationDone(boolean a) {
		suggestedimplementationintegrationdone = a;
	}

	public boolean getSuggestedTestDone() {
		return suggestedtestdone;
	}

	public void setSuggestedTestDone(boolean a) {
		suggestedtestdone = a;
	}

}