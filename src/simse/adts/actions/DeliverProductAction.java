/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;

import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;

public class DeliverProductAction extends Action implements Cloneable {
	private Hashtable<Employee, Boolean> emps;
	private Hashtable<Project, Boolean> projs;
	private Hashtable<Artifact, Boolean> codedocs;
	private Hashtable<Customer, Boolean> custs;

	public DeliverProductAction() {
		emps = new Hashtable<Employee, Boolean>();
		projs = new Hashtable<Project, Boolean>();
		codedocs = new Hashtable<Artifact, Boolean>();
		custs = new Hashtable<Customer, Boolean>();
	}

	public Object clone() {
		DeliverProductAction cl = (DeliverProductAction) (super.clone());
		Hashtable<Employee, Boolean> clonedemps = new Hashtable<Employee, Boolean>();
		clonedemps.putAll(emps);
		cl.emps = clonedemps;
		Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
		clonedprojs.putAll(projs);
		cl.projs = clonedprojs;
		Hashtable<Artifact, Boolean> clonedcodedocs = new Hashtable<Artifact, Boolean>();
		clonedcodedocs.putAll(codedocs);
		cl.codedocs = clonedcodedocs;
		Hashtable<Customer, Boolean> clonedcusts = new Hashtable<Customer, Boolean>();
		clonedcusts.putAll(custs);
		cl.custs = clonedcusts;
		return cl;
	}

	public Vector<SSObject> getAllParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllEmps());
		all.addAll(getAllProjs());
		all.addAll(getAllCodeDocs());
		all.addAll(getAllCusts());
		return all;
	}

	public Vector<SSObject> getAllActiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllActiveEmps());
		all.addAll(getAllActiveProjs());
		all.addAll(getAllActiveCodeDocs());
		all.addAll(getAllActiveCusts());
		return all;
	}

	public Vector<SSObject> getAllInactiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllInactiveEmps());
		all.addAll(getAllInactiveProjs());
		all.addAll(getAllInactiveCodeDocs());
		all.addAll(getAllInactiveCusts());
		return all;
	}

	public Vector<Employee> getAllEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Employee> getAllActiveEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			Employee key = e.nextElement();
			if ((emps.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Employee> getAllInactiveEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			Employee key = e.nextElement();
			if ((emps.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addEmp(Employee a) {
		if ((emps.containsKey(a))
				|| (((a instanceof SoftwareEngineer) == false))
				|| (emps.size() >= 1)) {
			return false;
		} else {
			emps.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeEmp(Employee a) {
		if (emps.containsKey(a)) {
			emps.remove(a);
			return true;
		}
		return false;
	}

	public boolean setEmpActive(Employee a) {
		if (emps.containsKey(a)) {
			emps.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setEmpInactive(Employee a) {
		if (emps.containsKey(a)) {
			emps.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Project> getAllProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Project> getAllActiveProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			Project key = e.nextElement();
			if ((projs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Project> getAllInactiveProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			Project key = e.nextElement();
			if ((projs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addProj(Project a) {
		if ((projs.containsKey(a)) || (((a instanceof SEProject) == false))
				|| (projs.size() >= 1)) {
			return false;
		} else {
			projs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeProj(Project a) {
		if (projs.containsKey(a)) {
			projs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setProjActive(Project a) {
		if (projs.containsKey(a)) {
			projs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setProjInactive(Project a) {
		if (projs.containsKey(a)) {
			projs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Artifact> getAllCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = codedocs.keys();
		for (int i = 0; i < codedocs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Artifact> getAllActiveCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = codedocs.keys();
		for (int i = 0; i < codedocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((codedocs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Artifact> getAllInactiveCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = codedocs.keys();
		for (int i = 0; i < codedocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((codedocs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addCodeDoc(Artifact a) {
		if ((codedocs.containsKey(a)) || (((a instanceof Code) == false))
				|| (codedocs.size() >= 1)) {
			return false;
		} else {
			codedocs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeCodeDoc(Artifact a) {
		if (codedocs.containsKey(a)) {
			codedocs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setCodeDocActive(Artifact a) {
		if (codedocs.containsKey(a)) {
			codedocs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setCodeDocInactive(Artifact a) {
		if (codedocs.containsKey(a)) {
			codedocs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Customer> getAllCusts() {
		Vector<Customer> a = new Vector<Customer>();
		Enumeration<Customer> e = custs.keys();
		for (int i = 0; i < custs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Customer> getAllActiveCusts() {
		Vector<Customer> a = new Vector<Customer>();
		Enumeration<Customer> e = custs.keys();
		for (int i = 0; i < custs.size(); i++) {
			Customer key = e.nextElement();
			if ((custs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Customer> getAllInactiveCusts() {
		Vector<Customer> a = new Vector<Customer>();
		Enumeration<Customer> e = custs.keys();
		for (int i = 0; i < custs.size(); i++) {
			Customer key = e.nextElement();
			if ((custs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addCust(Customer a) {
		if ((custs.containsKey(a)) || (((a instanceof ACustomer) == false))
				|| (custs.size() >= 1)) {
			return false;
		} else {
			custs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeCust(Customer a) {
		if (custs.containsKey(a)) {
			custs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setCustActive(Customer a) {
		if (custs.containsKey(a)) {
			custs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setCustInactive(Customer a) {
		if (custs.containsKey(a)) {
			custs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	/*
	 * Replaces all the participants in this action with their equivalent
	 * objects in the current state. Calling this function solves the problem
	 * that happens when you clone actions -- their hashtables point to
	 * participant objects that were part of the previous, non-cloned state.
	 * Hence, this function should be called after this object is cloned.
	 */
	public void refetchParticipants(ArtifactStateRepository artifactRep,
			CustomerStateRepository customerRep,
			EmployeeStateRepository employeeRep,
			ProjectStateRepository projectRep, ToolStateRepository toolRep) {
		// emp participants:
		Hashtable<Employee, Boolean> newEmps = new Hashtable<Employee, Boolean>();
		Iterator<Map.Entry<Employee, Boolean>> empsIterator = emps.entrySet()
				.iterator();
		while (empsIterator.hasNext()) {
			Map.Entry<Employee, Boolean> entry = empsIterator.next();
			Employee oldEmp = entry.getKey();
			if (oldEmp instanceof SoftwareEngineer) {
				Employee newEmp = employeeRep
						.getSoftwareEngineerStateRepository().get(
								((SoftwareEngineer) oldEmp).getName());
				Boolean activeStatus = emps.get(oldEmp);
				newEmps.put(newEmp, activeStatus);
			}
		}
		emps.clear();
		emps.putAll(newEmps);

		// proj participants:
		Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
		Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet()
				.iterator();
		while (projsIterator.hasNext()) {
			Map.Entry<Project, Boolean> entry = projsIterator.next();
			Project oldProj = entry.getKey();
			if (oldProj instanceof SEProject) {
				Project newProj = projectRep.getSEProjectStateRepository().get(
						((SEProject) oldProj).getDescription());
				Boolean activeStatus = projs.get(oldProj);
				newProjs.put(newProj, activeStatus);
			}
		}
		projs.clear();
		projs.putAll(newProjs);

		// codedoc participants:
		Hashtable<Artifact, Boolean> newCodeDocs = new Hashtable<Artifact, Boolean>();
		Iterator<Map.Entry<Artifact, Boolean>> codedocsIterator = codedocs
				.entrySet().iterator();
		while (codedocsIterator.hasNext()) {
			Map.Entry<Artifact, Boolean> entry = codedocsIterator.next();
			Artifact oldCodeDoc = entry.getKey();
			if (oldCodeDoc instanceof Code) {
				Artifact newCodeDoc = artifactRep.getCodeStateRepository().get(
						((Code) oldCodeDoc).getName());
				Boolean activeStatus = codedocs.get(oldCodeDoc);
				newCodeDocs.put(newCodeDoc, activeStatus);
			}
		}
		codedocs.clear();
		codedocs.putAll(newCodeDocs);

		// cust participants:
		Hashtable<Customer, Boolean> newCusts = new Hashtable<Customer, Boolean>();
		Iterator<Map.Entry<Customer, Boolean>> custsIterator = custs.entrySet()
				.iterator();
		while (custsIterator.hasNext()) {
			Map.Entry<Customer, Boolean> entry = custsIterator.next();
			Customer oldCust = entry.getKey();
			if (oldCust instanceof ACustomer) {
				Customer newCust = customerRep.getACustomerStateRepository()
						.get(((ACustomer) oldCust).getName());
				Boolean activeStatus = custs.get(oldCust);
				newCusts.put(newCust, activeStatus);
			}
		}
		custs.clear();
		custs.putAll(newCusts);

	}
}