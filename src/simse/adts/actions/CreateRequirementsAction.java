/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;

import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;

public class CreateRequirementsAction extends Action implements Cloneable {
	private Hashtable<Employee, Boolean> emps;
	private Hashtable<Artifact, Boolean> reqdocs;
	private Hashtable<Project, Boolean> projs;
	private Hashtable<Tool, Boolean> requirementscapturetools;
	private Hashtable<Artifact, Boolean> associatedcodedocs;
	private Hashtable<Artifact, Boolean> associateddesigndocs;
	private Hashtable<Artifact, Boolean> associatedsystemtestplans;

	public CreateRequirementsAction() {
		emps = new Hashtable<Employee, Boolean>();
		reqdocs = new Hashtable<Artifact, Boolean>();
		projs = new Hashtable<Project, Boolean>();
		requirementscapturetools = new Hashtable<Tool, Boolean>();
		associatedcodedocs = new Hashtable<Artifact, Boolean>();
		associateddesigndocs = new Hashtable<Artifact, Boolean>();
		associatedsystemtestplans = new Hashtable<Artifact, Boolean>();
	}

	public Object clone() {
		CreateRequirementsAction cl = (CreateRequirementsAction) (super.clone());
		Hashtable<Employee, Boolean> clonedemps = new Hashtable<Employee, Boolean>();
		clonedemps.putAll(emps);
		cl.emps = clonedemps;
		Hashtable<Artifact, Boolean> clonedreqdocs = new Hashtable<Artifact, Boolean>();
		clonedreqdocs.putAll(reqdocs);
		cl.reqdocs = clonedreqdocs;
		Hashtable<Project, Boolean> clonedprojs = new Hashtable<Project, Boolean>();
		clonedprojs.putAll(projs);
		cl.projs = clonedprojs;
		Hashtable<Tool, Boolean> clonedrequirementscapturetools = new Hashtable<Tool, Boolean>();
		clonedrequirementscapturetools.putAll(requirementscapturetools);
		cl.requirementscapturetools = clonedrequirementscapturetools;
		Hashtable<Artifact, Boolean> clonedassociatedcodedocs = new Hashtable<Artifact, Boolean>();
		clonedassociatedcodedocs.putAll(associatedcodedocs);
		cl.associatedcodedocs = clonedassociatedcodedocs;
		Hashtable<Artifact, Boolean> clonedassociateddesigndocs = new Hashtable<Artifact, Boolean>();
		clonedassociateddesigndocs.putAll(associateddesigndocs);
		cl.associateddesigndocs = clonedassociateddesigndocs;
		Hashtable<Artifact, Boolean> clonedassociatedsystemtestplans = new Hashtable<Artifact, Boolean>();
		clonedassociatedsystemtestplans.putAll(associatedsystemtestplans);
		cl.associatedsystemtestplans = clonedassociatedsystemtestplans;
		return cl;
	}

	public Vector<SSObject> getAllParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllEmps());
		all.addAll(getAllReqDocs());
		all.addAll(getAllProjs());
		all.addAll(getAllRequirementsCaptureTools());
		all.addAll(getAllAssociatedCodeDocs());
		all.addAll(getAllAssociatedDesignDocs());
		all.addAll(getAllAssociatedSystemTestPlans());
		return all;
	}

	public Vector<SSObject> getAllActiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllActiveEmps());
		all.addAll(getAllActiveReqDocs());
		all.addAll(getAllActiveProjs());
		all.addAll(getAllActiveRequirementsCaptureTools());
		all.addAll(getAllActiveAssociatedCodeDocs());
		all.addAll(getAllActiveAssociatedDesignDocs());
		all.addAll(getAllActiveAssociatedSystemTestPlans());
		return all;
	}

	public Vector<SSObject> getAllInactiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllInactiveEmps());
		all.addAll(getAllInactiveReqDocs());
		all.addAll(getAllInactiveProjs());
		all.addAll(getAllInactiveRequirementsCaptureTools());
		all.addAll(getAllInactiveAssociatedCodeDocs());
		all.addAll(getAllInactiveAssociatedDesignDocs());
		all.addAll(getAllInactiveAssociatedSystemTestPlans());
		return all;
	}

	public Vector<Employee> getAllEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Employee> getAllActiveEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			Employee key = e.nextElement();
			if ((emps.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Employee> getAllInactiveEmps() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = emps.keys();
		for (int i = 0; i < emps.size(); i++) {
			Employee key = e.nextElement();
			if ((emps.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addEmp(Employee a) {
		if ((emps.containsKey(a))
				|| (((a instanceof SoftwareEngineer) == false))) {
			return false;
		} else {
			emps.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeEmp(Employee a) {
		if (emps.containsKey(a)) {
			emps.remove(a);
			return true;
		}
		return false;
	}

	public boolean setEmpActive(Employee a) {
		if (emps.containsKey(a)) {
			emps.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setEmpInactive(Employee a) {
		if (emps.containsKey(a)) {
			emps.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Artifact> getAllReqDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = reqdocs.keys();
		for (int i = 0; i < reqdocs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Artifact> getAllActiveReqDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = reqdocs.keys();
		for (int i = 0; i < reqdocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((reqdocs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Artifact> getAllInactiveReqDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = reqdocs.keys();
		for (int i = 0; i < reqdocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((reqdocs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addReqDoc(Artifact a) {
		if ((reqdocs.containsKey(a))
				|| (((a instanceof RequirementsDocument) == false))
				|| (reqdocs.size() >= 1)) {
			return false;
		} else {
			reqdocs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeReqDoc(Artifact a) {
		if (reqdocs.containsKey(a)) {
			reqdocs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setReqDocActive(Artifact a) {
		if (reqdocs.containsKey(a)) {
			reqdocs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setReqDocInactive(Artifact a) {
		if (reqdocs.containsKey(a)) {
			reqdocs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Project> getAllProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Project> getAllActiveProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			Project key = e.nextElement();
			if ((projs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Project> getAllInactiveProjs() {
		Vector<Project> a = new Vector<Project>();
		Enumeration<Project> e = projs.keys();
		for (int i = 0; i < projs.size(); i++) {
			Project key = e.nextElement();
			if ((projs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addProj(Project a) {
		if ((projs.containsKey(a)) || (((a instanceof SEProject) == false))
				|| (projs.size() >= 1)) {
			return false;
		} else {
			projs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeProj(Project a) {
		if (projs.containsKey(a)) {
			projs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setProjActive(Project a) {
		if (projs.containsKey(a)) {
			projs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setProjInactive(Project a) {
		if (projs.containsKey(a)) {
			projs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Tool> getAllRequirementsCaptureTools() {
		Vector<Tool> a = new Vector<Tool>();
		Enumeration<Tool> e = requirementscapturetools.keys();
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Tool> getAllActiveRequirementsCaptureTools() {
		Vector<Tool> a = new Vector<Tool>();
		Enumeration<Tool> e = requirementscapturetools.keys();
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			Tool key = e.nextElement();
			if ((requirementscapturetools.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Tool> getAllInactiveRequirementsCaptureTools() {
		Vector<Tool> a = new Vector<Tool>();
		Enumeration<Tool> e = requirementscapturetools.keys();
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			Tool key = e.nextElement();
			if ((requirementscapturetools.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addRequirementsCaptureTool(Tool a) {
		if ((requirementscapturetools.containsKey(a))
				|| (((a instanceof RequirementsCaptureTool) == false))) {
			return false;
		} else {
			requirementscapturetools.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeRequirementsCaptureTool(Tool a) {
		if (requirementscapturetools.containsKey(a)) {
			requirementscapturetools.remove(a);
			return true;
		}
		return false;
	}

	public boolean setRequirementsCaptureToolActive(Tool a) {
		if (requirementscapturetools.containsKey(a)) {
			requirementscapturetools.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setRequirementsCaptureToolInactive(Tool a) {
		if (requirementscapturetools.containsKey(a)) {
			requirementscapturetools.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Artifact> getAllAssociatedCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedcodedocs.keys();
		for (int i = 0; i < associatedcodedocs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Artifact> getAllActiveAssociatedCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedcodedocs.keys();
		for (int i = 0; i < associatedcodedocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((associatedcodedocs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Artifact> getAllInactiveAssociatedCodeDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedcodedocs.keys();
		for (int i = 0; i < associatedcodedocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((associatedcodedocs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addAssociatedCodeDoc(Artifact a) {
		if ((associatedcodedocs.containsKey(a))
				|| (((a instanceof Code) == false))
				|| (associatedcodedocs.size() >= 1)) {
			return false;
		} else {
			associatedcodedocs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeAssociatedCodeDoc(Artifact a) {
		if (associatedcodedocs.containsKey(a)) {
			associatedcodedocs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setAssociatedCodeDocActive(Artifact a) {
		if (associatedcodedocs.containsKey(a)) {
			associatedcodedocs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setAssociatedCodeDocInactive(Artifact a) {
		if (associatedcodedocs.containsKey(a)) {
			associatedcodedocs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Artifact> getAllAssociatedDesignDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associateddesigndocs.keys();
		for (int i = 0; i < associateddesigndocs.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Artifact> getAllActiveAssociatedDesignDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associateddesigndocs.keys();
		for (int i = 0; i < associateddesigndocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((associateddesigndocs.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Artifact> getAllInactiveAssociatedDesignDocs() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associateddesigndocs.keys();
		for (int i = 0; i < associateddesigndocs.size(); i++) {
			Artifact key = e.nextElement();
			if ((associateddesigndocs.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addAssociatedDesignDoc(Artifact a) {
		if ((associateddesigndocs.containsKey(a))
				|| (((a instanceof DesignDocument) == false))
				|| (associateddesigndocs.size() >= 1)) {
			return false;
		} else {
			associateddesigndocs.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeAssociatedDesignDoc(Artifact a) {
		if (associateddesigndocs.containsKey(a)) {
			associateddesigndocs.remove(a);
			return true;
		}
		return false;
	}

	public boolean setAssociatedDesignDocActive(Artifact a) {
		if (associateddesigndocs.containsKey(a)) {
			associateddesigndocs.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setAssociatedDesignDocInactive(Artifact a) {
		if (associateddesigndocs.containsKey(a)) {
			associateddesigndocs.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	public Vector<Artifact> getAllAssociatedSystemTestPlans() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedsystemtestplans.keys();
		for (int i = 0; i < associatedsystemtestplans.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Artifact> getAllActiveAssociatedSystemTestPlans() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedsystemtestplans.keys();
		for (int i = 0; i < associatedsystemtestplans.size(); i++) {
			Artifact key = e.nextElement();
			if ((associatedsystemtestplans.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Artifact> getAllInactiveAssociatedSystemTestPlans() {
		Vector<Artifact> a = new Vector<Artifact>();
		Enumeration<Artifact> e = associatedsystemtestplans.keys();
		for (int i = 0; i < associatedsystemtestplans.size(); i++) {
			Artifact key = e.nextElement();
			if ((associatedsystemtestplans.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addAssociatedSystemTestPlan(Artifact a) {
		if ((associatedsystemtestplans.containsKey(a))
				|| (((a instanceof SystemTestPlan) == false))
				|| (associatedsystemtestplans.size() >= 1)) {
			return false;
		} else {
			associatedsystemtestplans.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeAssociatedSystemTestPlan(Artifact a) {
		if (associatedsystemtestplans.containsKey(a)) {
			associatedsystemtestplans.remove(a);
			return true;
		}
		return false;
	}

	public boolean setAssociatedSystemTestPlanActive(Artifact a) {
		if (associatedsystemtestplans.containsKey(a)) {
			associatedsystemtestplans.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setAssociatedSystemTestPlanInactive(Artifact a) {
		if (associatedsystemtestplans.containsKey(a)) {
			associatedsystemtestplans.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	/*
	 * Replaces all the participants in this action with their equivalent
	 * objects in the current state. Calling this function solves the problem
	 * that happens when you clone actions -- their hashtables point to
	 * participant objects that were part of the previous, non-cloned state.
	 * Hence, this function should be called after this object is cloned.
	 */
	public void refetchParticipants(ArtifactStateRepository artifactRep,
			CustomerStateRepository customerRep,
			EmployeeStateRepository employeeRep,
			ProjectStateRepository projectRep, ToolStateRepository toolRep) {
		// emp participants:
		Hashtable<Employee, Boolean> newEmps = new Hashtable<Employee, Boolean>();
		Iterator<Map.Entry<Employee, Boolean>> empsIterator = emps.entrySet()
				.iterator();
		while (empsIterator.hasNext()) {
			Map.Entry<Employee, Boolean> entry = empsIterator.next();
			Employee oldEmp = entry.getKey();
			if (oldEmp instanceof SoftwareEngineer) {
				Employee newEmp = employeeRep
						.getSoftwareEngineerStateRepository().get(
								((SoftwareEngineer) oldEmp).getName());
				Boolean activeStatus = emps.get(oldEmp);
				newEmps.put(newEmp, activeStatus);
			}
		}
		emps.clear();
		emps.putAll(newEmps);

		// reqdoc participants:
		Hashtable<Artifact, Boolean> newReqDocs = new Hashtable<Artifact, Boolean>();
		Iterator<Map.Entry<Artifact, Boolean>> reqdocsIterator = reqdocs
				.entrySet().iterator();
		while (reqdocsIterator.hasNext()) {
			Map.Entry<Artifact, Boolean> entry = reqdocsIterator.next();
			Artifact oldReqDoc = entry.getKey();
			if (oldReqDoc instanceof RequirementsDocument) {
				Artifact newReqDoc = artifactRep
						.getRequirementsDocumentStateRepository().get(
								((RequirementsDocument) oldReqDoc).getName());
				Boolean activeStatus = reqdocs.get(oldReqDoc);
				newReqDocs.put(newReqDoc, activeStatus);
			}
		}
		reqdocs.clear();
		reqdocs.putAll(newReqDocs);

		// proj participants:
		Hashtable<Project, Boolean> newProjs = new Hashtable<Project, Boolean>();
		Iterator<Map.Entry<Project, Boolean>> projsIterator = projs.entrySet()
				.iterator();
		while (projsIterator.hasNext()) {
			Map.Entry<Project, Boolean> entry = projsIterator.next();
			Project oldProj = entry.getKey();
			if (oldProj instanceof SEProject) {
				Project newProj = projectRep.getSEProjectStateRepository().get(
						((SEProject) oldProj).getDescription());
				Boolean activeStatus = projs.get(oldProj);
				newProjs.put(newProj, activeStatus);
			}
		}
		projs.clear();
		projs.putAll(newProjs);

		// requirementscapturetool participants:
		Hashtable<Tool, Boolean> newRequirementsCaptureTools = new Hashtable<Tool, Boolean>();
		Iterator<Map.Entry<Tool, Boolean>> requirementscapturetoolsIterator = requirementscapturetools
				.entrySet().iterator();
		while (requirementscapturetoolsIterator.hasNext()) {
			Map.Entry<Tool, Boolean> entry = requirementscapturetoolsIterator
					.next();
			Tool oldRequirementsCaptureTool = entry.getKey();
			if (oldRequirementsCaptureTool instanceof RequirementsCaptureTool) {
				Tool newRequirementsCaptureTool = toolRep
						.getRequirementsCaptureToolStateRepository()
						.get(((RequirementsCaptureTool) oldRequirementsCaptureTool)
								.getName());
				Boolean activeStatus = requirementscapturetools
						.get(oldRequirementsCaptureTool);
				newRequirementsCaptureTools.put(newRequirementsCaptureTool,
						activeStatus);
			}
		}
		requirementscapturetools.clear();
		requirementscapturetools.putAll(newRequirementsCaptureTools);

		// associatedcodedoc participants:
		Hashtable<Artifact, Boolean> newAssociatedCodeDocs = new Hashtable<Artifact, Boolean>();
		Iterator<Map.Entry<Artifact, Boolean>> associatedcodedocsIterator = associatedcodedocs
				.entrySet().iterator();
		while (associatedcodedocsIterator.hasNext()) {
			Map.Entry<Artifact, Boolean> entry = associatedcodedocsIterator
					.next();
			Artifact oldAssociatedCodeDoc = entry.getKey();
			if (oldAssociatedCodeDoc instanceof Code) {
				Artifact newAssociatedCodeDoc = artifactRep
						.getCodeStateRepository().get(
								((Code) oldAssociatedCodeDoc).getName());
				Boolean activeStatus = associatedcodedocs
						.get(oldAssociatedCodeDoc);
				newAssociatedCodeDocs.put(newAssociatedCodeDoc, activeStatus);
			}
		}
		associatedcodedocs.clear();
		associatedcodedocs.putAll(newAssociatedCodeDocs);

		// associateddesigndoc participants:
		Hashtable<Artifact, Boolean> newAssociatedDesignDocs = new Hashtable<Artifact, Boolean>();
		Iterator<Map.Entry<Artifact, Boolean>> associateddesigndocsIterator = associateddesigndocs
				.entrySet().iterator();
		while (associateddesigndocsIterator.hasNext()) {
			Map.Entry<Artifact, Boolean> entry = associateddesigndocsIterator
					.next();
			Artifact oldAssociatedDesignDoc = entry.getKey();
			if (oldAssociatedDesignDoc instanceof DesignDocument) {
				Artifact newAssociatedDesignDoc = artifactRep
						.getDesignDocumentStateRepository().get(
								((DesignDocument) oldAssociatedDesignDoc)
										.getName());
				Boolean activeStatus = associateddesigndocs
						.get(oldAssociatedDesignDoc);
				newAssociatedDesignDocs.put(newAssociatedDesignDoc,
						activeStatus);
			}
		}
		associateddesigndocs.clear();
		associateddesigndocs.putAll(newAssociatedDesignDocs);

		// associatedsystemtestplan participants:
		Hashtable<Artifact, Boolean> newAssociatedSystemTestPlans = new Hashtable<Artifact, Boolean>();
		Iterator<Map.Entry<Artifact, Boolean>> associatedsystemtestplansIterator = associatedsystemtestplans
				.entrySet().iterator();
		while (associatedsystemtestplansIterator.hasNext()) {
			Map.Entry<Artifact, Boolean> entry = associatedsystemtestplansIterator
					.next();
			Artifact oldAssociatedSystemTestPlan = entry.getKey();
			if (oldAssociatedSystemTestPlan instanceof SystemTestPlan) {
				Artifact newAssociatedSystemTestPlan = artifactRep
						.getSystemTestPlanStateRepository().get(
								((SystemTestPlan) oldAssociatedSystemTestPlan)
										.getName());
				Boolean activeStatus = associatedsystemtestplans
						.get(oldAssociatedSystemTestPlan);
				newAssociatedSystemTestPlans.put(newAssociatedSystemTestPlan,
						activeStatus);
			}
		}
		associatedsystemtestplans.clear();
		associatedsystemtestplans.putAll(newAssociatedSystemTestPlans);

	}
}