/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;

import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;

public class FireAction extends Action implements Cloneable {
	private Hashtable<Employee, Boolean> firedpersons;
	private int timeToLive;

	public FireAction() {
		firedpersons = new Hashtable<Employee, Boolean>();
		timeToLive = 1;
	}

	public Object clone() {
		FireAction cl = (FireAction) (super.clone());
		Hashtable<Employee, Boolean> clonedfiredpersons = new Hashtable<Employee, Boolean>();
		clonedfiredpersons.putAll(firedpersons);
		cl.firedpersons = clonedfiredpersons;
		return cl;
	}

	public int getTimeToLive() {
		return timeToLive;
	}

	public void decrementTimeToLive() {
		timeToLive--;
		if (timeToLive < 0) {
			timeToLive = 0;
		}
	}

	public Vector<SSObject> getAllParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllFiredPersons());
		return all;
	}

	public Vector<SSObject> getAllActiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllActiveFiredPersons());
		return all;
	}

	public Vector<SSObject> getAllInactiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllInactiveFiredPersons());
		return all;
	}

	public Vector<Employee> getAllFiredPersons() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = firedpersons.keys();
		for (int i = 0; i < firedpersons.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Employee> getAllActiveFiredPersons() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = firedpersons.keys();
		for (int i = 0; i < firedpersons.size(); i++) {
			Employee key = e.nextElement();
			if ((firedpersons.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Employee> getAllInactiveFiredPersons() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = firedpersons.keys();
		for (int i = 0; i < firedpersons.size(); i++) {
			Employee key = e.nextElement();
			if ((firedpersons.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addFiredPerson(Employee a) {
		if ((firedpersons.containsKey(a))
				|| (((a instanceof SoftwareEngineer) == false))
				|| (firedpersons.size() >= 1)) {
			return false;
		} else {
			firedpersons.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeFiredPerson(Employee a) {
		if (firedpersons.containsKey(a)) {
			firedpersons.remove(a);
			return true;
		}
		return false;
	}

	public boolean setFiredPersonActive(Employee a) {
		if (firedpersons.containsKey(a)) {
			firedpersons.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setFiredPersonInactive(Employee a) {
		if (firedpersons.containsKey(a)) {
			firedpersons.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	/*
	 * Replaces all the participants in this action with their equivalent
	 * objects in the current state. Calling this function solves the problem
	 * that happens when you clone actions -- their hashtables point to
	 * participant objects that were part of the previous, non-cloned state.
	 * Hence, this function should be called after this object is cloned.
	 */
	public void refetchParticipants(ArtifactStateRepository artifactRep,
			CustomerStateRepository customerRep,
			EmployeeStateRepository employeeRep,
			ProjectStateRepository projectRep, ToolStateRepository toolRep) {
		// firedperson participants:
		Hashtable<Employee, Boolean> newFiredPersons = new Hashtable<Employee, Boolean>();
		Iterator<Map.Entry<Employee, Boolean>> firedpersonsIterator = firedpersons
				.entrySet().iterator();
		while (firedpersonsIterator.hasNext()) {
			Map.Entry<Employee, Boolean> entry = firedpersonsIterator.next();
			Employee oldFiredPerson = entry.getKey();
			if (oldFiredPerson instanceof SoftwareEngineer) {
				Employee newFiredPerson = employeeRep
						.getSoftwareEngineerStateRepository().get(
								((SoftwareEngineer) oldFiredPerson).getName());
				Boolean activeStatus = firedpersons.get(oldFiredPerson);
				newFiredPersons.put(newFiredPerson, activeStatus);
			}
		}
		firedpersons.clear();
		firedpersons.putAll(newFiredPersons);

	}
}