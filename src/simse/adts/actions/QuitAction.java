/* File generated by: simse.codegenerator.stategenerator.ADTGenerator */
package simse.adts.actions;

import simse.adts.objects.*;
import simse.state.ArtifactStateRepository;
import simse.state.CustomerStateRepository;
import simse.state.EmployeeStateRepository;
import simse.state.ProjectStateRepository;
import simse.state.ToolStateRepository;
import java.util.*;

public class QuitAction extends Action implements Cloneable {
	private Hashtable<Employee, Boolean> quitters;
	private int timeToLive;

	public QuitAction() {
		quitters = new Hashtable<Employee, Boolean>();
		timeToLive = 1;
	}

	public Object clone() {
		QuitAction cl = (QuitAction) (super.clone());
		Hashtable<Employee, Boolean> clonedquitters = new Hashtable<Employee, Boolean>();
		clonedquitters.putAll(quitters);
		cl.quitters = clonedquitters;
		return cl;
	}

	public int getTimeToLive() {
		return timeToLive;
	}

	public void decrementTimeToLive() {
		timeToLive--;
		if (timeToLive < 0) {
			timeToLive = 0;
		}
	}

	public Vector<SSObject> getAllParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllQuitters());
		return all;
	}

	public Vector<SSObject> getAllActiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllActiveQuitters());
		return all;
	}

	public Vector<SSObject> getAllInactiveParticipants() {
		Vector<SSObject> all = new Vector<SSObject>();
		all.addAll(getAllInactiveQuitters());
		return all;
	}

	public Vector<Employee> getAllQuitters() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = quitters.keys();
		for (int i = 0; i < quitters.size(); i++) {
			a.add(e.nextElement());
		}
		return a;
	}

	public Vector<Employee> getAllActiveQuitters() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = quitters.keys();
		for (int i = 0; i < quitters.size(); i++) {
			Employee key = e.nextElement();
			if ((quitters.get(key)).booleanValue() == true) {
				a.add(key);
			}
		}
		return a;
	}

	public Vector<Employee> getAllInactiveQuitters() {
		Vector<Employee> a = new Vector<Employee>();
		Enumeration<Employee> e = quitters.keys();
		for (int i = 0; i < quitters.size(); i++) {
			Employee key = e.nextElement();
			if ((quitters.get(key)).booleanValue() == false) {
				a.add(key);
			}
		}
		return a;
	}

	public boolean addQuitter(Employee a) {
		if ((quitters.containsKey(a))
				|| (((a instanceof SoftwareEngineer) == false))
				|| (quitters.size() >= 1)) {
			return false;
		} else {
			quitters.put(a, new Boolean(true));
			return true;
		}
	}

	public boolean removeQuitter(Employee a) {
		if (quitters.containsKey(a)) {
			quitters.remove(a);
			return true;
		}
		return false;
	}

	public boolean setQuitterActive(Employee a) {
		if (quitters.containsKey(a)) {
			quitters.put(a, new Boolean(true));
			return true;
		}
		return false;
	}

	public boolean setQuitterInactive(Employee a) {
		if (quitters.containsKey(a)) {
			quitters.put(a, new Boolean(false));
			return true;
		}
		return false;
	}

	/*
	 * Replaces all the participants in this action with their equivalent
	 * objects in the current state. Calling this function solves the problem
	 * that happens when you clone actions -- their hashtables point to
	 * participant objects that were part of the previous, non-cloned state.
	 * Hence, this function should be called after this object is cloned.
	 */
	public void refetchParticipants(ArtifactStateRepository artifactRep,
			CustomerStateRepository customerRep,
			EmployeeStateRepository employeeRep,
			ProjectStateRepository projectRep, ToolStateRepository toolRep) {
		// quitter participants:
		Hashtable<Employee, Boolean> newQuitters = new Hashtable<Employee, Boolean>();
		Iterator<Map.Entry<Employee, Boolean>> quittersIterator = quitters
				.entrySet().iterator();
		while (quittersIterator.hasNext()) {
			Map.Entry<Employee, Boolean> entry = quittersIterator.next();
			Employee oldQuitter = entry.getKey();
			if (oldQuitter instanceof SoftwareEngineer) {
				Employee newQuitter = employeeRep
						.getSoftwareEngineerStateRepository().get(
								((SoftwareEngineer) oldQuitter).getName());
				Boolean activeStatus = quitters.get(oldQuitter);
				newQuitters.put(newQuitter, activeStatus);
			}
		}
		quitters.clear();
		quitters.putAll(newQuitters);

	}
}