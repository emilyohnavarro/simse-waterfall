/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;

import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;

public class ActionStateRepository implements Cloneable {
	CreateRequirementsActionStateRepository c0;
	ReviewRequirementsActionStateRepository r1;
	CorrectRequirementsActionStateRepository c2;
	CreateDesignActionStateRepository c3;
	ReviewDesignActionStateRepository r4;
	CorrectDesignActionStateRepository c5;
	CreateCodeActionStateRepository c6;
	InspectCodeActionStateRepository i7;
	CorrectCodeActionStateRepository c8;
	IntegrateCodeActionStateRepository i9;
	SystemTestActionStateRepository s10;
	CreateSystemTestPlanActionStateRepository c11;
	ReviewSystemTestPlanActionStateRepository r12;
	CorrectSystemTestPlanActionStateRepository c13;
	DeliverProductActionStateRepository d14;
	BreakActionStateRepository b15;
	GetSickActionStateRepository g16;
	QuitActionStateRepository q17;
	IntroduceNewRequirementsActionStateRepository i18;
	UpdateProjectAttributesActionStateRepository u19;
	ChangePayRateActionStateRepository c20;
	GiveBonusActionStateRepository g21;
	FireActionStateRepository f22;
	PurchaseToolActionStateRepository p23;
	SuggestedRequirementsPhaseDurationActionStateRepository s24;
	SuggestedDesignPhaseDurationActionStateRepository s25;
	SuggestedImplIntegrationPhaseDurationActionStateRepository s26;
	SuggestedTestingPhaseDurationActionStateRepository s27;

	public ActionStateRepository() {
		c0 = new CreateRequirementsActionStateRepository();
		r1 = new ReviewRequirementsActionStateRepository();
		c2 = new CorrectRequirementsActionStateRepository();
		c3 = new CreateDesignActionStateRepository();
		r4 = new ReviewDesignActionStateRepository();
		c5 = new CorrectDesignActionStateRepository();
		c6 = new CreateCodeActionStateRepository();
		i7 = new InspectCodeActionStateRepository();
		c8 = new CorrectCodeActionStateRepository();
		i9 = new IntegrateCodeActionStateRepository();
		s10 = new SystemTestActionStateRepository();
		c11 = new CreateSystemTestPlanActionStateRepository();
		r12 = new ReviewSystemTestPlanActionStateRepository();
		c13 = new CorrectSystemTestPlanActionStateRepository();
		d14 = new DeliverProductActionStateRepository();
		b15 = new BreakActionStateRepository();
		g16 = new GetSickActionStateRepository();
		q17 = new QuitActionStateRepository();
		i18 = new IntroduceNewRequirementsActionStateRepository();
		u19 = new UpdateProjectAttributesActionStateRepository();
		c20 = new ChangePayRateActionStateRepository();
		g21 = new GiveBonusActionStateRepository();
		f22 = new FireActionStateRepository();
		p23 = new PurchaseToolActionStateRepository();
		s24 = new SuggestedRequirementsPhaseDurationActionStateRepository();
		s25 = new SuggestedDesignPhaseDurationActionStateRepository();
		s26 = new SuggestedImplIntegrationPhaseDurationActionStateRepository();
		s27 = new SuggestedTestingPhaseDurationActionStateRepository();
	}

	public Object clone() {
		try {
			ActionStateRepository cl = (ActionStateRepository) (super.clone());
			cl.c0 = (CreateRequirementsActionStateRepository) (c0.clone());
			cl.r1 = (ReviewRequirementsActionStateRepository) (r1.clone());
			cl.c2 = (CorrectRequirementsActionStateRepository) (c2.clone());
			cl.c3 = (CreateDesignActionStateRepository) (c3.clone());
			cl.r4 = (ReviewDesignActionStateRepository) (r4.clone());
			cl.c5 = (CorrectDesignActionStateRepository) (c5.clone());
			cl.c6 = (CreateCodeActionStateRepository) (c6.clone());
			cl.i7 = (InspectCodeActionStateRepository) (i7.clone());
			cl.c8 = (CorrectCodeActionStateRepository) (c8.clone());
			cl.i9 = (IntegrateCodeActionStateRepository) (i9.clone());
			cl.s10 = (SystemTestActionStateRepository) (s10.clone());
			cl.c11 = (CreateSystemTestPlanActionStateRepository) (c11.clone());
			cl.r12 = (ReviewSystemTestPlanActionStateRepository) (r12.clone());
			cl.c13 = (CorrectSystemTestPlanActionStateRepository) (c13.clone());
			cl.d14 = (DeliverProductActionStateRepository) (d14.clone());
			cl.b15 = (BreakActionStateRepository) (b15.clone());
			cl.g16 = (GetSickActionStateRepository) (g16.clone());
			cl.q17 = (QuitActionStateRepository) (q17.clone());
			cl.i18 = (IntroduceNewRequirementsActionStateRepository) (i18
					.clone());
			cl.u19 = (UpdateProjectAttributesActionStateRepository) (u19
					.clone());
			cl.c20 = (ChangePayRateActionStateRepository) (c20.clone());
			cl.g21 = (GiveBonusActionStateRepository) (g21.clone());
			cl.f22 = (FireActionStateRepository) (f22.clone());
			cl.p23 = (PurchaseToolActionStateRepository) (p23.clone());
			cl.s24 = (SuggestedRequirementsPhaseDurationActionStateRepository) (s24
					.clone());
			cl.s25 = (SuggestedDesignPhaseDurationActionStateRepository) (s25
					.clone());
			cl.s26 = (SuggestedImplIntegrationPhaseDurationActionStateRepository) (s26
					.clone());
			cl.s27 = (SuggestedTestingPhaseDurationActionStateRepository) (s27
					.clone());
			return cl;
		} catch (CloneNotSupportedException c) {
			System.out.println(c.getMessage());
		}
		return null;
	}

	public Vector<simse.adts.actions.Action> getAllActions() {
		Vector<simse.adts.actions.Action> all = new Vector<simse.adts.actions.Action>();
		all.addAll(c0.getAllActions());
		all.addAll(r1.getAllActions());
		all.addAll(c2.getAllActions());
		all.addAll(c3.getAllActions());
		all.addAll(r4.getAllActions());
		all.addAll(c5.getAllActions());
		all.addAll(c6.getAllActions());
		all.addAll(i7.getAllActions());
		all.addAll(c8.getAllActions());
		all.addAll(i9.getAllActions());
		all.addAll(s10.getAllActions());
		all.addAll(c11.getAllActions());
		all.addAll(r12.getAllActions());
		all.addAll(c13.getAllActions());
		all.addAll(d14.getAllActions());
		all.addAll(b15.getAllActions());
		all.addAll(g16.getAllActions());
		all.addAll(q17.getAllActions());
		all.addAll(i18.getAllActions());
		all.addAll(u19.getAllActions());
		all.addAll(c20.getAllActions());
		all.addAll(g21.getAllActions());
		all.addAll(f22.getAllActions());
		all.addAll(p23.getAllActions());
		all.addAll(s24.getAllActions());
		all.addAll(s25.getAllActions());
		all.addAll(s26.getAllActions());
		all.addAll(s27.getAllActions());
		return all;
	}

	public Vector<simse.adts.actions.Action> getAllActions(SSObject a) {
		Vector<simse.adts.actions.Action> all = new Vector<simse.adts.actions.Action>();
		Vector<simse.adts.actions.Action> actions = getAllActions();
		for (int i = 0; i < actions.size(); i++) {
			Action b = actions.elementAt(i);
			Vector<SSObject> parts = b.getAllParticipants();
			for (int j = 0; j < parts.size(); j++) {
				if (parts.elementAt(j).equals(a)) {
					all.add(b);
					break;
				}
			}
		}
		return all;
	}

	public Vector<simse.adts.actions.Action> getAllActiveActions(SSObject a) {
		Vector<simse.adts.actions.Action> all = new Vector<simse.adts.actions.Action>();
		Vector<simse.adts.actions.Action> actions = getAllActions();
		for (int i = 0; i < actions.size(); i++) {
			Action b = actions.elementAt(i);
			Vector<SSObject> parts = b.getAllActiveParticipants();
			for (int j = 0; j < parts.size(); j++) {
				if (parts.elementAt(j).equals(a)) {
					all.add(b);
					break;
				}
			}
		}
		return all;
	}

	public Vector<simse.adts.actions.Action> getAllInactiveActions(SSObject a) {
		Vector<simse.adts.actions.Action> all = new Vector<simse.adts.actions.Action>();
		Vector<simse.adts.actions.Action> actions = getAllActions();
		for (int i = 0; i < actions.size(); i++) {
			Action b = actions.elementAt(i);
			Vector<SSObject> parts = b.getAllInactiveParticipants();
			for (int j = 0; j < parts.size(); j++) {
				if (parts.elementAt(j).equals(a)) {
					all.add(b);
					break;
				}
			}
		}
		return all;
	}

	public void removeFromAllActions(SSObject a) {
		Vector<CreateRequirementsAction> createrequirementsactions = c0
				.getAllActions();
		for (int i = 0; i < createrequirementsactions.size(); i++) {
			CreateRequirementsAction b = createrequirementsactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeReqDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Tool) {
				b.removeRequirementsCaptureTool((Tool) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedCodeDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedSystemTestPlan((Artifact) a);
			}
		}
		Vector<ReviewRequirementsAction> reviewrequirementsactions = r1
				.getAllActions();
		for (int i = 0; i < reviewrequirementsactions.size(); i++) {
			ReviewRequirementsAction b = reviewrequirementsactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeRequirementsDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
		}
		Vector<CorrectRequirementsAction> correctrequirementsactions = c2
				.getAllActions();
		for (int i = 0; i < correctrequirementsactions.size(); i++) {
			CorrectRequirementsAction b = correctrequirementsactions
					.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeRequirementsDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Tool) {
				b.removeRequirementsCaptureTool((Tool) a);
			}
		}
		Vector<CreateDesignAction> createdesignactions = c3.getAllActions();
		for (int i = 0; i < createdesignactions.size(); i++) {
			CreateDesignAction b = createdesignactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeDesignDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeDesignEnvironment((Tool) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedCodeDoc((Artifact) a);
			}
		}
		Vector<ReviewDesignAction> reviewdesignactions = r4.getAllActions();
		for (int i = 0; i < reviewdesignactions.size(); i++) {
			ReviewDesignAction b = reviewdesignactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeDesignDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
		}
		Vector<CorrectDesignAction> correctdesignactions = c5.getAllActions();
		for (int i = 0; i < correctdesignactions.size(); i++) {
			CorrectDesignAction b = correctdesignactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeDesignDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeDesignEnvironment((Tool) a);
			}
		}
		Vector<CreateCodeAction> createcodeactions = c6.getAllActions();
		for (int i = 0; i < createcodeactions.size(); i++) {
			CreateCodeAction b = createcodeactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDocument((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeDevelopmentEnvironment((Tool) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedSystemTestPlan((Artifact) a);
			}
		}
		Vector<InspectCodeAction> inspectcodeactions = i7.getAllActions();
		for (int i = 0; i < inspectcodeactions.size(); i++) {
			InspectCodeAction b = inspectcodeactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDoc((Artifact) a);
			}
		}
		Vector<CorrectCodeAction> correctcodeactions = c8.getAllActions();
		for (int i = 0; i < correctcodeactions.size(); i++) {
			CorrectCodeAction b = correctcodeactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDoc((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeDevelopmentEnvironment((Tool) a);
			}
		}
		Vector<IntegrateCodeAction> integratecodeactions = i9.getAllActions();
		for (int i = 0; i < integratecodeactions.size(); i++) {
			IntegrateCodeAction b = integratecodeactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDoc((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeDevelopmentEnvironment((Tool) a);
			}
		}
		Vector<SystemTestAction> systemtestactions = s10.getAllActions();
		for (int i = 0; i < systemtestactions.size(); i++) {
			SystemTestAction b = systemtestactions.elementAt(i);
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedSystemTestPlan((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeTestingTool((Tool) a);
			}
		}
		Vector<CreateSystemTestPlanAction> createsystemtestplanactions = c11
				.getAllActions();
		for (int i = 0; i < createsystemtestplanactions.size(); i++) {
			CreateSystemTestPlanAction b = createsystemtestplanactions
					.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedCodeDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeSystemTestPlanDoc((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Tool) {
				b.removeTestingTool((Tool) a);
			}
		}
		Vector<ReviewSystemTestPlanAction> reviewsystemtestplanactions = r12
				.getAllActions();
		for (int i = 0; i < reviewsystemtestplanactions.size(); i++) {
			ReviewSystemTestPlanAction b = reviewsystemtestplanactions
					.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeTestPlan((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
		}
		Vector<CorrectSystemTestPlanAction> correctsystemtestplanactions = c13
				.getAllActions();
		for (int i = 0; i < correctsystemtestplanactions.size(); i++) {
			CorrectSystemTestPlanAction b = correctsystemtestplanactions
					.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeTestPlan((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDoc((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Tool) {
				b.removeTestingTool((Tool) a);
			}
		}
		Vector<DeliverProductAction> deliverproductactions = d14
				.getAllActions();
		for (int i = 0; i < deliverproductactions.size(); i++) {
			DeliverProductAction b = deliverproductactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Artifact) {
				b.removeCodeDoc((Artifact) a);
			}
			if (a instanceof Customer) {
				b.removeCust((Customer) a);
			}
		}
		Vector<BreakAction> breakactions = b15.getAllActions();
		for (int i = 0; i < breakactions.size(); i++) {
			BreakAction b = breakactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeBreaker((Employee) a);
			}
		}
		Vector<GetSickAction> getsickactions = g16.getAllActions();
		for (int i = 0; i < getsickactions.size(); i++) {
			GetSickAction b = getsickactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeSickPerson((Employee) a);
			}
		}
		Vector<QuitAction> quitactions = q17.getAllActions();
		for (int i = 0; i < quitactions.size(); i++) {
			QuitAction b = quitactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeQuitter((Employee) a);
			}
		}
		Vector<IntroduceNewRequirementsAction> introducenewrequirementsactions = i18
				.getAllActions();
		for (int i = 0; i < introducenewrequirementsactions.size(); i++) {
			IntroduceNewRequirementsAction b = introducenewrequirementsactions
					.elementAt(i);
			if (a instanceof Customer) {
				b.removeCust((Customer) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedRequirementsDocument((Artifact) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmpWOverheadText((Employee) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedCode((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedDesignDocument((Artifact) a);
			}
			if (a instanceof Artifact) {
				b.removeAssociatedSystemTestPlan((Artifact) a);
			}
		}
		Vector<UpdateProjectAttributesAction> updateprojectattributesactions = u19
				.getAllActions();
		for (int i = 0; i < updateprojectattributesactions.size(); i++) {
			UpdateProjectAttributesAction b = updateprojectattributesactions
					.elementAt(i);
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
		Vector<ChangePayRateAction> changepayrateactions = c20.getAllActions();
		for (int i = 0; i < changepayrateactions.size(); i++) {
			ChangePayRateAction b = changepayrateactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
		Vector<GiveBonusAction> givebonusactions = g21.getAllActions();
		for (int i = 0; i < givebonusactions.size(); i++) {
			GiveBonusAction b = givebonusactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
			if (a instanceof Project) {
				b.removeProjectWithBudget((Project) a);
			}
		}
		Vector<FireAction> fireactions = f22.getAllActions();
		for (int i = 0; i < fireactions.size(); i++) {
			FireAction b = fireactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeFiredPerson((Employee) a);
			}
		}
		Vector<PurchaseToolAction> purchasetoolactions = p23.getAllActions();
		for (int i = 0; i < purchasetoolactions.size(); i++) {
			PurchaseToolAction b = purchasetoolactions.elementAt(i);
			if (a instanceof Employee) {
				b.removeEmpWhoseMenuClickedOn((Employee) a);
			}
			if (a instanceof Tool) {
				b.removeSETool((Tool) a);
			}
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
		}
		Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationactions = s24
				.getAllActions();
		for (int i = 0; i < suggestedrequirementsphasedurationactions.size(); i++) {
			SuggestedRequirementsPhaseDurationAction b = suggestedrequirementsphasedurationactions
					.elementAt(i);
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
		Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationactions = s25
				.getAllActions();
		for (int i = 0; i < suggesteddesignphasedurationactions.size(); i++) {
			SuggestedDesignPhaseDurationAction b = suggesteddesignphasedurationactions
					.elementAt(i);
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
		Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationactions = s26
				.getAllActions();
		for (int i = 0; i < suggestedimplintegrationphasedurationactions.size(); i++) {
			SuggestedImplIntegrationPhaseDurationAction b = suggestedimplintegrationphasedurationactions
					.elementAt(i);
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
		Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationactions = s27
				.getAllActions();
		for (int i = 0; i < suggestedtestingphasedurationactions.size(); i++) {
			SuggestedTestingPhaseDurationAction b = suggestedtestingphasedurationactions
					.elementAt(i);
			if (a instanceof Project) {
				b.removeProj((Project) a);
			}
			if (a instanceof Employee) {
				b.removeEmp((Employee) a);
			}
		}
	}

	public CreateRequirementsActionStateRepository getCreateRequirementsActionStateRepository() {
		return c0;
	}

	public ReviewRequirementsActionStateRepository getReviewRequirementsActionStateRepository() {
		return r1;
	}

	public CorrectRequirementsActionStateRepository getCorrectRequirementsActionStateRepository() {
		return c2;
	}

	public CreateDesignActionStateRepository getCreateDesignActionStateRepository() {
		return c3;
	}

	public ReviewDesignActionStateRepository getReviewDesignActionStateRepository() {
		return r4;
	}

	public CorrectDesignActionStateRepository getCorrectDesignActionStateRepository() {
		return c5;
	}

	public CreateCodeActionStateRepository getCreateCodeActionStateRepository() {
		return c6;
	}

	public InspectCodeActionStateRepository getInspectCodeActionStateRepository() {
		return i7;
	}

	public CorrectCodeActionStateRepository getCorrectCodeActionStateRepository() {
		return c8;
	}

	public IntegrateCodeActionStateRepository getIntegrateCodeActionStateRepository() {
		return i9;
	}

	public SystemTestActionStateRepository getSystemTestActionStateRepository() {
		return s10;
	}

	public CreateSystemTestPlanActionStateRepository getCreateSystemTestPlanActionStateRepository() {
		return c11;
	}

	public ReviewSystemTestPlanActionStateRepository getReviewSystemTestPlanActionStateRepository() {
		return r12;
	}

	public CorrectSystemTestPlanActionStateRepository getCorrectSystemTestPlanActionStateRepository() {
		return c13;
	}

	public DeliverProductActionStateRepository getDeliverProductActionStateRepository() {
		return d14;
	}

	public BreakActionStateRepository getBreakActionStateRepository() {
		return b15;
	}

	public GetSickActionStateRepository getGetSickActionStateRepository() {
		return g16;
	}

	public QuitActionStateRepository getQuitActionStateRepository() {
		return q17;
	}

	public IntroduceNewRequirementsActionStateRepository getIntroduceNewRequirementsActionStateRepository() {
		return i18;
	}

	public UpdateProjectAttributesActionStateRepository getUpdateProjectAttributesActionStateRepository() {
		return u19;
	}

	public ChangePayRateActionStateRepository getChangePayRateActionStateRepository() {
		return c20;
	}

	public GiveBonusActionStateRepository getGiveBonusActionStateRepository() {
		return g21;
	}

	public FireActionStateRepository getFireActionStateRepository() {
		return f22;
	}

	public PurchaseToolActionStateRepository getPurchaseToolActionStateRepository() {
		return p23;
	}

	public SuggestedRequirementsPhaseDurationActionStateRepository getSuggestedRequirementsPhaseDurationActionStateRepository() {
		return s24;
	}

	public SuggestedDesignPhaseDurationActionStateRepository getSuggestedDesignPhaseDurationActionStateRepository() {
		return s25;
	}

	public SuggestedImplIntegrationPhaseDurationActionStateRepository getSuggestedImplIntegrationPhaseDurationActionStateRepository() {
		return s26;
	}

	public SuggestedTestingPhaseDurationActionStateRepository getSuggestedTestingPhaseDurationActionStateRepository() {
		return s27;
	}

	public Action getActionWithId(int id) {
		if (c0.getActionWithId(id) != null) {
			return c0.getActionWithId(id);
		} else if (r1.getActionWithId(id) != null) {
			return r1.getActionWithId(id);
		} else if (c2.getActionWithId(id) != null) {
			return c2.getActionWithId(id);
		} else if (c3.getActionWithId(id) != null) {
			return c3.getActionWithId(id);
		} else if (r4.getActionWithId(id) != null) {
			return r4.getActionWithId(id);
		} else if (c5.getActionWithId(id) != null) {
			return c5.getActionWithId(id);
		} else if (c6.getActionWithId(id) != null) {
			return c6.getActionWithId(id);
		} else if (i7.getActionWithId(id) != null) {
			return i7.getActionWithId(id);
		} else if (c8.getActionWithId(id) != null) {
			return c8.getActionWithId(id);
		} else if (i9.getActionWithId(id) != null) {
			return i9.getActionWithId(id);
		} else if (s10.getActionWithId(id) != null) {
			return s10.getActionWithId(id);
		} else if (c11.getActionWithId(id) != null) {
			return c11.getActionWithId(id);
		} else if (r12.getActionWithId(id) != null) {
			return r12.getActionWithId(id);
		} else if (c13.getActionWithId(id) != null) {
			return c13.getActionWithId(id);
		} else if (d14.getActionWithId(id) != null) {
			return d14.getActionWithId(id);
		} else if (b15.getActionWithId(id) != null) {
			return b15.getActionWithId(id);
		} else if (g16.getActionWithId(id) != null) {
			return g16.getActionWithId(id);
		} else if (q17.getActionWithId(id) != null) {
			return q17.getActionWithId(id);
		} else if (i18.getActionWithId(id) != null) {
			return i18.getActionWithId(id);
		} else if (u19.getActionWithId(id) != null) {
			return u19.getActionWithId(id);
		} else if (c20.getActionWithId(id) != null) {
			return c20.getActionWithId(id);
		} else if (g21.getActionWithId(id) != null) {
			return g21.getActionWithId(id);
		} else if (f22.getActionWithId(id) != null) {
			return f22.getActionWithId(id);
		} else if (p23.getActionWithId(id) != null) {
			return p23.getActionWithId(id);
		} else if (s24.getActionWithId(id) != null) {
			return s24.getActionWithId(id);
		} else if (s25.getActionWithId(id) != null) {
			return s25.getActionWithId(id);
		} else if (s26.getActionWithId(id) != null) {
			return s26.getActionWithId(id);
		} else if (s27.getActionWithId(id) != null) {
			return s27.getActionWithId(id);
		}
		return null;
	}

	/*
	 * Replaces all the participants in each action with their equivalent
	 * objects in the current state. Calling this function solves the problem
	 * that happens when you clone actions -- their hashtables point to
	 * participant objects that were part of the previous, non-cloned state.
	 * Hence, this function should be called after this object is cloned.
	 */
	public void refetchParticipants(ArtifactStateRepository artifactRep,
			CustomerStateRepository customerRep,
			EmployeeStateRepository employeeRep,
			ProjectStateRepository projectRep, ToolStateRepository toolRep) {
		c0.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		r1.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c2.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c3.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		r4.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c5.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c6.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		i7.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c8.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		i9.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		s10.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c11.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		r12.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c13.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		d14.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		b15.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		g16.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		q17.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		i18.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		u19.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		c20.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		g21.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		f22.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		p23.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		s24.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		s25.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		s26.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
		s27.refetchParticipants(artifactRep, customerRep, employeeRep,
				projectRep, toolRep);
	}
}