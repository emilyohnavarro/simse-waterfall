/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;

import simse.adts.objects.*;
import java.util.*;

public class RequirementsCaptureToolStateRepository implements Cloneable {
	private Vector<RequirementsCaptureTool> requirementscapturetools;

	public RequirementsCaptureToolStateRepository() {
		requirementscapturetools = new Vector<RequirementsCaptureTool>();
	}

	public Object clone() {
		try {
			RequirementsCaptureToolStateRepository cl = (RequirementsCaptureToolStateRepository) super
					.clone();
			Vector<RequirementsCaptureTool> clonedrequirementscapturetools = new Vector<RequirementsCaptureTool>();
			for (int i = 0; i < requirementscapturetools.size(); i++) {
				clonedrequirementscapturetools
						.addElement((RequirementsCaptureTool) (requirementscapturetools
								.elementAt(i).clone()));
			}
			cl.requirementscapturetools = clonedrequirementscapturetools;
			return cl;
		} catch (CloneNotSupportedException c) {
			System.out.println(c.getMessage());
		}
		return null;
	}

	public void add(RequirementsCaptureTool a) {
		boolean add = true;
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			RequirementsCaptureTool requirementscapturetool = requirementscapturetools
					.elementAt(i);
			if (requirementscapturetool.getName().equals(a.getName())) {
				add = false;
				break;
			}
		}
		if (add) {
			requirementscapturetools.add(a);
		}
	}

	public RequirementsCaptureTool get(String name) {
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			if (requirementscapturetools.elementAt(i).getName().equals(name)) {
				return requirementscapturetools.elementAt(i);
			}
		}
		return null;
	}

	public Vector<RequirementsCaptureTool> getAll() {
		return requirementscapturetools;
	}

	public boolean remove(RequirementsCaptureTool a) {
		return requirementscapturetools.remove(a);
	}
}