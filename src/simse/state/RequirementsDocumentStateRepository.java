/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;

import simse.adts.objects.*;
import java.util.*;

public class RequirementsDocumentStateRepository implements Cloneable {
	private Vector<RequirementsDocument> requirementsdocuments;

	public RequirementsDocumentStateRepository() {
		requirementsdocuments = new Vector<RequirementsDocument>();
	}

	public Object clone() {
		try {
			RequirementsDocumentStateRepository cl = (RequirementsDocumentStateRepository) super
					.clone();
			Vector<RequirementsDocument> clonedrequirementsdocuments = new Vector<RequirementsDocument>();
			for (int i = 0; i < requirementsdocuments.size(); i++) {
				clonedrequirementsdocuments
						.addElement((RequirementsDocument) (requirementsdocuments
								.elementAt(i).clone()));
			}
			cl.requirementsdocuments = clonedrequirementsdocuments;
			return cl;
		} catch (CloneNotSupportedException c) {
			System.out.println(c.getMessage());
		}
		return null;
	}

	public void add(RequirementsDocument a) {
		boolean add = true;
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument requirementsdocument = requirementsdocuments
					.elementAt(i);
			if (requirementsdocument.getName().equals(a.getName())) {
				add = false;
				break;
			}
		}
		if (add) {
			requirementsdocuments.add(a);
		}
	}

	public RequirementsDocument get(String name) {
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			if (requirementsdocuments.elementAt(i).getName().equals(name)) {
				return requirementsdocuments.elementAt(i);
			}
		}
		return null;
	}

	public Vector<RequirementsDocument> getAll() {
		return requirementsdocuments;
	}

	public boolean remove(RequirementsDocument a) {
		return requirementsdocuments.remove(a);
	}
}