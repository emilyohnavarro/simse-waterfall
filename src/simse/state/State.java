/* File generated by: simse.codegenerator.stategenerator.StateGenerator */
package simse.state;

import simse.state.logger.Logger;

public class State implements Cloneable {
	private EmployeeStateRepository esr;
	private ArtifactStateRepository asr;
	private ToolStateRepository tsr;
	private ProjectStateRepository psr;
	private CustomerStateRepository csr;
	private ActionStateRepository actsr;
	private Clock clock;
	private Logger logger;
	private Number score;

	public State() {
		esr = new EmployeeStateRepository();
		asr = new ArtifactStateRepository();
		tsr = new ToolStateRepository();
		psr = new ProjectStateRepository();
		csr = new CustomerStateRepository();
		actsr = new ActionStateRepository();
		logger = new Logger(this);
		clock = new Clock(logger);
		score = new Integer(-1);
	}

	public Object clone() {
		try {
			State cl = (State) (super.clone());
			cl.esr = (EmployeeStateRepository) (esr.clone());
			cl.asr = (ArtifactStateRepository) (asr.clone());
			cl.tsr = (ToolStateRepository) (tsr.clone());
			cl.psr = (ProjectStateRepository) (psr.clone());
			cl.csr = (CustomerStateRepository) (csr.clone());
			cl.actsr = (ActionStateRepository) (actsr.clone());
			cl.actsr.refetchParticipants(cl.asr, cl.csr, cl.esr, cl.psr, cl.tsr);
			cl.clock = null;
			cl.logger = null;
			if (score instanceof Integer) {
				cl.score = new Integer(score.intValue());
			} else { // Double
				cl.score = new Double(score.doubleValue());
			}
			return cl;
		} catch (CloneNotSupportedException c) {
			System.out.println(c.getMessage());
		}
		return null;
	}

	public EmployeeStateRepository getEmployeeStateRepository() {
		return esr;
	}

	public ArtifactStateRepository getArtifactStateRepository() {
		return asr;
	}

	public ToolStateRepository getToolStateRepository() {
		return tsr;
	}

	public ProjectStateRepository getProjectStateRepository() {
		return psr;
	}

	public CustomerStateRepository getCustomerStateRepository() {
		return csr;
	}

	public ActionStateRepository getActionStateRepository() {
		return actsr;
	}

	public Clock getClock() {
		return clock;
	}

	public void setClock(Clock clock) {
		this.clock = clock;
	}

	public Logger getLogger() {
		return logger;
	}

	public void setLogger(Logger logger) {
		this.logger = logger;
	}

	public Number getScore() {
		return score;
	}

	public void setScore(Number score) {
		this.score = score;
	}
}