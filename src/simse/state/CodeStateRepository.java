/* File generated by: simse.codegenerator.stategenerator.RepositoryGenerator */
package simse.state;

import simse.adts.objects.*;
import java.util.*;

public class CodeStateRepository implements Cloneable {
	private Vector<Code> codes;

	public CodeStateRepository() {
		codes = new Vector<Code>();
	}

	public Object clone() {
		try {
			CodeStateRepository cl = (CodeStateRepository) super.clone();
			Vector<Code> clonedcodes = new Vector<Code>();
			for (int i = 0; i < codes.size(); i++) {
				clonedcodes.addElement((Code) (codes.elementAt(i).clone()));
			}
			cl.codes = clonedcodes;
			return cl;
		} catch (CloneNotSupportedException c) {
			System.out.println(c.getMessage());
		}
		return null;
	}

	public void add(Code a) {
		boolean add = true;
		for (int i = 0; i < codes.size(); i++) {
			Code code = codes.elementAt(i);
			if (code.getName().equals(a.getName())) {
				add = false;
				break;
			}
		}
		if (add) {
			codes.add(a);
		}
	}

	public Code get(String name) {
		for (int i = 0; i < codes.size(); i++) {
			if (codes.elementAt(i).getName().equals(name)) {
				return codes.elementAt(i);
			}
		}
		return null;
	}

	public Vector<Code> getAll() {
		return codes;
	}

	public boolean remove(Code a) {
		return codes.remove(a);
	}
}