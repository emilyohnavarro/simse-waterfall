/* File generated by: simse.codegenerator.explanatorytoolgenerator.BranchGenerator */
package simse.explanatorytool;

import simse.state.State;

public class Branch {
	private String name; // name of this branch
	private int startTick; // tick that this branch started
	private int endTick; // tick that this branch ended (or last tick of branch,
							// if branch is still ongoing)
	private Branch root; // Branch that this branch stemmed from (null if root)
	private String score; // score (null if no score given)
	private boolean closed; // whether or not this branch has been closed

	public Branch(String name, int start, int end, Branch root, String score) {
		this.name = name;
		this.startTick = start;
		this.endTick = end;
		this.root = root;
		this.score = score;
		closed = false;
	}

	public String getName() {
		return name;
	}

	public int getStartTick() {
		return startTick;
	}

	public int getEndTick() {
		return endTick;
	}

	public void setEndTick(int end) {
		endTick = end;
	}

	public Branch getRoot() {
		return root;
	}

	public String getScore() {
		return score;
	}

	public void setScore(String score) {
		this.score = score;
	}

	public boolean isClosed() {
		return closed;
	}

	public void setClosed() {
		closed = true;
	}

	public void update(State state) {
		endTick = state.getClock().getTime();
		score = String.valueOf(state.getScore());
	}
}