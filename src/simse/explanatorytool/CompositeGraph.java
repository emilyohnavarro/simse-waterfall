/* File generated by: simse.codegenerator.explanatorytoolgenerator.CompositeGraphGenerator */
package simse.explanatorytool;

import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.Range;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RefineryUtilities;

import simse.SimSE;
import simse.state.Clock;
import simse.state.State;
import simse.state.logger.Logger;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.Font;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

public class CompositeGraph extends JFrame implements ChartMouseListener,
		MouseListener, ActionListener {
	private ActionGraph actGraph;
	private ObjectGraph objGraph;
	private JFreeChart chart;
	private ChartPanel chartPanel;
	private int lastRightClickedX;
	private JMenuItem newBranchItem;
	private JSeparator separator;
	private Branch branch; // branch from which this graph is generated

	public CompositeGraph(ObjectGraph objGraph, ActionGraph actGraph,
			Branch branch) {
		super();
		this.branch = branch;
		String title = "Composite Graph";
		if (branch.getName() != null) {
			title = title.concat(" - " + branch.getName());
		}
		setTitle(title);

		this.actGraph = actGraph;
		this.objGraph = objGraph;
		lastRightClickedX = 1;
		newBranchItem = new JMenuItem("Start new branch from here");
		newBranchItem.addActionListener(this);
		separator = new JSeparator();

		// parent plot:
		NumberAxis domainAxis = new NumberAxis("Clock Ticks");
		domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
		CombinedDomainXYPlot plot = new CombinedDomainXYPlot(domainAxis);

		// add the subplots:
		plot.add(objGraph.getXYPlot(), 1);
		plot.add(actGraph.getXYPlot(), 1);
		plot.setOrientation(PlotOrientation.VERTICAL);

		// make a new chart containing the overlaid plot:
		chart = new JFreeChart("Composite (Object/Action) Graph",
				JFreeChart.DEFAULT_TITLE_FONT, plot, true);
		TextTitle subtitle = new TextTitle(objGraph.getChartTitle()
				+ " and Selected Actions", new Font("SansSerif", Font.BOLD, 12));
		chart.addSubtitle(subtitle);
		chart.setBackgroundPaint(Color.white);
		chartPanel = new ChartPanel(chart, true, true, true, true, true);
		chartPanel.addChartMouseListener(this);
		chartPanel.addMouseListener(this);
		chartPanel.setPreferredSize(new java.awt.Dimension(1000, 540));
		setContentPane(chartPanel);
		pack();
		RefineryUtilities.centerFrameOnScreen(this);
		setVisible(true);
	}

	// responds to LEFT mouse clicks on the chart
	public void chartMouseClicked(ChartMouseEvent event) {
		// send the event to the action graph:
		actGraph.chartMouseClicked(event);
	}

	public void chartMouseMoved(ChartMouseEvent event) {
	}

	// responds to RIGHT-clicks on the chart
	public void mouseReleased(MouseEvent me) {
		if (me.getButton() != MouseEvent.BUTTON1) { // not left-click
			XYPlot plot = chart.getXYPlot();
			Range domainRange = plot.getDataRange(plot.getDomainAxis());
			if (domainRange != null) { // chart is not blank
				Point2D pt = chartPanel.translateScreenToJava2D(new Point(me
						.getX(), me.getY()));
				ChartRenderingInfo info = this.chartPanel
						.getChartRenderingInfo();
				Rectangle2D dataArea = info.getPlotInfo().getDataArea();
				NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
				RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
				double chartX = domainAxis.java2DToValue(pt.getX(), dataArea,
						domainAxisEdge);
				lastRightClickedX = (int) Math.rint(chartX);
				if (domainRange != null
						&& lastRightClickedX >= domainRange.getLowerBound()
						&& lastRightClickedX <= domainRange.getUpperBound()) { // clicked
																				// within
																				// domain
																				// range
					if (chartPanel.getPopupMenu().getComponentIndex(
							newBranchItem) == -1) { // no new branch item on
													// menu currently
						chartPanel.getPopupMenu().add(separator);
						chartPanel.getPopupMenu().add(newBranchItem);
						chartPanel.getPopupMenu().pack();
						chartPanel.getPopupMenu().repaint();
					}
				} else { // clicked outside of domain range
					if (chartPanel.getPopupMenu().getComponentIndex(
							newBranchItem) >= 0) { // new branch item currently
													// on menu
						chartPanel.getPopupMenu().remove(newBranchItem);
						if (chartPanel.getPopupMenu().getComponentIndex(
								separator) >= 0) { // has separator
							chartPanel.getPopupMenu().remove(separator);
						}
						chartPanel.getPopupMenu().pack();
						chartPanel.getPopupMenu().repaint();
					}
				}
			}
		}
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseClicked(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == newBranchItem) {
			String newBranchName = JOptionPane.showInputDialog(null,
					"Please name this new game:", "Name New Game",
					JOptionPane.QUESTION_MESSAGE);
			if (newBranchName != null) {
				State tempState = (State) objGraph.getLog()
						.get(lastRightClickedX).clone();
				Logger tempLogger = new Logger(tempState, new ArrayList<State>(
						objGraph.getLog().subList(0, lastRightClickedX)));
				Clock tempClock = new Clock(tempLogger, lastRightClickedX);
				tempState.setClock(tempClock);
				tempState.setLogger(tempLogger);
				SimSE.startNewBranch(tempState, new Branch(newBranchName,
						lastRightClickedX, tempClock.getTime(), branch, null));
			}
		}
	}

	public void update() {
		actGraph.update();
		objGraph.update();
	}

	public class ExitListener extends WindowAdapter {
		public void windowClosing(WindowEvent event) {
			setVisible(false);
			dispose();
		}
	}
}