/* File generated by: simse.codegenerator.explanatorytoolgenerator.MultipleTimelinesBrowserGenerator */
package simse.explanatorytool;

import simse.SimSE;
import simse.gui.SimSEGUI;
import simse.state.Clock;
import simse.state.State;
import simse.state.logger.Logger;

import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;
import org.jfree.ui.TextAnchor;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

public class MultipleTimelinesBrowser extends JFrame implements MouseListener,
		ActionListener, ChartMouseListener {
	private static final String ROOT_GAME_NAME = "ROOT GAME";
	private JFreeChart chart; // chart object
	private ChartPanel chartPanel;
	private JMenuItem newBranchItem;
	private JSeparator separator;
	private Branch lastRightClickedBranch; // last branch that was right-clicked
											// on
	private int lastRightClickedX; // last x-val that was right-clicked on
	private XYSeriesCollection dataset;
	private int unnamedBranchesIndex;

	public MultipleTimelinesBrowser() {
		super();
		setTitle("Multiple Timelines Browser");
		// create dataset:
		dataset = new XYSeriesCollection();
		XYDataset xydataset = createDataset();
		chart = createChart(xydataset);
		resetAnnotations();
		setSeriesStrokes();
		chartPanel = new ChartPanel(chart);
		chartPanel.addChartMouseListener(this);
		chartPanel.addMouseListener(this);
		chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
		setContentPane(chartPanel);
		newBranchItem = new JMenuItem("Start new game from here");
		newBranchItem.addActionListener(this);
		separator = new JSeparator();
		lastRightClickedBranch = null;
		lastRightClickedX = -1;
		pack();
		RefineryUtilities.centerFrameOnScreen(this);
		addWindowListener(new ExitListener());

		unnamedBranchesIndex = 0;
	}

	// Creates the dataset for this graph
	private XYDataset createDataset() {
		for (int i = 0; i < SimSE.getBranches().size(); i++) {
			Branch b = SimSE.getBranches().get(i);
			XYSeries newSeries = null;
			if (b.getRoot() == null) { // root game
				newSeries = new XYSeries(ROOT_GAME_NAME);
			} else { // non-root game
				if (b.getName() == null) {
					newSeries = new XYSeries(unnamedBranchesIndex);
					unnamedBranchesIndex++;
				} else { // game has a name
					newSeries = new XYSeries(b.getName());
				}
				// add branch line:
				for (int j = 0; j < SimSE.getBranches().size(); j++) {
					// find root:
					if (SimSE.getBranches().get(j) == b.getRoot()) { // found
																		// the
																		// root
						newSeries.add(b.getStartTick(), (j * 10 + 1));
					}
				}
			}
			newSeries.add(b.getStartTick(), (i * 10 + 1));
			newSeries.add(b.getEndTick(), (i * 10 + 1));
			dataset.addSeries(newSeries);
		}
		return dataset;
	}

	// Creates the chart for this graph
	private JFreeChart createChart(XYDataset dataset) {
		// create the chart:
		JFreeChart chart = ChartFactory.createXYLineChart(this.getTitle(),
				"Clock Ticks", null, dataset, PlotOrientation.VERTICAL, true,
				true, false);
		chart.setBackgroundPaint(Color.white);
		XYPlot plot = (XYPlot) chart.getPlot();
		plot.setBackgroundPaint(Color.WHITE);
		plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
		plot.setDomainGridlinesVisible(true);
		plot.setRangeGridlinesVisible(false);
		ValueAxis rangeAxis = plot.getRangeAxis();
		rangeAxis.setTickLabelsVisible(false);
		rangeAxis.setTickMarksVisible(false);
		rangeAxis.setAxisLineVisible(false);
		rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
		XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot
				.getRenderer();
		renderer.setShapesVisible(false);
		renderer.setShapesFilled(false);
		renderer.setDrawSeriesLineAsPath(true);

		// change the auto tick unit selection to integer units only:
		NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
		domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

		return chart;
	}

	public void update() {
		if (SimSE.getBranches().size() > dataset.getSeriesCount()) { // need to
																		// add
																		// new
																		// series
			int numNewSeries = SimSE.getBranches().size()
					- dataset.getSeriesCount();
			while (numNewSeries > 0) {
				Branch newBranch = SimSE.getBranches().get(
						dataset.getSeriesCount());
				XYSeries newSeries = null;
				if (newBranch.getRoot() == null) { // root game
					newSeries = new XYSeries(ROOT_GAME_NAME);
				} else { // non-root game
					if (newBranch.getName() == null) {
						newSeries = new XYSeries(unnamedBranchesIndex);
						unnamedBranchesIndex++;
					} else { // game has a name
						newSeries = new XYSeries(newBranch.getName());
					}
					// add branch line:
					for (int j = 0; j < SimSE.getBranches().size(); j++) {
						// find root:
						if (SimSE.getBranches().get(j) == newBranch.getRoot()) { // found
																					// the
																					// root
							newSeries.add(newBranch.getStartTick(),
									(j * 10 + 1));
						}
					}
				}
				dataset.addSeries(newSeries);
				newSeries.add(newBranch.getStartTick(),
						(dataset.indexOf(newSeries.getKey()) * 10 + 1));
				newSeries.add(newBranch.getEndTick(),
						(dataset.indexOf(newSeries.getKey()) * 10 + 1));
				((XYLineAndShapeRenderer) ((XYPlot) chart.getPlot())
						.getRenderer()).setSeriesStroke(
						(dataset.getSeriesCount() - 1), new BasicStroke(10));
				numNewSeries--;
			}
		}
		// add a new end data point for each series if needed
		for (int i = 0; i < SimSE.getBranches().size(); i++) {
			// check each branch's series and see if its largest x value is less
			// than
			// that branch's endTick. if so, add a new point:
			Branch b = SimSE.getBranches().get(i);
			if (!b.isClosed()
					&& ((b.getScore() == null) || (b.getScore().equals("-1")))) { // game
																					// is
																					// open
																					// and
																					// hasn't
																					// ended
																					// yet
				int itemCount = dataset.getSeries(i).getItemCount();
				XYDataItem lastItem = dataset.getSeries(i).getDataItem(
						itemCount - 1);

				if (lastItem.getX().intValue() < b.getEndTick()) { // series
																	// needs to
																	// be
																	// updated
																	// with new
																	// end tick
					dataset.getSeries(i).add(b.getEndTick(), (i * 10 + 1));
				}
			}
		}
		setSeriesStrokes();
		resetAnnotations();
	}

	private void resetAnnotations() {
		XYPlot plot = (XYPlot) chart.getPlot();
		plot.clearAnnotations();
		Font font = new Font("SansSerif", Font.BOLD, 12);
		for (int i = 0; i < SimSE.getBranches().size(); i++) {
			Branch b = SimSE.getBranches().get(i);
			String str = new String();
			if (b.getScore() != null && !b.getScore().equals("-1")) { // has a
																		// score
				str = "  " + b.getScore();
			}
			if (str.length() > 0) {
				XYTextAnnotation annotation = new XYTextAnnotation(str,
						b.getEndTick(), i * 10 + 1);
				annotation.setTextAnchor(TextAnchor.HALF_ASCENT_LEFT);
				annotation.setFont(font);
				plot.addAnnotation(annotation);
			}
		}
	}

	private void setSeriesStrokes() {
		XYPlot plot = (XYPlot) chart.getPlot();
		XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot
				.getRenderer();
		for (int i = 0; i < dataset.getSeriesCount(); i++) {
			if (SimSE.getBranches().get(i).isClosed()) { // make dashed line
				renderer.setSeriesStroke(i, new BasicStroke(10,
						BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1.0f,
						new float[] { 5.0f, 5.0f }, 10.0f));
			} else { // game is open; make solid line
				renderer.setSeriesStroke(i, new BasicStroke(10));
			}
		}
	}

	// responds to LEFT mouse clicks on the chart
	public void chartMouseClicked(ChartMouseEvent event) {
		if (event.getTrigger().getButton() == MouseEvent.BUTTON1) { // left-click
			Branch b = getBranchClickedOn(event.getTrigger());
			if (b != null) {
				// find branch index:
				for (int i = 0; i < SimSE.getBranches().size(); i++) {
					Branch tempBranch = SimSE.getBranches().get(i);
					if (b == tempBranch) {
						// bring up branch (if not closed):
						SimSEGUI g = SimSE.getGUIs().get(i);
						if (!b.isClosed()) {
							if (g.getState() == Frame.ICONIFIED) {
								g.setState(Frame.NORMAL);
							}
							g.setVisible(true);
						}
					}
				}
			}
		}
	}

	public void chartMouseMoved(ChartMouseEvent event) {
	}

	// responds to RIGHT-clicks on the chart
	public void mouseReleased(MouseEvent me) {
		if (me.getButton() != MouseEvent.BUTTON1) { // not left-click
			Branch b = getBranchClickedOn(me);
			boolean valid = true;
			if ((b != null) && (!b.isClosed())
					&& (b.getEndTick() != b.getStartTick())) { // clicked on a
																// valid branch
				lastRightClickedBranch = b;
				if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) == -1) { // no
																						// new
																						// branch
																						// item
																						// on
																						// menu
																						// currently
					chartPanel.getPopupMenu().add(separator);
					chartPanel.getPopupMenu().add(newBranchItem);
					chartPanel.getPopupMenu().pack();
					chartPanel.getPopupMenu().repaint();
				}

				// set last right clicked X:
				XYPlot plot = chart.getXYPlot();
				Range domainRange = plot.getDataRange(plot.getDomainAxis());
				if (domainRange != null) { // chart is not blank
					Point2D pt = chartPanel.translateScreenToJava2D(new Point(
							me.getX(), me.getY()));
					ChartRenderingInfo info = this.chartPanel
							.getChartRenderingInfo();
					Rectangle2D dataArea = info.getPlotInfo().getDataArea();
					NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
					RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
					double chartX = domainAxis.java2DToValue(pt.getX(),
							dataArea, domainAxisEdge);
					int intX = (int) Math.rint(chartX);
					if (intX < lastRightClickedBranch.getEndTick()) { // not end
																		// tick
						lastRightClickedX = intX;
					} else {
						valid = false;
					}
				}
			} else { // did not click on a valid branch segment
				valid = false;
			}
			if (!valid) {
				lastRightClickedBranch = null;
				lastRightClickedX = -1;
				if (chartPanel.getPopupMenu().getComponentIndex(newBranchItem) >= 0) {
					// new branch item currently on menu
					chartPanel.getPopupMenu().remove(newBranchItem);
					if (chartPanel.getPopupMenu().getComponentIndex(separator) >= 0) {
						// has separator
						chartPanel.getPopupMenu().remove(separator);
					}
					chartPanel.getPopupMenu().pack();
					chartPanel.getPopupMenu().repaint();
				}
			}
		}
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseClicked(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void actionPerformed(ActionEvent evt) {
		if (evt.getSource() == newBranchItem) {
			String newBranchName = JOptionPane.showInputDialog(null,
					"Please name this new game:", "Name New Game",
					JOptionPane.QUESTION_MESSAGE);
			if (newBranchName != null) {
				if ((lastRightClickedBranch != null)
						&& (lastRightClickedX >= 0)) {
					// find branch index:
					for (int i = 0; i < SimSE.getBranches().size(); i++) {
						Branch tempBranch = SimSE.getBranches().get(i);
						if (lastRightClickedBranch == tempBranch) {
							// bring up branch (if not closed):
							SimSEGUI g = SimSE.getGUIs().get(i);
							if (!lastRightClickedBranch.isClosed()) {
								ArrayList<State> log = g.getSimSEState()
										.getLogger().getLog();
								State tempState = (State) log.get(
										lastRightClickedX).clone();
								Logger tempLogger = new Logger(tempState,
										new ArrayList<State>(log.subList(0,
												lastRightClickedX)));
								Clock tempClock = new Clock(tempLogger,
										lastRightClickedX);
								tempState.setClock(tempClock);
								tempState.setLogger(tempLogger);
								SimSE.startNewBranch(tempState, new Branch(
										newBranchName, lastRightClickedX,
										tempClock.getTime(),
										lastRightClickedBranch, null));
							}
						}
					}
				}
			}
		}
	}

	private Branch getBranchClickedOn(MouseEvent me) {
		XYPlot plot = chart.getXYPlot();
		Range domainRange = plot.getDataRange(plot.getDomainAxis());
		if (domainRange != null) { // chart is not blank
			Point2D pt = chartPanel.translateScreenToJava2D(new Point(
					me.getX(), me.getY()));
			ChartRenderingInfo info = this.chartPanel.getChartRenderingInfo();
			Rectangle2D dataArea = info.getPlotInfo().getDataArea();
			NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
			RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
			double dblX = domainAxis.java2DToValue(pt.getX(), dataArea,
					domainAxisEdge);
			int intX = (int) Math.rint(dblX);
			NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
			RectangleEdge rangeAxisEdge = plot.getRangeAxisEdge();
			double dblY = rangeAxis.java2DToValue(pt.getY(), dataArea,
					rangeAxisEdge);
			int intY = (int) Math.rint(dblY);

			// first check if it was a vertical branch segment that was clicked
			// on:
			// go through all branches and find any that start at that x:
			ArrayList<Integer> branchIndices = new ArrayList<Integer>();
			for (int i = 0; i < SimSE.getBranches().size(); i++) {
				Branch b = SimSE.getBranches().get(i);
				if (b.getStartTick() == intX) {
					branchIndices.add(new Integer(i));
				}
			}

			// go through all possible branches and check if the clicked-on y
			// val was on its vertical branch:
			for (Integer i : branchIndices) {
				Branch root = SimSE.getBranches().get(i.intValue()).getRoot();
				int rootIndex = -1;

				// find index of root:
				for (int j = 0; j < SimSE.getBranches().size(); j++) {
					if (SimSE.getBranches().get(j) == root) { // found root
						rootIndex = j;
						break;
					}
				}
				if (rootIndex > -1) {
					int rootGameYVal = rootIndex * 10 + 1;
					int branchYVal = i * 10 + 1;
					// check if the clicked-on Y val is between these two vals:
					if (intY >= rootGameYVal && intY <= branchYVal) {
						return SimSE.getBranches().get(i.intValue());
					}
				}
			}

			// if it wasn't a vertical branch segment that was clicked on, look
			// for a horizontal one:
			// get branch w/ that y-value (if there is one):
			int adjustedYVal = (intY - 1) / 10;
			if (intY >= 0 && adjustedYVal < SimSE.getBranches().size()) {
				Branch b = SimSE.getBranches().get(adjustedYVal);
				// check if x-val is within range:
				if (dblX >= b.getStartTick() && dblX <= b.getEndTick()) {
					return b;
				}
			}
		}
		return null;
	}

	public XYPlot getXYPlot() {
		return chart.getXYPlot();
	}

	public String getChartTitle() {
		return this.getTitle();
	}

	public class ExitListener extends WindowAdapter {
		public void windowClosing(WindowEvent event) {
			if (SimSE.getNumOpenBranches() == 0) {
				System.exit(0);
			}
			setVisible(false);
			dispose();
		}
	}
}