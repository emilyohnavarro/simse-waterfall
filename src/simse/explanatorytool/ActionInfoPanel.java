/* File generated by: simse.codegenerator.explanatorytoolgenerator.ActionInfoPanelGenerator */
package simse.explanatorytool;

import simse.adts.actions.*;
import simse.adts.objects.*;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.Dimension;
import java.util.Vector;

public class ActionInfoPanel extends JPanel implements ListSelectionListener {
	private simse.adts.actions.Action action; // action in focus

	private JList triggerList; // for choosing which trigger show
	private JList destroyerList; // for choosing which destroyer to show
	private JTextArea descriptionArea; // for displaying a trigger/destroyer
										// description
	private JTextArea actionDescriptionArea; // for displaying the action
												// description

	private final int TRIGGER = 0;
	private final int DESTROYER = 1;

	public ActionInfoPanel(simse.adts.actions.Action action) {
		this.action = action;

		// Create main panel (box):
		Box mainPane = Box.createVerticalBox();
		mainPane.setPreferredSize(new Dimension(900, 550));

		// Create actionDescription pane and components:
		Box actionDescriptionPane = Box.createVerticalBox();
		JPanel actionDescriptionTitlePane = new JPanel();
		actionDescriptionTitlePane.add(new JLabel("ActionDescription:"));
		actionDescriptionPane.add(actionDescriptionTitlePane);
		actionDescriptionArea = new JTextArea(1, 50);
		actionDescriptionArea.setLineWrap(true);
		actionDescriptionArea.setWrapStyleWord(true);
		actionDescriptionArea.setEditable(false);
		JScrollPane actionDescriptionScrollPane = new JScrollPane(
				actionDescriptionArea,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		initializeActionDescription();
		actionDescriptionPane.add(actionDescriptionScrollPane);

		// Create participants pane and components:
		Box participantsPane = Box.createVerticalBox();
		JPanel participantsTitlePane = new JPanel();
		participantsTitlePane.add(new JLabel("Participants:"));
		participantsPane.add(participantsTitlePane);

		// participants table:
		JScrollPane participantsTablePane = new JScrollPane(
				createParticipantsTable());
		participantsTablePane
				.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		participantsTablePane.setPreferredSize(new Dimension(900, 125));
		participantsPane.add(participantsTablePane);

		// Create triggerDestroyer pane and components:
		JPanel triggerDestroyerPane = new JPanel();

		// list pane:
		Box listPane = Box.createVerticalBox();

		// trigger list:
		JPanel triggerListTitlePane = new JPanel();
		triggerListTitlePane.add(new JLabel("Triggers:"));
		listPane.add(triggerListTitlePane);
		triggerList = new JList();
		triggerList.setVisibleRowCount(3);
		triggerList.setFixedCellWidth(400);
		triggerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		triggerList.addListSelectionListener(this);
		initializeTriggerList();
		JScrollPane triggerListPane = new JScrollPane(triggerList);
		listPane.add(triggerListPane);

		// destroyer list:
		JPanel destroyerListTitlePane = new JPanel();
		destroyerListTitlePane.add(new JLabel("Destroyers:"));
		listPane.add(destroyerListTitlePane);
		destroyerList = new JList();
		destroyerList.setVisibleRowCount(3);
		destroyerList.setFixedCellWidth(400);
		destroyerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		destroyerList.addListSelectionListener(this);
		initializeDestroyerList();
		JScrollPane destroyerListPane = new JScrollPane(destroyerList);
		listPane.add(destroyerListPane);

		triggerDestroyerPane.add(listPane);

		// description pane:
		Box descriptionPane = Box.createVerticalBox();
		JPanel descriptionTitlePane = new JPanel();
		descriptionTitlePane.add(new JLabel("Description:"));
		descriptionPane.add(descriptionTitlePane);

		// description text area:
		descriptionArea = new JTextArea(9, 30);
		descriptionArea.setLineWrap(true);
		descriptionArea.setWrapStyleWord(true);
		descriptionArea.setEditable(false);
		JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		descriptionPane.add(descriptionScrollPane);

		triggerDestroyerPane.add(descriptionPane);

		// Add panes to main pane:
		mainPane.add(actionDescriptionPane);
		mainPane.add(participantsPane);
		mainPane.add(triggerDestroyerPane);
		add(mainPane);

		// Set main window frame properties:
		setOpaque(true);
		validate();
		repaint();
	}

	// responds to list selections
	public void valueChanged(ListSelectionEvent e) {
		if (e.getSource() == triggerList && triggerList.getSelectedIndex() >= 0) {
			refreshDescriptionArea(TRIGGER);

			// clear selection for destroyer list:
			destroyerList.clearSelection();

		} else if (e.getSource() == destroyerList
				&& destroyerList.getSelectedIndex() >= 0) {
			refreshDescriptionArea(DESTROYER);

			// clear selection for trigger list:
			triggerList.clearSelection();
		}
	}

	// initializes the action description
	private void initializeActionDescription() {
		String text = "";
		if (action instanceof CreateRequirementsAction) {
			text = "Software engineers create a requirements document.";
		} else if (action instanceof ReviewRequirementsAction) {
			text = "Software engineers review a requirements document to try to find errors";
		} else if (action instanceof CorrectRequirementsAction) {
			text = "Software engineers correct the known errors in a requirements document";
		} else if (action instanceof CreateDesignAction) {
			text = "Software engineers create a design document";
		} else if (action instanceof ReviewDesignAction) {
			text = "Software engineers review a design document to try to find errors";
		} else if (action instanceof CorrectDesignAction) {
			text = "Software engineers correct the known errors in a design document";
		} else if (action instanceof CreateCodeAction) {
			text = "Software engineers create a piece of code";
		} else if (action instanceof InspectCodeAction) {
			text = "Software engineers inspect a piece of code to try to find errors";
		} else if (action instanceof CorrectCodeAction) {
			text = "Software engineers correct the known errors in a piece of code";
		} else if (action instanceof IntegrateCodeAction) {
			text = "Software engineers integrate modules of code into a single system";
		} else if (action instanceof SystemTestAction) {
			text = "Software engineers test an integrated system of code to try to find errors";
		} else if (action instanceof CreateSystemTestPlanAction) {
			text = "Software engineers create a plan for testing an integrated system of code";
		} else if (action instanceof ReviewSystemTestPlanAction) {
			text = "Software engineers review a system test plan to try to find errors";
		} else if (action instanceof CorrectSystemTestPlanAction) {
			text = "Software engineers correct  the known errors in a system test plan";
		} else if (action instanceof DeliverProductAction) {
			text = "The project manager (player) delivers the product to the customer, ending the game";
		} else if (action instanceof BreakAction) {
			text = "An employee takes a break from work to try to regain energy";
		} else if (action instanceof GetSickAction) {
			text = "An employee falls ill and is away from work for a time";
		} else if (action instanceof QuitAction) {
			text = "An employee quits their job, after which he/she no longer works at the company";
		} else if (action instanceof IntroduceNewRequirementsAction) {
			text = "The customer introduces new requirements for the product, possibly also giving more time and/or money for the project";
		} else if (action instanceof ChangePayRateAction) {
			text = "The project manager (player) changes the per-clock-tick pay rate of an employee";
		} else if (action instanceof GiveBonusAction) {
			text = "The project manager (player) gives a monetary bonus to an employee";
		} else if (action instanceof FireAction) {
			text = "The project manager (player) fires an employee from their job, after which that employee no longer works at the company";
		} else if (action instanceof PurchaseToolAction) {
			text = "The project manager (player) buys a software engineering tool that the employees can then use in various actions throughout the simulation";
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			text = "Suggested duration of the requirements phase.";
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			text = "Suggested duration of the design phase.";
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			text = "Suggested duration of the implementation and integration phase.";
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			text = "Suggested duration of the testing phase.";
		}
		actionDescriptionArea.setText(text);
		actionDescriptionArea.setCaretPosition(0);
	}

	// initializes the JList of triggers
	private void initializeTriggerList() {
		if (action instanceof CreateRequirementsAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof ReviewRequirementsAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CorrectRequirementsAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CreateDesignAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof ReviewDesignAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CorrectDesignAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CreateCodeAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof InspectCodeAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CorrectCodeAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof IntegrateCodeAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof SystemTestAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CreateSystemTestPlanAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof ReviewSystemTestPlanAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof CorrectSystemTestPlanAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof DeliverProductAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof BreakAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof GetSickAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof QuitAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof IntroduceNewRequirementsAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof ChangePayRateAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof GiveBonusAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof FireAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof PurchaseToolAction) {
			String[] list = { "TrigA", };
			triggerList.setListData(list);
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			String[] list = { "AutoTrig", };
			triggerList.setListData(list);
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			String[] list = { "AutoTrig", };
			triggerList.setListData(list);
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			String[] list = { "AutoTrig", };
			triggerList.setListData(list);
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			String[] list = { "AutoTrig", };
			triggerList.setListData(list);
		}
	}

	// initializes the JList of destroyers
	private void initializeDestroyerList() {
		if (action instanceof CreateRequirementsAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof ReviewRequirementsAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CorrectRequirementsAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CreateDesignAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof ReviewDesignAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CorrectDesignAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CreateCodeAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof InspectCodeAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CorrectCodeAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof IntegrateCodeAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof SystemTestAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CreateSystemTestPlanAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof ReviewSystemTestPlanAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof CorrectSystemTestPlanAction) {
			String[] list = { "UserDest", "AutoDest", };
			destroyerList.setListData(list);
		} else if (action instanceof DeliverProductAction) {
			String[] list = {};
			destroyerList.setListData(list);
		} else if (action instanceof BreakAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof GetSickAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof QuitAction) {
			String[] list = { "DestO", };
			destroyerList.setListData(list);
		} else if (action instanceof IntroduceNewRequirementsAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof ChangePayRateAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof GiveBonusAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof FireAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof PurchaseToolAction) {
			String[] list = { "DestA", };
			destroyerList.setListData(list);
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			String[] list = { "TimedDest", };
			destroyerList.setListData(list);
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			String[] list = { "TimedDest", };
			destroyerList.setListData(list);
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			String[] list = { "TimedDest", };
			destroyerList.setListData(list);
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			String[] list = { "TimedDest", };
			destroyerList.setListData(list);
		}
	}

	private JTable createParticipantsTable() {
		String[] columnNames = { "Participant Name", "Participant", "Status" };
		Object[][] data = new Object[action.getAllParticipants().size()][3];
		int index = 0;
		if (action instanceof CreateRequirementsAction) {
			CreateRequirementsAction createrequirementsAction = (CreateRequirementsAction) action;

			// Emp participant:
			Vector<Employee> emps = createrequirementsAction.getAllEmps();
			Vector<Employee> activeEmps = createrequirementsAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// ReqDoc participant:
			Vector<Artifact> reqdocs = createrequirementsAction.getAllReqDocs();
			Vector<Artifact> activeReqDocs = createrequirementsAction
					.getAllActiveReqDocs();
			for (int i = 0; i < reqdocs.size(); i++) {
				Artifact reqdoc = reqdocs.get(i);
				data[index][0] = "ReqDoc";
				if (reqdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentReqDoc = (RequirementsDocument) reqdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentReqDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeReqDocs.size(); j++) {
						Artifact activeReqDoc = activeReqDocs.get(j);
						if ((activeReqDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeReqDoc)
										.getName().equals(
												((RequirementsDocument) reqdoc)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = createrequirementsAction.getAllProjs();
			Vector<Project> activeProjs = createrequirementsAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// RequirementsCaptureTool participant:
			Vector<Tool> requirementscapturetools = createrequirementsAction
					.getAllRequirementsCaptureTools();
			Vector<Tool> activeRequirementsCaptureTools = createrequirementsAction
					.getAllActiveRequirementsCaptureTools();
			for (int i = 0; i < requirementscapturetools.size(); i++) {
				Tool requirementscapturetool = requirementscapturetools.get(i);
				data[index][0] = "RequirementsCaptureTool";
				if (requirementscapturetool instanceof RequirementsCaptureTool) {
					RequirementsCaptureTool requirementscapturetoolRequirementsCaptureTool = (RequirementsCaptureTool) requirementscapturetool;
					data[index][1] = "RequirementsCaptureTool Tool "
							+ requirementscapturetoolRequirementsCaptureTool
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeRequirementsCaptureTools.size(); j++) {
						Tool activeRequirementsCaptureTool = activeRequirementsCaptureTools
								.get(j);
						if ((activeRequirementsCaptureTool instanceof RequirementsCaptureTool)
								&& ((RequirementsCaptureTool) activeRequirementsCaptureTool)
										.getName()
										.equals(((RequirementsCaptureTool) requirementscapturetool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedCodeDoc participant:
			Vector<Artifact> associatedcodedocs = createrequirementsAction
					.getAllAssociatedCodeDocs();
			Vector<Artifact> activeAssociatedCodeDocs = createrequirementsAction
					.getAllActiveAssociatedCodeDocs();
			for (int i = 0; i < associatedcodedocs.size(); i++) {
				Artifact associatedcodedoc = associatedcodedocs.get(i);
				data[index][0] = "AssociatedCodeDoc";
				if (associatedcodedoc instanceof Code) {
					Code codeAssociatedCodeDoc = (Code) associatedcodedoc;
					data[index][1] = "Code Artifact "
							+ codeAssociatedCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedCodeDocs.size(); j++) {
						Artifact activeAssociatedCodeDoc = activeAssociatedCodeDocs
								.get(j);
						if ((activeAssociatedCodeDoc instanceof Code)
								&& ((Code) activeAssociatedCodeDoc).getName()
										.equals(((Code) associatedcodedoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDoc participant:
			Vector<Artifact> associateddesigndocs = createrequirementsAction
					.getAllAssociatedDesignDocs();
			Vector<Artifact> activeAssociatedDesignDocs = createrequirementsAction
					.getAllActiveAssociatedDesignDocs();
			for (int i = 0; i < associateddesigndocs.size(); i++) {
				Artifact associateddesigndoc = associateddesigndocs.get(i);
				data[index][0] = "AssociatedDesignDoc";
				if (associateddesigndoc instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDoc = (DesignDocument) associateddesigndoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocs.size(); j++) {
						Artifact activeAssociatedDesignDoc = activeAssociatedDesignDocs
								.get(j);
						if ((activeAssociatedDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDoc)
										.getName()
										.equals(((DesignDocument) associateddesigndoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedSystemTestPlan participant:
			Vector<Artifact> associatedsystemtestplans = createrequirementsAction
					.getAllAssociatedSystemTestPlans();
			Vector<Artifact> activeAssociatedSystemTestPlans = createrequirementsAction
					.getAllActiveAssociatedSystemTestPlans();
			for (int i = 0; i < associatedsystemtestplans.size(); i++) {
				Artifact associatedsystemtestplan = associatedsystemtestplans
						.get(i);
				data[index][0] = "AssociatedSystemTestPlan";
				if (associatedsystemtestplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanAssociatedSystemTestPlan = (SystemTestPlan) associatedsystemtestplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanAssociatedSystemTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedSystemTestPlans.size(); j++) {
						Artifact activeAssociatedSystemTestPlan = activeAssociatedSystemTestPlans
								.get(j);
						if ((activeAssociatedSystemTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeAssociatedSystemTestPlan)
										.getName()
										.equals(((SystemTestPlan) associatedsystemtestplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof ReviewRequirementsAction) {
			ReviewRequirementsAction reviewrequirementsAction = (ReviewRequirementsAction) action;

			// Emp participant:
			Vector<Employee> emps = reviewrequirementsAction.getAllEmps();
			Vector<Employee> activeEmps = reviewrequirementsAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// RequirementsDoc participant:
			Vector<Artifact> requirementsdocs = reviewrequirementsAction
					.getAllRequirementsDocs();
			Vector<Artifact> activeRequirementsDocs = reviewrequirementsAction
					.getAllActiveRequirementsDocs();
			for (int i = 0; i < requirementsdocs.size(); i++) {
				Artifact requirementsdoc = requirementsdocs.get(i);
				data[index][0] = "RequirementsDoc";
				if (requirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentRequirementsDoc = (RequirementsDocument) requirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentRequirementsDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeRequirementsDocs.size(); j++) {
						Artifact activeRequirementsDoc = activeRequirementsDocs
								.get(j);
						if ((activeRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) requirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = reviewrequirementsAction.getAllProjs();
			Vector<Project> activeProjs = reviewrequirementsAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CorrectRequirementsAction) {
			CorrectRequirementsAction correctrequirementsAction = (CorrectRequirementsAction) action;

			// Emp participant:
			Vector<Employee> emps = correctrequirementsAction.getAllEmps();
			Vector<Employee> activeEmps = correctrequirementsAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// RequirementsDoc participant:
			Vector<Artifact> requirementsdocs = correctrequirementsAction
					.getAllRequirementsDocs();
			Vector<Artifact> activeRequirementsDocs = correctrequirementsAction
					.getAllActiveRequirementsDocs();
			for (int i = 0; i < requirementsdocs.size(); i++) {
				Artifact requirementsdoc = requirementsdocs.get(i);
				data[index][0] = "RequirementsDoc";
				if (requirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentRequirementsDoc = (RequirementsDocument) requirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentRequirementsDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeRequirementsDocs.size(); j++) {
						Artifact activeRequirementsDoc = activeRequirementsDocs
								.get(j);
						if ((activeRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) requirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = correctrequirementsAction.getAllProjs();
			Vector<Project> activeProjs = correctrequirementsAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// RequirementsCaptureTool participant:
			Vector<Tool> requirementscapturetools = correctrequirementsAction
					.getAllRequirementsCaptureTools();
			Vector<Tool> activeRequirementsCaptureTools = correctrequirementsAction
					.getAllActiveRequirementsCaptureTools();
			for (int i = 0; i < requirementscapturetools.size(); i++) {
				Tool requirementscapturetool = requirementscapturetools.get(i);
				data[index][0] = "RequirementsCaptureTool";
				if (requirementscapturetool instanceof RequirementsCaptureTool) {
					RequirementsCaptureTool requirementscapturetoolRequirementsCaptureTool = (RequirementsCaptureTool) requirementscapturetool;
					data[index][1] = "RequirementsCaptureTool Tool "
							+ requirementscapturetoolRequirementsCaptureTool
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeRequirementsCaptureTools.size(); j++) {
						Tool activeRequirementsCaptureTool = activeRequirementsCaptureTools
								.get(j);
						if ((activeRequirementsCaptureTool instanceof RequirementsCaptureTool)
								&& ((RequirementsCaptureTool) activeRequirementsCaptureTool)
										.getName()
										.equals(((RequirementsCaptureTool) requirementscapturetool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CreateDesignAction) {
			CreateDesignAction createdesignAction = (CreateDesignAction) action;

			// Emp participant:
			Vector<Employee> emps = createdesignAction.getAllEmps();
			Vector<Employee> activeEmps = createdesignAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DesignDoc participant:
			Vector<Artifact> designdocs = createdesignAction.getAllDesignDocs();
			Vector<Artifact> activeDesignDocs = createdesignAction
					.getAllActiveDesignDocs();
			for (int i = 0; i < designdocs.size(); i++) {
				Artifact designdoc = designdocs.get(i);
				data[index][0] = "DesignDoc";
				if (designdoc instanceof DesignDocument) {
					DesignDocument designdocumentDesignDoc = (DesignDocument) designdoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDesignDocs.size(); j++) {
						Artifact activeDesignDoc = activeDesignDocs.get(j);
						if ((activeDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeDesignDoc).getName()
										.equals(((DesignDocument) designdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = createdesignAction.getAllProjs();
			Vector<Project> activeProjs = createdesignAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = createdesignAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = createdesignAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DesignEnvironment participant:
			Vector<Tool> designenvironments = createdesignAction
					.getAllDesignEnvironments();
			Vector<Tool> activeDesignEnvironments = createdesignAction
					.getAllActiveDesignEnvironments();
			for (int i = 0; i < designenvironments.size(); i++) {
				Tool designenvironment = designenvironments.get(i);
				data[index][0] = "DesignEnvironment";
				if (designenvironment instanceof DesignEnvironment) {
					DesignEnvironment designenvironmentDesignEnvironment = (DesignEnvironment) designenvironment;
					data[index][1] = "DesignEnvironment Tool "
							+ designenvironmentDesignEnvironment.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDesignEnvironments.size(); j++) {
						Tool activeDesignEnvironment = activeDesignEnvironments
								.get(j);
						if ((activeDesignEnvironment instanceof DesignEnvironment)
								&& ((DesignEnvironment) activeDesignEnvironment)
										.getName()
										.equals(((DesignEnvironment) designenvironment)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedCodeDoc participant:
			Vector<Artifact> associatedcodedocs = createdesignAction
					.getAllAssociatedCodeDocs();
			Vector<Artifact> activeAssociatedCodeDocs = createdesignAction
					.getAllActiveAssociatedCodeDocs();
			for (int i = 0; i < associatedcodedocs.size(); i++) {
				Artifact associatedcodedoc = associatedcodedocs.get(i);
				data[index][0] = "AssociatedCodeDoc";
				if (associatedcodedoc instanceof Code) {
					Code codeAssociatedCodeDoc = (Code) associatedcodedoc;
					data[index][1] = "Code Artifact "
							+ codeAssociatedCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedCodeDocs.size(); j++) {
						Artifact activeAssociatedCodeDoc = activeAssociatedCodeDocs
								.get(j);
						if ((activeAssociatedCodeDoc instanceof Code)
								&& ((Code) activeAssociatedCodeDoc).getName()
										.equals(((Code) associatedcodedoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof ReviewDesignAction) {
			ReviewDesignAction reviewdesignAction = (ReviewDesignAction) action;

			// Emp participant:
			Vector<Employee> emps = reviewdesignAction.getAllEmps();
			Vector<Employee> activeEmps = reviewdesignAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DesignDoc participant:
			Vector<Artifact> designdocs = reviewdesignAction.getAllDesignDocs();
			Vector<Artifact> activeDesignDocs = reviewdesignAction
					.getAllActiveDesignDocs();
			for (int i = 0; i < designdocs.size(); i++) {
				Artifact designdoc = designdocs.get(i);
				data[index][0] = "DesignDoc";
				if (designdoc instanceof DesignDocument) {
					DesignDocument designdocumentDesignDoc = (DesignDocument) designdoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDesignDocs.size(); j++) {
						Artifact activeDesignDoc = activeDesignDocs.get(j);
						if ((activeDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeDesignDoc).getName()
										.equals(((DesignDocument) designdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = reviewdesignAction.getAllProjs();
			Vector<Project> activeProjs = reviewdesignAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = reviewdesignAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = reviewdesignAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CorrectDesignAction) {
			CorrectDesignAction correctdesignAction = (CorrectDesignAction) action;

			// Emp participant:
			Vector<Employee> emps = correctdesignAction.getAllEmps();
			Vector<Employee> activeEmps = correctdesignAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DesignDoc participant:
			Vector<Artifact> designdocs = correctdesignAction
					.getAllDesignDocs();
			Vector<Artifact> activeDesignDocs = correctdesignAction
					.getAllActiveDesignDocs();
			for (int i = 0; i < designdocs.size(); i++) {
				Artifact designdoc = designdocs.get(i);
				data[index][0] = "DesignDoc";
				if (designdoc instanceof DesignDocument) {
					DesignDocument designdocumentDesignDoc = (DesignDocument) designdoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDesignDocs.size(); j++) {
						Artifact activeDesignDoc = activeDesignDocs.get(j);
						if ((activeDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeDesignDoc).getName()
										.equals(((DesignDocument) designdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = correctdesignAction.getAllProjs();
			Vector<Project> activeProjs = correctdesignAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = correctdesignAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = correctdesignAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DesignEnvironment participant:
			Vector<Tool> designenvironments = correctdesignAction
					.getAllDesignEnvironments();
			Vector<Tool> activeDesignEnvironments = correctdesignAction
					.getAllActiveDesignEnvironments();
			for (int i = 0; i < designenvironments.size(); i++) {
				Tool designenvironment = designenvironments.get(i);
				data[index][0] = "DesignEnvironment";
				if (designenvironment instanceof DesignEnvironment) {
					DesignEnvironment designenvironmentDesignEnvironment = (DesignEnvironment) designenvironment;
					data[index][1] = "DesignEnvironment Tool "
							+ designenvironmentDesignEnvironment.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDesignEnvironments.size(); j++) {
						Tool activeDesignEnvironment = activeDesignEnvironments
								.get(j);
						if ((activeDesignEnvironment instanceof DesignEnvironment)
								&& ((DesignEnvironment) activeDesignEnvironment)
										.getName()
										.equals(((DesignEnvironment) designenvironment)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CreateCodeAction) {
			CreateCodeAction createcodeAction = (CreateCodeAction) action;

			// Emp participant:
			Vector<Employee> emps = createcodeAction.getAllEmps();
			Vector<Employee> activeEmps = createcodeAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// CodeDoc participant:
			Vector<Artifact> codedocs = createcodeAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = createcodeAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = createcodeAction.getAllProjs();
			Vector<Project> activeProjs = createcodeAction.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = createcodeAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = createcodeAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDocument participant:
			Vector<Artifact> associateddesigndocuments = createcodeAction
					.getAllAssociatedDesignDocuments();
			Vector<Artifact> activeAssociatedDesignDocuments = createcodeAction
					.getAllActiveAssociatedDesignDocuments();
			for (int i = 0; i < associateddesigndocuments.size(); i++) {
				Artifact associateddesigndocument = associateddesigndocuments
						.get(i);
				data[index][0] = "AssociatedDesignDocument";
				if (associateddesigndocument instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDocument = (DesignDocument) associateddesigndocument;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDocument.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocuments.size(); j++) {
						Artifact activeAssociatedDesignDocument = activeAssociatedDesignDocuments
								.get(j);
						if ((activeAssociatedDesignDocument instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDocument)
										.getName()
										.equals(((DesignDocument) associateddesigndocument)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DevelopmentEnvironment participant:
			Vector<Tool> developmentenvironments = createcodeAction
					.getAllDevelopmentEnvironments();
			Vector<Tool> activeDevelopmentEnvironments = createcodeAction
					.getAllActiveDevelopmentEnvironments();
			for (int i = 0; i < developmentenvironments.size(); i++) {
				Tool developmentenvironment = developmentenvironments.get(i);
				data[index][0] = "DevelopmentEnvironment";
				if (developmentenvironment instanceof IDE) {
					IDE ideDevelopmentEnvironment = (IDE) developmentenvironment;
					data[index][1] = "IDE Tool "
							+ ideDevelopmentEnvironment.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDevelopmentEnvironments.size(); j++) {
						Tool activeDevelopmentEnvironment = activeDevelopmentEnvironments
								.get(j);
						if ((activeDevelopmentEnvironment instanceof IDE)
								&& ((IDE) activeDevelopmentEnvironment)
										.getName().equals(
												((IDE) developmentenvironment)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedSystemTestPlan participant:
			Vector<Artifact> associatedsystemtestplans = createcodeAction
					.getAllAssociatedSystemTestPlans();
			Vector<Artifact> activeAssociatedSystemTestPlans = createcodeAction
					.getAllActiveAssociatedSystemTestPlans();
			for (int i = 0; i < associatedsystemtestplans.size(); i++) {
				Artifact associatedsystemtestplan = associatedsystemtestplans
						.get(i);
				data[index][0] = "AssociatedSystemTestPlan";
				if (associatedsystemtestplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanAssociatedSystemTestPlan = (SystemTestPlan) associatedsystemtestplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanAssociatedSystemTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedSystemTestPlans.size(); j++) {
						Artifact activeAssociatedSystemTestPlan = activeAssociatedSystemTestPlans
								.get(j);
						if ((activeAssociatedSystemTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeAssociatedSystemTestPlan)
										.getName()
										.equals(((SystemTestPlan) associatedsystemtestplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof InspectCodeAction) {
			InspectCodeAction inspectcodeAction = (InspectCodeAction) action;

			// Emp participant:
			Vector<Employee> emps = inspectcodeAction.getAllEmps();
			Vector<Employee> activeEmps = inspectcodeAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// CodeDoc participant:
			Vector<Artifact> codedocs = inspectcodeAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = inspectcodeAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = inspectcodeAction.getAllProjs();
			Vector<Project> activeProjs = inspectcodeAction.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = inspectcodeAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = inspectcodeAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDoc participant:
			Vector<Artifact> associateddesigndocs = inspectcodeAction
					.getAllAssociatedDesignDocs();
			Vector<Artifact> activeAssociatedDesignDocs = inspectcodeAction
					.getAllActiveAssociatedDesignDocs();
			for (int i = 0; i < associateddesigndocs.size(); i++) {
				Artifact associateddesigndoc = associateddesigndocs.get(i);
				data[index][0] = "AssociatedDesignDoc";
				if (associateddesigndoc instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDoc = (DesignDocument) associateddesigndoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocs.size(); j++) {
						Artifact activeAssociatedDesignDoc = activeAssociatedDesignDocs
								.get(j);
						if ((activeAssociatedDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDoc)
										.getName()
										.equals(((DesignDocument) associateddesigndoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CorrectCodeAction) {
			CorrectCodeAction correctcodeAction = (CorrectCodeAction) action;

			// Emp participant:
			Vector<Employee> emps = correctcodeAction.getAllEmps();
			Vector<Employee> activeEmps = correctcodeAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// CodeDoc participant:
			Vector<Artifact> codedocs = correctcodeAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = correctcodeAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = correctcodeAction.getAllProjs();
			Vector<Project> activeProjs = correctcodeAction.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = correctcodeAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = correctcodeAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDoc participant:
			Vector<Artifact> associateddesigndocs = correctcodeAction
					.getAllAssociatedDesignDocs();
			Vector<Artifact> activeAssociatedDesignDocs = correctcodeAction
					.getAllActiveAssociatedDesignDocs();
			for (int i = 0; i < associateddesigndocs.size(); i++) {
				Artifact associateddesigndoc = associateddesigndocs.get(i);
				data[index][0] = "AssociatedDesignDoc";
				if (associateddesigndoc instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDoc = (DesignDocument) associateddesigndoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocs.size(); j++) {
						Artifact activeAssociatedDesignDoc = activeAssociatedDesignDocs
								.get(j);
						if ((activeAssociatedDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDoc)
										.getName()
										.equals(((DesignDocument) associateddesigndoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DevelopmentEnvironment participant:
			Vector<Tool> developmentenvironments = correctcodeAction
					.getAllDevelopmentEnvironments();
			Vector<Tool> activeDevelopmentEnvironments = correctcodeAction
					.getAllActiveDevelopmentEnvironments();
			for (int i = 0; i < developmentenvironments.size(); i++) {
				Tool developmentenvironment = developmentenvironments.get(i);
				data[index][0] = "DevelopmentEnvironment";
				if (developmentenvironment instanceof IDE) {
					IDE ideDevelopmentEnvironment = (IDE) developmentenvironment;
					data[index][1] = "IDE Tool "
							+ ideDevelopmentEnvironment.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDevelopmentEnvironments.size(); j++) {
						Tool activeDevelopmentEnvironment = activeDevelopmentEnvironments
								.get(j);
						if ((activeDevelopmentEnvironment instanceof IDE)
								&& ((IDE) activeDevelopmentEnvironment)
										.getName().equals(
												((IDE) developmentenvironment)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof IntegrateCodeAction) {
			IntegrateCodeAction integratecodeAction = (IntegrateCodeAction) action;

			// Emp participant:
			Vector<Employee> emps = integratecodeAction.getAllEmps();
			Vector<Employee> activeEmps = integratecodeAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// CodeDoc participant:
			Vector<Artifact> codedocs = integratecodeAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = integratecodeAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = integratecodeAction.getAllProjs();
			Vector<Project> activeProjs = integratecodeAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = integratecodeAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = integratecodeAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDoc participant:
			Vector<Artifact> associateddesigndocs = integratecodeAction
					.getAllAssociatedDesignDocs();
			Vector<Artifact> activeAssociatedDesignDocs = integratecodeAction
					.getAllActiveAssociatedDesignDocs();
			for (int i = 0; i < associateddesigndocs.size(); i++) {
				Artifact associateddesigndoc = associateddesigndocs.get(i);
				data[index][0] = "AssociatedDesignDoc";
				if (associateddesigndoc instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDoc = (DesignDocument) associateddesigndoc;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocs.size(); j++) {
						Artifact activeAssociatedDesignDoc = activeAssociatedDesignDocs
								.get(j);
						if ((activeAssociatedDesignDoc instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDoc)
										.getName()
										.equals(((DesignDocument) associateddesigndoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// DevelopmentEnvironment participant:
			Vector<Tool> developmentenvironments = integratecodeAction
					.getAllDevelopmentEnvironments();
			Vector<Tool> activeDevelopmentEnvironments = integratecodeAction
					.getAllActiveDevelopmentEnvironments();
			for (int i = 0; i < developmentenvironments.size(); i++) {
				Tool developmentenvironment = developmentenvironments.get(i);
				data[index][0] = "DevelopmentEnvironment";
				if (developmentenvironment instanceof IDE) {
					IDE ideDevelopmentEnvironment = (IDE) developmentenvironment;
					data[index][1] = "IDE Tool "
							+ ideDevelopmentEnvironment.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeDevelopmentEnvironments.size(); j++) {
						Tool activeDevelopmentEnvironment = activeDevelopmentEnvironments
								.get(j);
						if ((activeDevelopmentEnvironment instanceof IDE)
								&& ((IDE) activeDevelopmentEnvironment)
										.getName().equals(
												((IDE) developmentenvironment)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof SystemTestAction) {
			SystemTestAction systemtestAction = (SystemTestAction) action;

			// CodeDoc participant:
			Vector<Artifact> codedocs = systemtestAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = systemtestAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = systemtestAction.getAllProjs();
			Vector<Project> activeProjs = systemtestAction.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Emp participant:
			Vector<Employee> emps = systemtestAction.getAllEmps();
			Vector<Employee> activeEmps = systemtestAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedSystemTestPlan participant:
			Vector<Artifact> associatedsystemtestplans = systemtestAction
					.getAllAssociatedSystemTestPlans();
			Vector<Artifact> activeAssociatedSystemTestPlans = systemtestAction
					.getAllActiveAssociatedSystemTestPlans();
			for (int i = 0; i < associatedsystemtestplans.size(); i++) {
				Artifact associatedsystemtestplan = associatedsystemtestplans
						.get(i);
				data[index][0] = "AssociatedSystemTestPlan";
				if (associatedsystemtestplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanAssociatedSystemTestPlan = (SystemTestPlan) associatedsystemtestplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanAssociatedSystemTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedSystemTestPlans.size(); j++) {
						Artifact activeAssociatedSystemTestPlan = activeAssociatedSystemTestPlans
								.get(j);
						if ((activeAssociatedSystemTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeAssociatedSystemTestPlan)
										.getName()
										.equals(((SystemTestPlan) associatedsystemtestplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// TestingTool participant:
			Vector<Tool> testingtools = systemtestAction.getAllTestingTools();
			Vector<Tool> activeTestingTools = systemtestAction
					.getAllActiveTestingTools();
			for (int i = 0; i < testingtools.size(); i++) {
				Tool testingtool = testingtools.get(i);
				data[index][0] = "TestingTool";
				if (testingtool instanceof AutomatedTestingTool) {
					AutomatedTestingTool automatedtestingtoolTestingTool = (AutomatedTestingTool) testingtool;
					data[index][1] = "AutomatedTestingTool Tool "
							+ automatedtestingtoolTestingTool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeTestingTools.size(); j++) {
						Tool activeTestingTool = activeTestingTools.get(j);
						if ((activeTestingTool instanceof AutomatedTestingTool)
								&& ((AutomatedTestingTool) activeTestingTool)
										.getName()
										.equals(((AutomatedTestingTool) testingtool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CreateSystemTestPlanAction) {
			CreateSystemTestPlanAction createsystemtestplanAction = (CreateSystemTestPlanAction) action;

			// Emp participant:
			Vector<Employee> emps = createsystemtestplanAction.getAllEmps();
			Vector<Employee> activeEmps = createsystemtestplanAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedCodeDoc participant:
			Vector<Artifact> associatedcodedocs = createsystemtestplanAction
					.getAllAssociatedCodeDocs();
			Vector<Artifact> activeAssociatedCodeDocs = createsystemtestplanAction
					.getAllActiveAssociatedCodeDocs();
			for (int i = 0; i < associatedcodedocs.size(); i++) {
				Artifact associatedcodedoc = associatedcodedocs.get(i);
				data[index][0] = "AssociatedCodeDoc";
				if (associatedcodedoc instanceof Code) {
					Code codeAssociatedCodeDoc = (Code) associatedcodedoc;
					data[index][1] = "Code Artifact "
							+ codeAssociatedCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedCodeDocs.size(); j++) {
						Artifact activeAssociatedCodeDoc = activeAssociatedCodeDocs
								.get(j);
						if ((activeAssociatedCodeDoc instanceof Code)
								&& ((Code) activeAssociatedCodeDoc).getName()
										.equals(((Code) associatedcodedoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = createsystemtestplanAction.getAllProjs();
			Vector<Project> activeProjs = createsystemtestplanAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// SystemTestPlanDoc participant:
			Vector<Artifact> systemtestplandocs = createsystemtestplanAction
					.getAllSystemTestPlanDocs();
			Vector<Artifact> activeSystemTestPlanDocs = createsystemtestplanAction
					.getAllActiveSystemTestPlanDocs();
			for (int i = 0; i < systemtestplandocs.size(); i++) {
				Artifact systemtestplandoc = systemtestplandocs.get(i);
				data[index][0] = "SystemTestPlanDoc";
				if (systemtestplandoc instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanSystemTestPlanDoc = (SystemTestPlan) systemtestplandoc;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanSystemTestPlanDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSystemTestPlanDocs.size(); j++) {
						Artifact activeSystemTestPlanDoc = activeSystemTestPlanDocs
								.get(j);
						if ((activeSystemTestPlanDoc instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeSystemTestPlanDoc)
										.getName()
										.equals(((SystemTestPlan) systemtestplandoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = createsystemtestplanAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = createsystemtestplanAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// TestingTool participant:
			Vector<Tool> testingtools = createsystemtestplanAction
					.getAllTestingTools();
			Vector<Tool> activeTestingTools = createsystemtestplanAction
					.getAllActiveTestingTools();
			for (int i = 0; i < testingtools.size(); i++) {
				Tool testingtool = testingtools.get(i);
				data[index][0] = "TestingTool";
				if (testingtool instanceof AutomatedTestingTool) {
					AutomatedTestingTool automatedtestingtoolTestingTool = (AutomatedTestingTool) testingtool;
					data[index][1] = "AutomatedTestingTool Tool "
							+ automatedtestingtoolTestingTool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeTestingTools.size(); j++) {
						Tool activeTestingTool = activeTestingTools.get(j);
						if ((activeTestingTool instanceof AutomatedTestingTool)
								&& ((AutomatedTestingTool) activeTestingTool)
										.getName()
										.equals(((AutomatedTestingTool) testingtool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof ReviewSystemTestPlanAction) {
			ReviewSystemTestPlanAction reviewsystemtestplanAction = (ReviewSystemTestPlanAction) action;

			// Emp participant:
			Vector<Employee> emps = reviewsystemtestplanAction.getAllEmps();
			Vector<Employee> activeEmps = reviewsystemtestplanAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// TestPlan participant:
			Vector<Artifact> testplans = reviewsystemtestplanAction
					.getAllTestPlans();
			Vector<Artifact> activeTestPlans = reviewsystemtestplanAction
					.getAllActiveTestPlans();
			for (int i = 0; i < testplans.size(); i++) {
				Artifact testplan = testplans.get(i);
				data[index][0] = "TestPlan";
				if (testplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanTestPlan = (SystemTestPlan) testplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeTestPlans.size(); j++) {
						Artifact activeTestPlan = activeTestPlans.get(j);
						if ((activeTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeTestPlan).getName()
										.equals(((SystemTestPlan) testplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = reviewsystemtestplanAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = reviewsystemtestplanAction.getAllProjs();
			Vector<Project> activeProjs = reviewsystemtestplanAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof CorrectSystemTestPlanAction) {
			CorrectSystemTestPlanAction correctsystemtestplanAction = (CorrectSystemTestPlanAction) action;

			// Emp participant:
			Vector<Employee> emps = correctsystemtestplanAction.getAllEmps();
			Vector<Employee> activeEmps = correctsystemtestplanAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// TestPlan participant:
			Vector<Artifact> testplans = correctsystemtestplanAction
					.getAllTestPlans();
			Vector<Artifact> activeTestPlans = correctsystemtestplanAction
					.getAllActiveTestPlans();
			for (int i = 0; i < testplans.size(); i++) {
				Artifact testplan = testplans.get(i);
				data[index][0] = "TestPlan";
				if (testplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanTestPlan = (SystemTestPlan) testplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeTestPlans.size(); j++) {
						Artifact activeTestPlan = activeTestPlans.get(j);
						if ((activeTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeTestPlan).getName()
										.equals(((SystemTestPlan) testplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDoc participant:
			Vector<Artifact> associatedrequirementsdocs = correctsystemtestplanAction
					.getAllAssociatedRequirementsDocs();
			Vector<Artifact> activeAssociatedRequirementsDocs = correctsystemtestplanAction
					.getAllActiveAssociatedRequirementsDocs();
			for (int i = 0; i < associatedrequirementsdocs.size(); i++) {
				Artifact associatedrequirementsdoc = associatedrequirementsdocs
						.get(i);
				data[index][0] = "AssociatedRequirementsDoc";
				if (associatedrequirementsdoc instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDoc = (RequirementsDocument) associatedrequirementsdoc;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDoc
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocs.size(); j++) {
						Artifact activeAssociatedRequirementsDoc = activeAssociatedRequirementsDocs
								.get(j);
						if ((activeAssociatedRequirementsDoc instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDoc)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdoc)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = correctsystemtestplanAction.getAllProjs();
			Vector<Project> activeProjs = correctsystemtestplanAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// TestingTool participant:
			Vector<Tool> testingtools = correctsystemtestplanAction
					.getAllTestingTools();
			Vector<Tool> activeTestingTools = correctsystemtestplanAction
					.getAllActiveTestingTools();
			for (int i = 0; i < testingtools.size(); i++) {
				Tool testingtool = testingtools.get(i);
				data[index][0] = "TestingTool";
				if (testingtool instanceof AutomatedTestingTool) {
					AutomatedTestingTool automatedtestingtoolTestingTool = (AutomatedTestingTool) testingtool;
					data[index][1] = "AutomatedTestingTool Tool "
							+ automatedtestingtoolTestingTool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeTestingTools.size(); j++) {
						Tool activeTestingTool = activeTestingTools.get(j);
						if ((activeTestingTool instanceof AutomatedTestingTool)
								&& ((AutomatedTestingTool) activeTestingTool)
										.getName()
										.equals(((AutomatedTestingTool) testingtool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof DeliverProductAction) {
			DeliverProductAction deliverproductAction = (DeliverProductAction) action;

			// Emp participant:
			Vector<Employee> emps = deliverproductAction.getAllEmps();
			Vector<Employee> activeEmps = deliverproductAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = deliverproductAction.getAllProjs();
			Vector<Project> activeProjs = deliverproductAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// CodeDoc participant:
			Vector<Artifact> codedocs = deliverproductAction.getAllCodeDocs();
			Vector<Artifact> activeCodeDocs = deliverproductAction
					.getAllActiveCodeDocs();
			for (int i = 0; i < codedocs.size(); i++) {
				Artifact codedoc = codedocs.get(i);
				data[index][0] = "CodeDoc";
				if (codedoc instanceof Code) {
					Code codeCodeDoc = (Code) codedoc;
					data[index][1] = "Code Artifact " + codeCodeDoc.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCodeDocs.size(); j++) {
						Artifact activeCodeDoc = activeCodeDocs.get(j);
						if ((activeCodeDoc instanceof Code)
								&& ((Code) activeCodeDoc).getName().equals(
										((Code) codedoc).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Cust participant:
			Vector<Customer> custs = deliverproductAction.getAllCusts();
			Vector<Customer> activeCusts = deliverproductAction
					.getAllActiveCusts();
			for (int i = 0; i < custs.size(); i++) {
				Customer cust = custs.get(i);
				data[index][0] = "Cust";
				if (cust instanceof ACustomer) {
					ACustomer acustomerCust = (ACustomer) cust;
					data[index][1] = "aCustomer Customer "
							+ acustomerCust.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCusts.size(); j++) {
						Customer activeCust = activeCusts.get(j);
						if ((activeCust instanceof ACustomer)
								&& ((ACustomer) activeCust).getName().equals(
										((ACustomer) cust).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof BreakAction) {
			BreakAction breakAction = (BreakAction) action;

			// Breaker participant:
			Vector<Employee> breakers = breakAction.getAllBreakers();
			Vector<Employee> activeBreakers = breakAction
					.getAllActiveBreakers();
			for (int i = 0; i < breakers.size(); i++) {
				Employee breaker = breakers.get(i);
				data[index][0] = "Breaker";
				if (breaker instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerBreaker = (SoftwareEngineer) breaker;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerBreaker.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeBreakers.size(); j++) {
						Employee activeBreaker = activeBreakers.get(j);
						if ((activeBreaker instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeBreaker).getName()
										.equals(((SoftwareEngineer) breaker)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof GetSickAction) {
			GetSickAction getsickAction = (GetSickAction) action;

			// SickPerson participant:
			Vector<Employee> sickpersons = getsickAction.getAllSickPersons();
			Vector<Employee> activeSickPersons = getsickAction
					.getAllActiveSickPersons();
			for (int i = 0; i < sickpersons.size(); i++) {
				Employee sickperson = sickpersons.get(i);
				data[index][0] = "SickPerson";
				if (sickperson instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerSickPerson = (SoftwareEngineer) sickperson;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerSickPerson.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSickPersons.size(); j++) {
						Employee activeSickPerson = activeSickPersons.get(j);
						if ((activeSickPerson instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeSickPerson)
										.getName().equals(
												((SoftwareEngineer) sickperson)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof QuitAction) {
			QuitAction quitAction = (QuitAction) action;

			// Quitter participant:
			Vector<Employee> quitters = quitAction.getAllQuitters();
			Vector<Employee> activeQuitters = quitAction.getAllActiveQuitters();
			for (int i = 0; i < quitters.size(); i++) {
				Employee quitter = quitters.get(i);
				data[index][0] = "Quitter";
				if (quitter instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerQuitter = (SoftwareEngineer) quitter;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerQuitter.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeQuitters.size(); j++) {
						Employee activeQuitter = activeQuitters.get(j);
						if ((activeQuitter instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeQuitter).getName()
										.equals(((SoftwareEngineer) quitter)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof IntroduceNewRequirementsAction) {
			IntroduceNewRequirementsAction introducenewrequirementsAction = (IntroduceNewRequirementsAction) action;

			// Cust participant:
			Vector<Customer> custs = introducenewrequirementsAction
					.getAllCusts();
			Vector<Customer> activeCusts = introducenewrequirementsAction
					.getAllActiveCusts();
			for (int i = 0; i < custs.size(); i++) {
				Customer cust = custs.get(i);
				data[index][0] = "Cust";
				if (cust instanceof ACustomer) {
					ACustomer acustomerCust = (ACustomer) cust;
					data[index][1] = "aCustomer Customer "
							+ acustomerCust.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeCusts.size(); j++) {
						Customer activeCust = activeCusts.get(j);
						if ((activeCust instanceof ACustomer)
								&& ((ACustomer) activeCust).getName().equals(
										((ACustomer) cust).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedRequirementsDocument participant:
			Vector<Artifact> associatedrequirementsdocuments = introducenewrequirementsAction
					.getAllAssociatedRequirementsDocuments();
			Vector<Artifact> activeAssociatedRequirementsDocuments = introducenewrequirementsAction
					.getAllActiveAssociatedRequirementsDocuments();
			for (int i = 0; i < associatedrequirementsdocuments.size(); i++) {
				Artifact associatedrequirementsdocument = associatedrequirementsdocuments
						.get(i);
				data[index][0] = "AssociatedRequirementsDocument";
				if (associatedrequirementsdocument instanceof RequirementsDocument) {
					RequirementsDocument requirementsdocumentAssociatedRequirementsDocument = (RequirementsDocument) associatedrequirementsdocument;
					data[index][1] = "RequirementsDocument Artifact "
							+ requirementsdocumentAssociatedRequirementsDocument
									.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedRequirementsDocuments
							.size(); j++) {
						Artifact activeAssociatedRequirementsDocument = activeAssociatedRequirementsDocuments
								.get(j);
						if ((activeAssociatedRequirementsDocument instanceof RequirementsDocument)
								&& ((RequirementsDocument) activeAssociatedRequirementsDocument)
										.getName()
										.equals(((RequirementsDocument) associatedrequirementsdocument)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = introducenewrequirementsAction
					.getAllProjs();
			Vector<Project> activeProjs = introducenewrequirementsAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// EmpWOverheadText participant:
			Vector<Employee> empwoverheadtexts = introducenewrequirementsAction
					.getAllEmpWOverheadTexts();
			Vector<Employee> activeEmpWOverheadTexts = introducenewrequirementsAction
					.getAllActiveEmpWOverheadTexts();
			for (int i = 0; i < empwoverheadtexts.size(); i++) {
				Employee empwoverheadtext = empwoverheadtexts.get(i);
				data[index][0] = "EmpWOverheadText";
				if (empwoverheadtext instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmpWOverheadText = (SoftwareEngineer) empwoverheadtext;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmpWOverheadText.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmpWOverheadTexts.size(); j++) {
						Employee activeEmpWOverheadText = activeEmpWOverheadTexts
								.get(j);
						if ((activeEmpWOverheadText instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmpWOverheadText)
										.getName()
										.equals(((SoftwareEngineer) empwoverheadtext)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedCode participant:
			Vector<Artifact> associatedcodes = introducenewrequirementsAction
					.getAllAssociatedCodes();
			Vector<Artifact> activeAssociatedCodes = introducenewrequirementsAction
					.getAllActiveAssociatedCodes();
			for (int i = 0; i < associatedcodes.size(); i++) {
				Artifact associatedcode = associatedcodes.get(i);
				data[index][0] = "AssociatedCode";
				if (associatedcode instanceof Code) {
					Code codeAssociatedCode = (Code) associatedcode;
					data[index][1] = "Code Artifact "
							+ codeAssociatedCode.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedCodes.size(); j++) {
						Artifact activeAssociatedCode = activeAssociatedCodes
								.get(j);
						if ((activeAssociatedCode instanceof Code)
								&& ((Code) activeAssociatedCode).getName()
										.equals(((Code) associatedcode)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedDesignDocument participant:
			Vector<Artifact> associateddesigndocuments = introducenewrequirementsAction
					.getAllAssociatedDesignDocuments();
			Vector<Artifact> activeAssociatedDesignDocuments = introducenewrequirementsAction
					.getAllActiveAssociatedDesignDocuments();
			for (int i = 0; i < associateddesigndocuments.size(); i++) {
				Artifact associateddesigndocument = associateddesigndocuments
						.get(i);
				data[index][0] = "AssociatedDesignDocument";
				if (associateddesigndocument instanceof DesignDocument) {
					DesignDocument designdocumentAssociatedDesignDocument = (DesignDocument) associateddesigndocument;
					data[index][1] = "DesignDocument Artifact "
							+ designdocumentAssociatedDesignDocument.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedDesignDocuments.size(); j++) {
						Artifact activeAssociatedDesignDocument = activeAssociatedDesignDocuments
								.get(j);
						if ((activeAssociatedDesignDocument instanceof DesignDocument)
								&& ((DesignDocument) activeAssociatedDesignDocument)
										.getName()
										.equals(((DesignDocument) associateddesigndocument)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// AssociatedSystemTestPlan participant:
			Vector<Artifact> associatedsystemtestplans = introducenewrequirementsAction
					.getAllAssociatedSystemTestPlans();
			Vector<Artifact> activeAssociatedSystemTestPlans = introducenewrequirementsAction
					.getAllActiveAssociatedSystemTestPlans();
			for (int i = 0; i < associatedsystemtestplans.size(); i++) {
				Artifact associatedsystemtestplan = associatedsystemtestplans
						.get(i);
				data[index][0] = "AssociatedSystemTestPlan";
				if (associatedsystemtestplan instanceof SystemTestPlan) {
					SystemTestPlan systemtestplanAssociatedSystemTestPlan = (SystemTestPlan) associatedsystemtestplan;
					data[index][1] = "SystemTestPlan Artifact "
							+ systemtestplanAssociatedSystemTestPlan.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeAssociatedSystemTestPlans.size(); j++) {
						Artifact activeAssociatedSystemTestPlan = activeAssociatedSystemTestPlans
								.get(j);
						if ((activeAssociatedSystemTestPlan instanceof SystemTestPlan)
								&& ((SystemTestPlan) activeAssociatedSystemTestPlan)
										.getName()
										.equals(((SystemTestPlan) associatedsystemtestplan)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof ChangePayRateAction) {
			ChangePayRateAction changepayrateAction = (ChangePayRateAction) action;

			// Emp participant:
			Vector<Employee> emps = changepayrateAction.getAllEmps();
			Vector<Employee> activeEmps = changepayrateAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof GiveBonusAction) {
			GiveBonusAction givebonusAction = (GiveBonusAction) action;

			// Emp participant:
			Vector<Employee> emps = givebonusAction.getAllEmps();
			Vector<Employee> activeEmps = givebonusAction.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// ProjectWithBudget participant:
			Vector<Project> projectwithbudgets = givebonusAction
					.getAllProjectWithBudgets();
			Vector<Project> activeProjectWithBudgets = givebonusAction
					.getAllActiveProjectWithBudgets();
			for (int i = 0; i < projectwithbudgets.size(); i++) {
				Project projectwithbudget = projectwithbudgets.get(i);
				data[index][0] = "ProjectWithBudget";
				if (projectwithbudget instanceof SEProject) {
					SEProject seprojectProjectWithBudget = (SEProject) projectwithbudget;
					data[index][1] = "SEProject Project "
							+ seprojectProjectWithBudget.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjectWithBudgets.size(); j++) {
						Project activeProjectWithBudget = activeProjectWithBudgets
								.get(j);
						if ((activeProjectWithBudget instanceof SEProject)
								&& ((SEProject) activeProjectWithBudget)
										.getDescription().equals(
												((SEProject) projectwithbudget)
														.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof FireAction) {
			FireAction fireAction = (FireAction) action;

			// FiredPerson participant:
			Vector<Employee> firedpersons = fireAction.getAllFiredPersons();
			Vector<Employee> activeFiredPersons = fireAction
					.getAllActiveFiredPersons();
			for (int i = 0; i < firedpersons.size(); i++) {
				Employee firedperson = firedpersons.get(i);
				data[index][0] = "FiredPerson";
				if (firedperson instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerFiredPerson = (SoftwareEngineer) firedperson;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerFiredPerson.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeFiredPersons.size(); j++) {
						Employee activeFiredPerson = activeFiredPersons.get(j);
						if ((activeFiredPerson instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeFiredPerson)
										.getName()
										.equals(((SoftwareEngineer) firedperson)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof PurchaseToolAction) {
			PurchaseToolAction purchasetoolAction = (PurchaseToolAction) action;

			// EmpWhoseMenuClickedOn participant:
			Vector<Employee> empwhosemenuclickedons = purchasetoolAction
					.getAllEmpWhoseMenuClickedOns();
			Vector<Employee> activeEmpWhoseMenuClickedOns = purchasetoolAction
					.getAllActiveEmpWhoseMenuClickedOns();
			for (int i = 0; i < empwhosemenuclickedons.size(); i++) {
				Employee empwhosemenuclickedon = empwhosemenuclickedons.get(i);
				data[index][0] = "EmpWhoseMenuClickedOn";
				if (empwhosemenuclickedon instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmpWhoseMenuClickedOn = (SoftwareEngineer) empwhosemenuclickedon;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmpWhoseMenuClickedOn.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmpWhoseMenuClickedOns.size(); j++) {
						Employee activeEmpWhoseMenuClickedOn = activeEmpWhoseMenuClickedOns
								.get(j);
						if ((activeEmpWhoseMenuClickedOn instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmpWhoseMenuClickedOn)
										.getName()
										.equals(((SoftwareEngineer) empwhosemenuclickedon)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// SETool participant:
			Vector<Tool> setools = purchasetoolAction.getAllSETools();
			Vector<Tool> activeSETools = purchasetoolAction
					.getAllActiveSETools();
			for (int i = 0; i < setools.size(); i++) {
				Tool setool = setools.get(i);
				data[index][0] = "SETool";
				if (setool instanceof IDE) {
					IDE ideSETool = (IDE) setool;
					data[index][1] = "IDE Tool " + ideSETool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSETools.size(); j++) {
						Tool activeSETool = activeSETools.get(j);
						if ((activeSETool instanceof IDE)
								&& ((IDE) activeSETool).getName().equals(
										((IDE) setool).getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				if (setool instanceof RequirementsCaptureTool) {
					RequirementsCaptureTool requirementscapturetoolSETool = (RequirementsCaptureTool) setool;
					data[index][1] = "RequirementsCaptureTool Tool "
							+ requirementscapturetoolSETool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSETools.size(); j++) {
						Tool activeSETool = activeSETools.get(j);
						if ((activeSETool instanceof RequirementsCaptureTool)
								&& ((RequirementsCaptureTool) activeSETool)
										.getName()
										.equals(((RequirementsCaptureTool) setool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				if (setool instanceof AutomatedTestingTool) {
					AutomatedTestingTool automatedtestingtoolSETool = (AutomatedTestingTool) setool;
					data[index][1] = "AutomatedTestingTool Tool "
							+ automatedtestingtoolSETool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSETools.size(); j++) {
						Tool activeSETool = activeSETools.get(j);
						if ((activeSETool instanceof AutomatedTestingTool)
								&& ((AutomatedTestingTool) activeSETool)
										.getName().equals(
												((AutomatedTestingTool) setool)
														.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				if (setool instanceof DesignEnvironment) {
					DesignEnvironment designenvironmentSETool = (DesignEnvironment) setool;
					data[index][1] = "DesignEnvironment Tool "
							+ designenvironmentSETool.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeSETools.size(); j++) {
						Tool activeSETool = activeSETools.get(j);
						if ((activeSETool instanceof DesignEnvironment)
								&& ((DesignEnvironment) activeSETool).getName()
										.equals(((DesignEnvironment) setool)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Proj participant:
			Vector<Project> projs = purchasetoolAction.getAllProjs();
			Vector<Project> activeProjs = purchasetoolAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			SuggestedRequirementsPhaseDurationAction suggestedrequirementsphasedurationAction = (SuggestedRequirementsPhaseDurationAction) action;

			// Proj participant:
			Vector<Project> projs = suggestedrequirementsphasedurationAction
					.getAllProjs();
			Vector<Project> activeProjs = suggestedrequirementsphasedurationAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Emp participant:
			Vector<Employee> emps = suggestedrequirementsphasedurationAction
					.getAllEmps();
			Vector<Employee> activeEmps = suggestedrequirementsphasedurationAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			SuggestedDesignPhaseDurationAction suggesteddesignphasedurationAction = (SuggestedDesignPhaseDurationAction) action;

			// Proj participant:
			Vector<Project> projs = suggesteddesignphasedurationAction
					.getAllProjs();
			Vector<Project> activeProjs = suggesteddesignphasedurationAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Emp participant:
			Vector<Employee> emps = suggesteddesignphasedurationAction
					.getAllEmps();
			Vector<Employee> activeEmps = suggesteddesignphasedurationAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			SuggestedImplIntegrationPhaseDurationAction suggestedimplintegrationphasedurationAction = (SuggestedImplIntegrationPhaseDurationAction) action;

			// Proj participant:
			Vector<Project> projs = suggestedimplintegrationphasedurationAction
					.getAllProjs();
			Vector<Project> activeProjs = suggestedimplintegrationphasedurationAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Emp participant:
			Vector<Employee> emps = suggestedimplintegrationphasedurationAction
					.getAllEmps();
			Vector<Employee> activeEmps = suggestedimplintegrationphasedurationAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			SuggestedTestingPhaseDurationAction suggestedtestingphasedurationAction = (SuggestedTestingPhaseDurationAction) action;

			// Proj participant:
			Vector<Project> projs = suggestedtestingphasedurationAction
					.getAllProjs();
			Vector<Project> activeProjs = suggestedtestingphasedurationAction
					.getAllActiveProjs();
			for (int i = 0; i < projs.size(); i++) {
				Project proj = projs.get(i);
				data[index][0] = "Proj";
				if (proj instanceof SEProject) {
					SEProject seprojectProj = (SEProject) proj;
					data[index][1] = "SEProject Project "
							+ seprojectProj.getDescription();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeProjs.size(); j++) {
						Project activeProj = activeProjs.get(j);
						if ((activeProj instanceof SEProject)
								&& ((SEProject) activeProj).getDescription()
										.equals(((SEProject) proj)
												.getDescription())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
			// Emp participant:
			Vector<Employee> emps = suggestedtestingphasedurationAction
					.getAllEmps();
			Vector<Employee> activeEmps = suggestedtestingphasedurationAction
					.getAllActiveEmps();
			for (int i = 0; i < emps.size(); i++) {
				Employee emp = emps.get(i);
				data[index][0] = "Emp";
				if (emp instanceof SoftwareEngineer) {
					SoftwareEngineer softwareengineerEmp = (SoftwareEngineer) emp;
					data[index][1] = "SoftwareEngineer Employee "
							+ softwareengineerEmp.getName();

					// find out whether it's active or not:
					boolean active = false;
					for (int j = 0; j < activeEmps.size(); j++) {
						Employee activeEmp = activeEmps.get(j);
						if ((activeEmp instanceof SoftwareEngineer)
								&& ((SoftwareEngineer) activeEmp).getName()
										.equals(((SoftwareEngineer) emp)
												.getName())) {
							active = true;
							break;
						}
					}
					data[index][2] = active ? "Active" : "Inactive";
				}
				index++;
			}
		}
		return new JTable(data, columnNames);
	}

	// refreshes the description area with the selected trigger/destroyer
	private void refreshDescriptionArea(int trigOrDest) {
		String name = trigOrDest == TRIGGER ? (String) triggerList
				.getSelectedValue() : (String) destroyerList.getSelectedValue();
		if (name != null) {
			String text = "";
			if (action instanceof CreateRequirementsAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CREATEREQUIREMENTS_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CREATEREQUIREMENTS_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CREATEREQUIREMENTS_AUTODEST;
				}
			} else if (action instanceof ReviewRequirementsAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.REVIEWREQUIREMENTS_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.REVIEWREQUIREMENTS_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.REVIEWREQUIREMENTS_AUTODEST;
				}
			} else if (action instanceof CorrectRequirementsAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CORRECTREQUIREMENTS_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CORRECTREQUIREMENTS_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CORRECTREQUIREMENTS_AUTODEST;
				}
			} else if (action instanceof CreateDesignAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CREATEDESIGN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CREATEDESIGN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CREATEDESIGN_AUTODEST;
				}
			} else if (action instanceof ReviewDesignAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.REVIEWDESIGN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.REVIEWDESIGN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.REVIEWDESIGN_AUTODEST;
				}
			} else if (action instanceof CorrectDesignAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CORRECTDESIGN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CORRECTDESIGN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CORRECTDESIGN_AUTODEST;
				}
			} else if (action instanceof CreateCodeAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CREATECODE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CREATECODE_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CREATECODE_AUTODEST;
				}
			} else if (action instanceof InspectCodeAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.INSPECTCODE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.INSPECTCODE_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.INSPECTCODE_AUTODEST;
				}
			} else if (action instanceof CorrectCodeAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CORRECTCODE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CORRECTCODE_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CORRECTCODE_AUTODEST;
				}
			} else if (action instanceof IntegrateCodeAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.INTEGRATECODE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.INTEGRATECODE_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.INTEGRATECODE_AUTODEST;
				}
			} else if (action instanceof SystemTestAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.SYSTEMTEST_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.SYSTEMTEST_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.SYSTEMTEST_AUTODEST;
				}
			} else if (action instanceof CreateSystemTestPlanAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CREATESYSTEMTESTPLAN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CREATESYSTEMTESTPLAN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CREATESYSTEMTESTPLAN_AUTODEST;
				}
			} else if (action instanceof ReviewSystemTestPlanAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.REVIEWSYSTEMTESTPLAN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.REVIEWSYSTEMTESTPLAN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.REVIEWSYSTEMTESTPLAN_AUTODEST;
				}
			} else if (action instanceof CorrectSystemTestPlanAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CORRECTSYSTEMTESTPLAN_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("UserDest")) {
					text = DestroyerDescriptions.CORRECTSYSTEMTESTPLAN_USERDEST;
				} else if (trigOrDest == DESTROYER && name.equals("AutoDest")) {
					text = DestroyerDescriptions.CORRECTSYSTEMTESTPLAN_AUTODEST;
				}
			} else if (action instanceof DeliverProductAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.DELIVERPRODUCT_TRIGA;
				}
			} else if (action instanceof BreakAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.BREAK_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.BREAK_DESTA;
				}
			} else if (action instanceof GetSickAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.GETSICK_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.GETSICK_DESTA;
				}
			} else if (action instanceof QuitAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.QUIT_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestO")) {
					text = DestroyerDescriptions.QUIT_DESTO;
				}
			} else if (action instanceof IntroduceNewRequirementsAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.INTRODUCENEWREQUIREMENTS_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.INTRODUCENEWREQUIREMENTS_DESTA;
				}
			} else if (action instanceof ChangePayRateAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.CHANGEPAYRATE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.CHANGEPAYRATE_DESTA;
				}
			} else if (action instanceof GiveBonusAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.GIVEBONUS_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.GIVEBONUS_DESTA;
				}
			} else if (action instanceof FireAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.FIRE_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.FIRE_DESTA;
				}
			} else if (action instanceof PurchaseToolAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("TrigA")) {
					text = TriggerDescriptions.PURCHASETOOL_TRIGA;
				}
				if (trigOrDest == DESTROYER && name.equals("DestA")) {
					text = DestroyerDescriptions.PURCHASETOOL_DESTA;
				}
			} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
					text = TriggerDescriptions.SUGGESTEDREQUIREMENTSPHASEDURATION_AUTOTRIG;
				}
				if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
					text = DestroyerDescriptions.SUGGESTEDREQUIREMENTSPHASEDURATION_TIMEDDEST;
				}
			} else if (action instanceof SuggestedDesignPhaseDurationAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
					text = TriggerDescriptions.SUGGESTEDDESIGNPHASEDURATION_AUTOTRIG;
				}
				if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
					text = DestroyerDescriptions.SUGGESTEDDESIGNPHASEDURATION_TIMEDDEST;
				}
			} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
					text = TriggerDescriptions.SUGGESTEDIMPLINTEGRATIONPHASEDURATION_AUTOTRIG;
				}
				if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
					text = DestroyerDescriptions.SUGGESTEDIMPLINTEGRATIONPHASEDURATION_TIMEDDEST;
				}
			} else if (action instanceof SuggestedTestingPhaseDurationAction) {
				// triggers:
				if (trigOrDest == TRIGGER && name.equals("AutoTrig")) {
					text = TriggerDescriptions.SUGGESTEDTESTINGPHASEDURATION_AUTOTRIG;
				}
				if (trigOrDest == DESTROYER && name.equals("TimedDest")) {
					text = DestroyerDescriptions.SUGGESTEDTESTINGPHASEDURATION_TIMEDDEST;
				}
			}
			descriptionArea.setText(text);
			descriptionArea.setCaretPosition(0);
		}
	}
}