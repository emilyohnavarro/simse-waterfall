/* File generated by: simse.codegenerator.explanatorytoolgenerator.ActionGraphGenerator */
package simse.explanatorytool;

import simse.adts.actions.*;
import simse.SimSE;
import simse.state.Clock;
import simse.state.logger.Logger;
import simse.state.State;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.labels.AbstractXYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

public class ActionGraph extends JFrame implements ChartMouseListener,
		MouseListener, ActionListener {
	private ArrayList<State> log;
	private String[] actionNames;
	private JFreeChart chart; // chart object
	private ChartPanel chartPanel;
	private JMenuItem newBranchItem;
	private JSeparator separator;
	private int lastRightClickedX; // last x-val that was right-clicked on
	private XYSeriesCollection dataset;
	private Branch branch; // branch from which this action graph is generated
	private Hashtable<Integer, XYSeries> series = new Hashtable<Integer, XYSeries>(); // a
																						// Hashtable
																						// to
																						// map
																						// action
																						// ids
																						// to
																						// XYSeries
	private ArrayList<String> indices = new ArrayList<String>(); // an ArrayList
																	// to map
																	// action
																	// indices
																	// to series
																	// names
	private int actionIndex = 1; // counter for used action indices to be used
									// for their y-values
	private int createrequirementsIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> createrequirementsIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// CreateRequirements
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int reviewrequirementsIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> reviewrequirementsIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// ReviewRequirements
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int correctrequirementsIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> correctrequirementsIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// CorrectRequirements
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int createdesignIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> createdesignIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// CreateDesign
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int reviewdesignIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> reviewdesignIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// ReviewDesign
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int correctdesignIndex = 1; // index to be used for labeling
										// multiple actions of the same type
	private ArrayList<Integer> correctdesignIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// CorrectDesign
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int createcodeIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> createcodeIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// CreateCode
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int inspectcodeIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> inspectcodeIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// InspectCode
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int correctcodeIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> correctcodeIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// CorrectCode
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int integratecodeIndex = 1; // index to be used for labeling
										// multiple actions of the same type
	private ArrayList<Integer> integratecodeIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// IntegrateCode
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int systemtestIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> systemtestIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// SystemTest
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int createsystemtestplanIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> createsystemtestplanIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// CreateSystemTestPlan
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int reviewsystemtestplanIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> reviewsystemtestplanIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// ReviewSystemTestPlan
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int correctsystemtestplanIndex = 1; // index to be used for labeling
												// multiple actions of the same
												// type
	private ArrayList<Integer> correctsystemtestplanIndices = new ArrayList<Integer>(); // an
																						// ArrayList
																						// to
																						// map
																						// indices
																						// for
																						// CorrectSystemTestPlan
																						// Action
																						// labels
																						// to
																						// action
																						// ids
	private int deliverproductIndex = 1; // index to be used for labeling
											// multiple actions of the same type
	private ArrayList<Integer> deliverproductIndices = new ArrayList<Integer>(); // an
																					// ArrayList
																					// to
																					// map
																					// indices
																					// for
																					// DeliverProduct
																					// Action
																					// labels
																					// to
																					// action
																					// ids
	private int breakIndex = 1; // index to be used for labeling multiple
								// actions of the same type
	private ArrayList<Integer> breakIndices = new ArrayList<Integer>(); // an
																		// ArrayList
																		// to
																		// map
																		// indices
																		// for
																		// Break
																		// Action
																		// labels
																		// to
																		// action
																		// ids
	private int getsickIndex = 1; // index to be used for labeling multiple
									// actions of the same type
	private ArrayList<Integer> getsickIndices = new ArrayList<Integer>(); // an
																			// ArrayList
																			// to
																			// map
																			// indices
																			// for
																			// GetSick
																			// Action
																			// labels
																			// to
																			// action
																			// ids
	private int quitIndex = 1; // index to be used for labeling multiple actions
								// of the same type
	private ArrayList<Integer> quitIndices = new ArrayList<Integer>(); // an
																		// ArrayList
																		// to
																		// map
																		// indices
																		// for
																		// Quit
																		// Action
																		// labels
																		// to
																		// action
																		// ids
	private int introducenewrequirementsIndex = 1; // index to be used for
													// labeling multiple actions
													// of the same type
	private ArrayList<Integer> introducenewrequirementsIndices = new ArrayList<Integer>(); // an
																							// ArrayList
																							// to
																							// map
																							// indices
																							// for
																							// IntroduceNewRequirements
																							// Action
																							// labels
																							// to
																							// action
																							// ids
	private int changepayrateIndex = 1; // index to be used for labeling
										// multiple actions of the same type
	private ArrayList<Integer> changepayrateIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// ChangePayRate
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int givebonusIndex = 1; // index to be used for labeling multiple
									// actions of the same type
	private ArrayList<Integer> givebonusIndices = new ArrayList<Integer>(); // an
																			// ArrayList
																			// to
																			// map
																			// indices
																			// for
																			// GiveBonus
																			// Action
																			// labels
																			// to
																			// action
																			// ids
	private int fireIndex = 1; // index to be used for labeling multiple actions
								// of the same type
	private ArrayList<Integer> fireIndices = new ArrayList<Integer>(); // an
																		// ArrayList
																		// to
																		// map
																		// indices
																		// for
																		// Fire
																		// Action
																		// labels
																		// to
																		// action
																		// ids
	private int purchasetoolIndex = 1; // index to be used for labeling multiple
										// actions of the same type
	private ArrayList<Integer> purchasetoolIndices = new ArrayList<Integer>(); // an
																				// ArrayList
																				// to
																				// map
																				// indices
																				// for
																				// PurchaseTool
																				// Action
																				// labels
																				// to
																				// action
																				// ids
	private int suggestedrequirementsphasedurationIndex = 1; // index to be used
																// for labeling
																// multiple
																// actions of
																// the same type
	private ArrayList<Integer> suggestedrequirementsphasedurationIndices = new ArrayList<Integer>(); // an
																										// ArrayList
																										// to
																										// map
																										// indices
																										// for
																										// SuggestedRequirementsPhaseDuration
																										// Action
																										// labels
																										// to
																										// action
																										// ids
	private int suggesteddesignphasedurationIndex = 1; // index to be used for
														// labeling multiple
														// actions of the same
														// type
	private ArrayList<Integer> suggesteddesignphasedurationIndices = new ArrayList<Integer>(); // an
																								// ArrayList
																								// to
																								// map
																								// indices
																								// for
																								// SuggestedDesignPhaseDuration
																								// Action
																								// labels
																								// to
																								// action
																								// ids
	private int suggestedimplintegrationphasedurationIndex = 1; // index to be
																// used for
																// labeling
																// multiple
																// actions of
																// the same type
	private ArrayList<Integer> suggestedimplintegrationphasedurationIndices = new ArrayList<Integer>(); // an
																										// ArrayList
																										// to
																										// map
																										// indices
																										// for
																										// SuggestedImplIntegrationPhaseDuration
																										// Action
																										// labels
																										// to
																										// action
																										// ids
	private int suggestedtestingphasedurationIndex = 1; // index to be used for
														// labeling multiple
														// actions of the same
														// type
	private ArrayList<Integer> suggestedtestingphasedurationIndices = new ArrayList<Integer>(); // an
																								// ArrayList
																								// to
																								// map
																								// indices
																								// for
																								// SuggestedTestingPhaseDuration
																								// Action
																								// labels
																								// to
																								// action
																								// ids

	public ActionGraph(ArrayList<State> log, String[] actionNames,
			boolean showChart, Branch branch) {
		super();
		String title = "Action Graph";
		if (branch.getName() != null) {
			title = title.concat(" - " + branch.getName());
		}
		setTitle(title);
		this.log = log;
		this.actionNames = actionNames;
		lastRightClickedX = 0;

		// add dummy entries for 0 positions (since we don't want to display a
		// series on the 0 line):
		createrequirementsIndices.add(0, new Integer(-1));
		reviewrequirementsIndices.add(0, new Integer(-1));
		correctrequirementsIndices.add(0, new Integer(-1));
		createdesignIndices.add(0, new Integer(-1));
		reviewdesignIndices.add(0, new Integer(-1));
		correctdesignIndices.add(0, new Integer(-1));
		createcodeIndices.add(0, new Integer(-1));
		inspectcodeIndices.add(0, new Integer(-1));
		correctcodeIndices.add(0, new Integer(-1));
		integratecodeIndices.add(0, new Integer(-1));
		systemtestIndices.add(0, new Integer(-1));
		createsystemtestplanIndices.add(0, new Integer(-1));
		reviewsystemtestplanIndices.add(0, new Integer(-1));
		correctsystemtestplanIndices.add(0, new Integer(-1));
		deliverproductIndices.add(0, new Integer(-1));
		breakIndices.add(0, new Integer(-1));
		getsickIndices.add(0, new Integer(-1));
		quitIndices.add(0, new Integer(-1));
		introducenewrequirementsIndices.add(0, new Integer(-1));
		changepayrateIndices.add(0, new Integer(-1));
		givebonusIndices.add(0, new Integer(-1));
		fireIndices.add(0, new Integer(-1));
		purchasetoolIndices.add(0, new Integer(-1));
		suggestedrequirementsphasedurationIndices.add(0, new Integer(-1));
		suggesteddesignphasedurationIndices.add(0, new Integer(-1));
		suggestedimplintegrationphasedurationIndices.add(0, new Integer(-1));
		suggestedtestingphasedurationIndices.add(0, new Integer(-1));

		// create dataset:
		dataset = new XYSeriesCollection();
		XYDataset xydataset = createDataset();
		chart = createChart(xydataset);
		chartPanel = new ChartPanel(chart);
		chartPanel.addChartMouseListener(this);
		chartPanel.addMouseListener(this);
		chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
		setContentPane(chartPanel);
		newBranchItem = new JMenuItem("Start new branch from here");
		newBranchItem.addActionListener(this);
		separator = new JSeparator();
		pack();
		RefineryUtilities.centerFrameOnScreen(this);
		setVisible(showChart);
	}

	// Creates the dataset for this graph
	private XYDataset createDataset() {
		// add a dummy entry for index 0:
		indices.add(0, "Action");
		// go through each action:
		for (int i = 0; i < actionNames.length; i++) {
			if (actionNames[i].equals("CreateRequirements")) {
				// go through the CreateRequirementsActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CreateRequirementsAction> createrequirementsActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions();

					// go through each CreateRequirementsAction:
					for (int k = 0; k < createrequirementsActions.size(); k++) {
						CreateRequirementsAction action = createrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("ReviewRequirements")) {
				// go through the ReviewRequirementsActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<ReviewRequirementsAction> reviewrequirementsActions = state
							.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions();

					// go through each ReviewRequirementsAction:
					for (int k = 0; k < reviewrequirementsActions.size(); k++) {
						ReviewRequirementsAction action = reviewrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CorrectRequirements")) {
				// go through the CorrectRequirementsActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CorrectRequirementsAction> correctrequirementsActions = state
							.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions();

					// go through each CorrectRequirementsAction:
					for (int k = 0; k < correctrequirementsActions.size(); k++) {
						CorrectRequirementsAction action = correctrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CreateDesign")) {
				// go through the CreateDesignActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CreateDesignAction> createdesignActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions();

					// go through each CreateDesignAction:
					for (int k = 0; k < createdesignActions.size(); k++) {
						CreateDesignAction action = createdesignActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("ReviewDesign")) {
				// go through the ReviewDesignActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<ReviewDesignAction> reviewdesignActions = state
							.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions();

					// go through each ReviewDesignAction:
					for (int k = 0; k < reviewdesignActions.size(); k++) {
						ReviewDesignAction action = reviewdesignActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CorrectDesign")) {
				// go through the CorrectDesignActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CorrectDesignAction> correctdesignActions = state
							.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions();

					// go through each CorrectDesignAction:
					for (int k = 0; k < correctdesignActions.size(); k++) {
						CorrectDesignAction action = correctdesignActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CreateCode")) {
				// go through the CreateCodeActionStateRepository for each clock
				// tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CreateCodeAction> createcodeActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions();

					// go through each CreateCodeAction:
					for (int k = 0; k < createcodeActions.size(); k++) {
						CreateCodeAction action = createcodeActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("InspectCode")) {
				// go through the InspectCodeActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<InspectCodeAction> inspectcodeActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions();

					// go through each InspectCodeAction:
					for (int k = 0; k < inspectcodeActions.size(); k++) {
						InspectCodeAction action = inspectcodeActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CorrectCode")) {
				// go through the CorrectCodeActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CorrectCodeAction> correctcodeActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions();

					// go through each CorrectCodeAction:
					for (int k = 0; k < correctcodeActions.size(); k++) {
						CorrectCodeAction action = correctcodeActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("IntegrateCode")) {
				// go through the IntegrateCodeActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<IntegrateCodeAction> integratecodeActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions();

					// go through each IntegrateCodeAction:
					for (int k = 0; k < integratecodeActions.size(); k++) {
						IntegrateCodeAction action = integratecodeActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("SystemTest")) {
				// go through the SystemTestActionStateRepository for each clock
				// tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<SystemTestAction> systemtestActions = state
							.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions();

					// go through each SystemTestAction:
					for (int k = 0; k < systemtestActions.size(); k++) {
						SystemTestAction action = systemtestActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CreateSystemTestPlan")) {
				// go through the CreateSystemTestPlanActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CreateSystemTestPlanAction> createsystemtestplanActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each CreateSystemTestPlanAction:
					for (int k = 0; k < createsystemtestplanActions.size(); k++) {
						CreateSystemTestPlanAction action = createsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("ReviewSystemTestPlan")) {
				// go through the ReviewSystemTestPlanActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<ReviewSystemTestPlanAction> reviewsystemtestplanActions = state
							.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each ReviewSystemTestPlanAction:
					for (int k = 0; k < reviewsystemtestplanActions.size(); k++) {
						ReviewSystemTestPlanAction action = reviewsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("CorrectSystemTestPlan")) {
				// go through the CorrectSystemTestPlanActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<CorrectSystemTestPlanAction> correctsystemtestplanActions = state
							.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each CorrectSystemTestPlanAction:
					for (int k = 0; k < correctsystemtestplanActions.size(); k++) {
						CorrectSystemTestPlanAction action = correctsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("DeliverProduct")) {
				// go through the DeliverProductActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<DeliverProductAction> deliverproductActions = state
							.getActionStateRepository()
							.getDeliverProductActionStateRepository()
							.getAllActions();

					// go through each DeliverProductAction:
					for (int k = 0; k < deliverproductActions.size(); k++) {
						DeliverProductAction action = deliverproductActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("Break")) {
				// go through the BreakActionStateRepository for each clock
				// tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<BreakAction> breakActions = state
							.getActionStateRepository()
							.getBreakActionStateRepository().getAllActions();

					// go through each BreakAction:
					for (int k = 0; k < breakActions.size(); k++) {
						BreakAction action = breakActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("GetSick")) {
				// go through the GetSickActionStateRepository for each clock
				// tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<GetSickAction> getsickActions = state
							.getActionStateRepository()
							.getGetSickActionStateRepository().getAllActions();

					// go through each GetSickAction:
					for (int k = 0; k < getsickActions.size(); k++) {
						GetSickAction action = getsickActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("Quit")) {
				// go through the QuitActionStateRepository for each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<QuitAction> quitActions = state
							.getActionStateRepository()
							.getQuitActionStateRepository().getAllActions();

					// go through each QuitAction:
					for (int k = 0; k < quitActions.size(); k++) {
						QuitAction action = quitActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("IntroduceNewRequirements")) {
				// go through the IntroduceNewRequirementsActionStateRepository
				// for each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<IntroduceNewRequirementsAction> introducenewrequirementsActions = state
							.getActionStateRepository()
							.getIntroduceNewRequirementsActionStateRepository()
							.getAllActions();

					// go through each IntroduceNewRequirementsAction:
					for (int k = 0; k < introducenewrequirementsActions.size(); k++) {
						IntroduceNewRequirementsAction action = introducenewrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("ChangePayRate")) {
				// go through the ChangePayRateActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<ChangePayRateAction> changepayrateActions = state
							.getActionStateRepository()
							.getChangePayRateActionStateRepository()
							.getAllActions();

					// go through each ChangePayRateAction:
					for (int k = 0; k < changepayrateActions.size(); k++) {
						ChangePayRateAction action = changepayrateActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("GiveBonus")) {
				// go through the GiveBonusActionStateRepository for each clock
				// tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<GiveBonusAction> givebonusActions = state
							.getActionStateRepository()
							.getGiveBonusActionStateRepository()
							.getAllActions();

					// go through each GiveBonusAction:
					for (int k = 0; k < givebonusActions.size(); k++) {
						GiveBonusAction action = givebonusActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("Fire")) {
				// go through the FireActionStateRepository for each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<FireAction> fireActions = state
							.getActionStateRepository()
							.getFireActionStateRepository().getAllActions();

					// go through each FireAction:
					for (int k = 0; k < fireActions.size(); k++) {
						FireAction action = fireActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("PurchaseTool")) {
				// go through the PurchaseToolActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<PurchaseToolAction> purchasetoolActions = state
							.getActionStateRepository()
							.getPurchaseToolActionStateRepository()
							.getAllActions();

					// go through each PurchaseToolAction:
					for (int k = 0; k < purchasetoolActions.size(); k++) {
						PurchaseToolAction action = purchasetoolActions.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i]
					.equals("SuggestedRequirementsPhaseDuration")) {
				// go through the
				// SuggestedRequirementsPhaseDurationActionStateRepository for
				// each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedRequirementsPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedRequirementsPhaseDurationAction:
					for (int k = 0; k < suggestedrequirementsphasedurationActions
							.size(); k++) {
						SuggestedRequirementsPhaseDurationAction action = suggestedrequirementsphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("SuggestedDesignPhaseDuration")) {
				// go through the
				// SuggestedDesignPhaseDurationActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedDesignPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedDesignPhaseDurationAction:
					for (int k = 0; k < suggesteddesignphasedurationActions
							.size(); k++) {
						SuggestedDesignPhaseDurationAction action = suggesteddesignphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i]
					.equals("SuggestedImplIntegrationPhaseDuration")) {
				// go through the
				// SuggestedImplIntegrationPhaseDurationActionStateRepository
				// for each clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each
					// SuggestedImplIntegrationPhaseDurationAction:
					for (int k = 0; k < suggestedimplintegrationphasedurationActions
							.size(); k++) {
						SuggestedImplIntegrationPhaseDurationAction action = suggestedimplintegrationphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

			else if (actionNames[i].equals("SuggestedTestingPhaseDuration")) {
				// go through the
				// SuggestedTestingPhaseDurationActionStateRepository for each
				// clock tick:
				for (int j = 0; j < log.size(); j++) {
					State state = log.get(j);
					Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedTestingPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedTestingPhaseDurationAction:
					for (int k = 0; k < suggestedtestingphasedurationActions
							.size(); k++) {
						SuggestedTestingPhaseDurationAction action = suggestedtestingphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, j);
					}
				}
			}

		}
		return dataset;
	}

	// Creates the chart for this graph
	private JFreeChart createChart(XYDataset dataset) {
		// create the chart:
		JFreeChart chart = ChartFactory.createXYLineChart("Action Graph",
				"Clock Ticks", null, dataset, PlotOrientation.VERTICAL, true,
				true, false);
		chart.setBackgroundPaint(Color.WHITE);
		XYPlot plot = (XYPlot) chart.getPlot();
		plot.getRenderer().setToolTipGenerator(
				new ActionGraphToolTipGenerator());
		plot.setBackgroundPaint(new Color(0xFF, 0xFF, 0xCC));
		plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
		plot.setDomainGridlinePaint(Color.BLACK);
		plot.setRangeGridlinePaint(Color.BLACK);
		ValueAxis rangeAxis = plot.getRangeAxis();
		rangeAxis.setTickLabelsVisible(false);
		rangeAxis.setTickMarksVisible(false);
		rangeAxis.setAxisLineVisible(false);
		rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
		plot.getDomainAxis().setStandardTickUnits(
				NumberAxis.createIntegerTickUnits());
		XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot
				.getRenderer();
		renderer.setShapesVisible(true);
		renderer.setShapesFilled(true);

		// change the auto tick unit selection to integer units only:
		NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
		domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

		return chart;
	}

	private void updateSeries(simse.adts.actions.Action action, int clockTick) {
		// if a series has not been created for this action, create one:
		if (!series.containsKey(new Integer(action.getId()))) {
			XYSeries newSeries = null;
			String newSeriesName = "";
			if (action instanceof CreateRequirementsAction) {
				newSeriesName = "CreateRequirementsAction-"
						+ createrequirementsIndex;
				newSeries = new XYSeries(newSeriesName);
				createrequirementsIndices.add(createrequirementsIndex,
						new Integer(action.getId()));
				createrequirementsIndex++;
			} else if (action instanceof ReviewRequirementsAction) {
				newSeriesName = "ReviewRequirementsAction-"
						+ reviewrequirementsIndex;
				newSeries = new XYSeries(newSeriesName);
				reviewrequirementsIndices.add(reviewrequirementsIndex,
						new Integer(action.getId()));
				reviewrequirementsIndex++;
			} else if (action instanceof CorrectRequirementsAction) {
				newSeriesName = "CorrectRequirementsAction-"
						+ correctrequirementsIndex;
				newSeries = new XYSeries(newSeriesName);
				correctrequirementsIndices.add(correctrequirementsIndex,
						new Integer(action.getId()));
				correctrequirementsIndex++;
			} else if (action instanceof CreateDesignAction) {
				newSeriesName = "CreateDesignAction-" + createdesignIndex;
				newSeries = new XYSeries(newSeriesName);
				createdesignIndices.add(createdesignIndex,
						new Integer(action.getId()));
				createdesignIndex++;
			} else if (action instanceof ReviewDesignAction) {
				newSeriesName = "ReviewDesignAction-" + reviewdesignIndex;
				newSeries = new XYSeries(newSeriesName);
				reviewdesignIndices.add(reviewdesignIndex,
						new Integer(action.getId()));
				reviewdesignIndex++;
			} else if (action instanceof CorrectDesignAction) {
				newSeriesName = "CorrectDesignAction-" + correctdesignIndex;
				newSeries = new XYSeries(newSeriesName);
				correctdesignIndices.add(correctdesignIndex,
						new Integer(action.getId()));
				correctdesignIndex++;
			} else if (action instanceof CreateCodeAction) {
				newSeriesName = "CreateCodeAction-" + createcodeIndex;
				newSeries = new XYSeries(newSeriesName);
				createcodeIndices.add(createcodeIndex,
						new Integer(action.getId()));
				createcodeIndex++;
			} else if (action instanceof InspectCodeAction) {
				newSeriesName = "InspectCodeAction-" + inspectcodeIndex;
				newSeries = new XYSeries(newSeriesName);
				inspectcodeIndices.add(inspectcodeIndex,
						new Integer(action.getId()));
				inspectcodeIndex++;
			} else if (action instanceof CorrectCodeAction) {
				newSeriesName = "CorrectCodeAction-" + correctcodeIndex;
				newSeries = new XYSeries(newSeriesName);
				correctcodeIndices.add(correctcodeIndex,
						new Integer(action.getId()));
				correctcodeIndex++;
			} else if (action instanceof IntegrateCodeAction) {
				newSeriesName = "IntegrateCodeAction-" + integratecodeIndex;
				newSeries = new XYSeries(newSeriesName);
				integratecodeIndices.add(integratecodeIndex,
						new Integer(action.getId()));
				integratecodeIndex++;
			} else if (action instanceof SystemTestAction) {
				newSeriesName = "SystemTestAction-" + systemtestIndex;
				newSeries = new XYSeries(newSeriesName);
				systemtestIndices.add(systemtestIndex,
						new Integer(action.getId()));
				systemtestIndex++;
			} else if (action instanceof CreateSystemTestPlanAction) {
				newSeriesName = "CreateSystemTestPlanAction-"
						+ createsystemtestplanIndex;
				newSeries = new XYSeries(newSeriesName);
				createsystemtestplanIndices.add(createsystemtestplanIndex,
						new Integer(action.getId()));
				createsystemtestplanIndex++;
			} else if (action instanceof ReviewSystemTestPlanAction) {
				newSeriesName = "ReviewSystemTestPlanAction-"
						+ reviewsystemtestplanIndex;
				newSeries = new XYSeries(newSeriesName);
				reviewsystemtestplanIndices.add(reviewsystemtestplanIndex,
						new Integer(action.getId()));
				reviewsystemtestplanIndex++;
			} else if (action instanceof CorrectSystemTestPlanAction) {
				newSeriesName = "CorrectSystemTestPlanAction-"
						+ correctsystemtestplanIndex;
				newSeries = new XYSeries(newSeriesName);
				correctsystemtestplanIndices.add(correctsystemtestplanIndex,
						new Integer(action.getId()));
				correctsystemtestplanIndex++;
			} else if (action instanceof DeliverProductAction) {
				newSeriesName = "DeliverProductAction-" + deliverproductIndex;
				newSeries = new XYSeries(newSeriesName);
				deliverproductIndices.add(deliverproductIndex, new Integer(
						action.getId()));
				deliverproductIndex++;
			} else if (action instanceof BreakAction) {
				newSeriesName = "BreakAction-" + breakIndex;
				newSeries = new XYSeries(newSeriesName);
				breakIndices.add(breakIndex, new Integer(action.getId()));
				breakIndex++;
			} else if (action instanceof GetSickAction) {
				newSeriesName = "GetSickAction-" + getsickIndex;
				newSeries = new XYSeries(newSeriesName);
				getsickIndices.add(getsickIndex, new Integer(action.getId()));
				getsickIndex++;
			} else if (action instanceof QuitAction) {
				newSeriesName = "QuitAction-" + quitIndex;
				newSeries = new XYSeries(newSeriesName);
				quitIndices.add(quitIndex, new Integer(action.getId()));
				quitIndex++;
			} else if (action instanceof IntroduceNewRequirementsAction) {
				newSeriesName = "IntroduceNewRequirementsAction-"
						+ introducenewrequirementsIndex;
				newSeries = new XYSeries(newSeriesName);
				introducenewrequirementsIndices.add(
						introducenewrequirementsIndex,
						new Integer(action.getId()));
				introducenewrequirementsIndex++;
			} else if (action instanceof ChangePayRateAction) {
				newSeriesName = "ChangePayRateAction-" + changepayrateIndex;
				newSeries = new XYSeries(newSeriesName);
				changepayrateIndices.add(changepayrateIndex,
						new Integer(action.getId()));
				changepayrateIndex++;
			} else if (action instanceof GiveBonusAction) {
				newSeriesName = "GiveBonusAction-" + givebonusIndex;
				newSeries = new XYSeries(newSeriesName);
				givebonusIndices.add(givebonusIndex,
						new Integer(action.getId()));
				givebonusIndex++;
			} else if (action instanceof FireAction) {
				newSeriesName = "FireAction-" + fireIndex;
				newSeries = new XYSeries(newSeriesName);
				fireIndices.add(fireIndex, new Integer(action.getId()));
				fireIndex++;
			} else if (action instanceof PurchaseToolAction) {
				newSeriesName = "PurchaseToolAction-" + purchasetoolIndex;
				newSeries = new XYSeries(newSeriesName);
				purchasetoolIndices.add(purchasetoolIndex,
						new Integer(action.getId()));
				purchasetoolIndex++;
			} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
				newSeriesName = "SuggestedRequirementsPhaseDurationAction-"
						+ suggestedrequirementsphasedurationIndex;
				newSeries = new XYSeries(newSeriesName);
				suggestedrequirementsphasedurationIndices.add(
						suggestedrequirementsphasedurationIndex, new Integer(
								action.getId()));
				suggestedrequirementsphasedurationIndex++;
			} else if (action instanceof SuggestedDesignPhaseDurationAction) {
				newSeriesName = "SuggestedDesignPhaseDurationAction-"
						+ suggesteddesignphasedurationIndex;
				newSeries = new XYSeries(newSeriesName);
				suggesteddesignphasedurationIndices.add(
						suggesteddesignphasedurationIndex,
						new Integer(action.getId()));
				suggesteddesignphasedurationIndex++;
			} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
				newSeriesName = "SuggestedImplIntegrationPhaseDurationAction-"
						+ suggestedimplintegrationphasedurationIndex;
				newSeries = new XYSeries(newSeriesName);
				suggestedimplintegrationphasedurationIndices.add(
						suggestedimplintegrationphasedurationIndex,
						new Integer(action.getId()));
				suggestedimplintegrationphasedurationIndex++;
			} else if (action instanceof SuggestedTestingPhaseDurationAction) {
				newSeriesName = "SuggestedTestingPhaseDurationAction-"
						+ suggestedtestingphasedurationIndex;
				newSeries = new XYSeries(newSeriesName);
				suggestedtestingphasedurationIndices.add(
						suggestedtestingphasedurationIndex,
						new Integer(action.getId()));
				suggestedtestingphasedurationIndex++;
			}
			// add the data value to the series:
			newSeries.add(clockTick, actionIndex);

			// add the series to the Hashtable:
			series.put(new Integer(action.getId()), newSeries);

			// add the index entry to the ArrayList:
			indices.add(actionIndex, newSeriesName);
			dataset.addSeries(newSeries);

			// update the index for the next new action:
			actionIndex++;
		} else {
			XYSeries oldSeries = series.get(new Integer(action.getId()));
			int index = 0;
			if (action instanceof CreateRequirementsAction) {
				index = createrequirementsIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CreateRequirementsAction-" + index));
			} else if (action instanceof ReviewRequirementsAction) {
				index = reviewrequirementsIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("ReviewRequirementsAction-" + index));
			} else if (action instanceof CorrectRequirementsAction) {
				index = correctrequirementsIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CorrectRequirementsAction-" + index));
			} else if (action instanceof CreateDesignAction) {
				index = createdesignIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CreateDesignAction-" + index));
			} else if (action instanceof ReviewDesignAction) {
				index = reviewdesignIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("ReviewDesignAction-" + index));
			} else if (action instanceof CorrectDesignAction) {
				index = correctdesignIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CorrectDesignAction-" + index));
			} else if (action instanceof CreateCodeAction) {
				index = createcodeIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CreateCodeAction-" + index));
			} else if (action instanceof InspectCodeAction) {
				index = inspectcodeIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("InspectCodeAction-" + index));
			} else if (action instanceof CorrectCodeAction) {
				index = correctcodeIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CorrectCodeAction-" + index));
			} else if (action instanceof IntegrateCodeAction) {
				index = integratecodeIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("IntegrateCodeAction-" + index));
			} else if (action instanceof SystemTestAction) {
				index = systemtestIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("SystemTestAction-" + index));
			} else if (action instanceof CreateSystemTestPlanAction) {
				index = createsystemtestplanIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("CreateSystemTestPlanAction-" + index));
			} else if (action instanceof ReviewSystemTestPlanAction) {
				index = reviewsystemtestplanIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("ReviewSystemTestPlanAction-" + index));
			} else if (action instanceof CorrectSystemTestPlanAction) {
				index = correctsystemtestplanIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries
						.add(clockTick,
								indices.indexOf("CorrectSystemTestPlanAction-"
										+ index));
			} else if (action instanceof DeliverProductAction) {
				index = deliverproductIndices.indexOf(new Integer(action
						.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("DeliverProductAction-" + index));
			} else if (action instanceof BreakAction) {
				index = breakIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("BreakAction-" + index));
			} else if (action instanceof GetSickAction) {
				index = getsickIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("GetSickAction-" + index));
			} else if (action instanceof QuitAction) {
				index = quitIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries
						.add(clockTick, indices.indexOf("QuitAction-" + index));
			} else if (action instanceof IntroduceNewRequirementsAction) {
				index = introducenewrequirementsIndices.indexOf(new Integer(
						action.getId()));

				// add the data value to the series:
				oldSeries.add(
						clockTick,
						indices.indexOf("IntroduceNewRequirementsAction-"
								+ index));
			} else if (action instanceof ChangePayRateAction) {
				index = changepayrateIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("ChangePayRateAction-" + index));
			} else if (action instanceof GiveBonusAction) {
				index = givebonusIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("GiveBonusAction-" + index));
			} else if (action instanceof FireAction) {
				index = fireIndices.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries
						.add(clockTick, indices.indexOf("FireAction-" + index));
			} else if (action instanceof PurchaseToolAction) {
				index = purchasetoolIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick,
						indices.indexOf("PurchaseToolAction-" + index));
			} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
				index = suggestedrequirementsphasedurationIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick, indices
						.indexOf("SuggestedRequirementsPhaseDurationAction-"
								+ index));
			} else if (action instanceof SuggestedDesignPhaseDurationAction) {
				index = suggesteddesignphasedurationIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(
						clockTick,
						indices.indexOf("SuggestedDesignPhaseDurationAction-"
								+ index));
			} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
				index = suggestedimplintegrationphasedurationIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(clockTick, indices
						.indexOf("SuggestedImplIntegrationPhaseDurationAction-"
								+ index));
			} else if (action instanceof SuggestedTestingPhaseDurationAction) {
				index = suggestedtestingphasedurationIndices
						.indexOf(new Integer(action.getId()));

				// add the data value to the series:
				oldSeries.add(
						clockTick,
						indices.indexOf("SuggestedTestingPhaseDurationAction-"
								+ index));
			}
		}
	}

	// responds to LEFT mouse clicks on the chart
	public void chartMouseClicked(ChartMouseEvent event) {
		if (event.getTrigger().getButton() == MouseEvent.BUTTON1) { // left-click
			ChartEntity entity = event.getEntity();
			if ((entity != null) && (entity instanceof XYItemEntity)) {
				XYItemEntity xyEntity = (XYItemEntity) entity;

				// get the x-value of the action (clock tick):
				int xVal = (int) xyEntity.getDataset().getXValue(
						xyEntity.getSeriesIndex(), xyEntity.getItem());

				// get the y-value of the action (action index):
				int yVal = (int) xyEntity.getDataset().getYValue(
						xyEntity.getSeriesIndex(), xyEntity.getItem());

				// get the series name of the action:
				String seriesName = indices.get(yVal);

				// get the action id:
				int actionId = getIdOfActionWithSeriesName(seriesName);

				if (actionId > -1) { // valid action
					Action action = log.get(xVal).getActionStateRepository()
							.getActionWithId(actionId);
					if (action != null) {// bring up ActionInfo window:
						new ActionInfoWindow(this, seriesName, action, xVal);
					}
				}
			}
		}
	}

	public void chartMouseMoved(ChartMouseEvent event) {
	}

	// responds to RIGHT-clicks on the chart
	public void mouseReleased(MouseEvent me) {
		if (me.getButton() != MouseEvent.BUTTON1) { // not left-click
			XYPlot plot = chart.getXYPlot();
			Range domainRange = plot.getDataRange(plot.getDomainAxis());
			if (domainRange != null) { // chart is not blank
				Point2D pt = chartPanel.translateScreenToJava2D(new Point(me
						.getX(), me.getY()));
				ChartRenderingInfo info = this.chartPanel
						.getChartRenderingInfo();
				Rectangle2D dataArea = info.getPlotInfo().getDataArea();
				NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
				RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
				double chartX = domainAxis.java2DToValue(pt.getX(), dataArea,
						domainAxisEdge);
				lastRightClickedX = (int) Math.rint(chartX);
				if (domainRange != null
						&& lastRightClickedX >= domainRange.getLowerBound()
						&& lastRightClickedX <= domainRange.getUpperBound()) { // clicked
																				// within
																				// domain
																				// range
					if (chartPanel.getPopupMenu().getComponentIndex(
							newBranchItem) == -1) { // no new branch item on
													// menu currently
						chartPanel.getPopupMenu().add(separator);
						chartPanel.getPopupMenu().add(newBranchItem);
						chartPanel.getPopupMenu().pack();
						chartPanel.getPopupMenu().repaint();
					}
				} else { // clicked outside of domain range
					if (chartPanel.getPopupMenu().getComponentIndex(
							newBranchItem) >= 0) { // new branch item currently
													// on menu
						chartPanel.getPopupMenu().remove(newBranchItem);
						if (chartPanel.getPopupMenu().getComponentIndex(
								separator) >= 0) { // has separator
							chartPanel.getPopupMenu().remove(separator);
						}
						chartPanel.getPopupMenu().pack();
						chartPanel.getPopupMenu().repaint();
					}
				}
			}
		}
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseClicked(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == newBranchItem) {
			String newBranchName = JOptionPane.showInputDialog(null,
					"Please name this new game:", "Name New Game",
					JOptionPane.QUESTION_MESSAGE);
			if (newBranchName != null) {
				State tempState = (State) log.get(lastRightClickedX).clone();
				Logger tempLogger = new Logger(tempState, new ArrayList<State>(
						log.subList(0, lastRightClickedX)));
				Clock tempClock = new Clock(tempLogger, lastRightClickedX);
				tempState.setClock(tempClock);
				tempState.setLogger(tempLogger);
				SimSE.startNewBranch(tempState, new Branch(newBranchName,
						lastRightClickedX, tempClock.getTime(), branch, null));
			}
		}
	}

	// returns the id of the action that corresponds to the given series name
	private int getIdOfActionWithSeriesName(String seriesName) {
		Enumeration<Integer> keys = series.keys();
		while (keys.hasMoreElements()) {
			Integer id = keys.nextElement();
			XYSeries xys = series.get(id);
			if (xys.getKey().equals(seriesName)) {
				return id.intValue();
			}
		}
		return -1;
	}

	public void update() {
		if ((log.size() > 0) && (log.get(log.size() - 1) != null)) { // there is
																		// a log
																		// that
																		// has
																		// not
																		// been
																		// graphed
																		// yet
		// add a new end data point for each series:
		// go through each action:
			for (int i = 0; i < actionNames.length; i++) {
				if (actionNames[i].equals("CreateRequirements")) {
					// get the CreateRequirementsActionStateRepository for the
					// last clock tick:
					State state = log.get(log.size() - 1);
					Vector<CreateRequirementsAction> createrequirementsActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions();

					// go through each CreateRequirementsAction:
					for (int k = 0; k < createrequirementsActions.size(); k++) {
						CreateRequirementsAction action = createrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("ReviewRequirements")) {
					// get the ReviewRequirementsActionStateRepository for the
					// last clock tick:
					State state = log.get(log.size() - 1);
					Vector<ReviewRequirementsAction> reviewrequirementsActions = state
							.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions();

					// go through each ReviewRequirementsAction:
					for (int k = 0; k < reviewrequirementsActions.size(); k++) {
						ReviewRequirementsAction action = reviewrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CorrectRequirements")) {
					// get the CorrectRequirementsActionStateRepository for the
					// last clock tick:
					State state = log.get(log.size() - 1);
					Vector<CorrectRequirementsAction> correctrequirementsActions = state
							.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions();

					// go through each CorrectRequirementsAction:
					for (int k = 0; k < correctrequirementsActions.size(); k++) {
						CorrectRequirementsAction action = correctrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CreateDesign")) {
					// get the CreateDesignActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<CreateDesignAction> createdesignActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions();

					// go through each CreateDesignAction:
					for (int k = 0; k < createdesignActions.size(); k++) {
						CreateDesignAction action = createdesignActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("ReviewDesign")) {
					// get the ReviewDesignActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<ReviewDesignAction> reviewdesignActions = state
							.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions();

					// go through each ReviewDesignAction:
					for (int k = 0; k < reviewdesignActions.size(); k++) {
						ReviewDesignAction action = reviewdesignActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CorrectDesign")) {
					// get the CorrectDesignActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<CorrectDesignAction> correctdesignActions = state
							.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions();

					// go through each CorrectDesignAction:
					for (int k = 0; k < correctdesignActions.size(); k++) {
						CorrectDesignAction action = correctdesignActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CreateCode")) {
					// get the CreateCodeActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<CreateCodeAction> createcodeActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions();

					// go through each CreateCodeAction:
					for (int k = 0; k < createcodeActions.size(); k++) {
						CreateCodeAction action = createcodeActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("InspectCode")) {
					// get the InspectCodeActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<InspectCodeAction> inspectcodeActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions();

					// go through each InspectCodeAction:
					for (int k = 0; k < inspectcodeActions.size(); k++) {
						InspectCodeAction action = inspectcodeActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CorrectCode")) {
					// get the CorrectCodeActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<CorrectCodeAction> correctcodeActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions();

					// go through each CorrectCodeAction:
					for (int k = 0; k < correctcodeActions.size(); k++) {
						CorrectCodeAction action = correctcodeActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("IntegrateCode")) {
					// get the IntegrateCodeActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<IntegrateCodeAction> integratecodeActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions();

					// go through each IntegrateCodeAction:
					for (int k = 0; k < integratecodeActions.size(); k++) {
						IntegrateCodeAction action = integratecodeActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("SystemTest")) {
					// get the SystemTestActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<SystemTestAction> systemtestActions = state
							.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions();

					// go through each SystemTestAction:
					for (int k = 0; k < systemtestActions.size(); k++) {
						SystemTestAction action = systemtestActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CreateSystemTestPlan")) {
					// get the CreateSystemTestPlanActionStateRepository for the
					// last clock tick:
					State state = log.get(log.size() - 1);
					Vector<CreateSystemTestPlanAction> createsystemtestplanActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each CreateSystemTestPlanAction:
					for (int k = 0; k < createsystemtestplanActions.size(); k++) {
						CreateSystemTestPlanAction action = createsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("ReviewSystemTestPlan")) {
					// get the ReviewSystemTestPlanActionStateRepository for the
					// last clock tick:
					State state = log.get(log.size() - 1);
					Vector<ReviewSystemTestPlanAction> reviewsystemtestplanActions = state
							.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each ReviewSystemTestPlanAction:
					for (int k = 0; k < reviewsystemtestplanActions.size(); k++) {
						ReviewSystemTestPlanAction action = reviewsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("CorrectSystemTestPlan")) {
					// get the CorrectSystemTestPlanActionStateRepository for
					// the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<CorrectSystemTestPlanAction> correctsystemtestplanActions = state
							.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions();

					// go through each CorrectSystemTestPlanAction:
					for (int k = 0; k < correctsystemtestplanActions.size(); k++) {
						CorrectSystemTestPlanAction action = correctsystemtestplanActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("DeliverProduct")) {
					// get the DeliverProductActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<DeliverProductAction> deliverproductActions = state
							.getActionStateRepository()
							.getDeliverProductActionStateRepository()
							.getAllActions();

					// go through each DeliverProductAction:
					for (int k = 0; k < deliverproductActions.size(); k++) {
						DeliverProductAction action = deliverproductActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("Break")) {
					// get the BreakActionStateRepository for the last clock
					// tick:
					State state = log.get(log.size() - 1);
					Vector<BreakAction> breakActions = state
							.getActionStateRepository()
							.getBreakActionStateRepository().getAllActions();

					// go through each BreakAction:
					for (int k = 0; k < breakActions.size(); k++) {
						BreakAction action = breakActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("GetSick")) {
					// get the GetSickActionStateRepository for the last clock
					// tick:
					State state = log.get(log.size() - 1);
					Vector<GetSickAction> getsickActions = state
							.getActionStateRepository()
							.getGetSickActionStateRepository().getAllActions();

					// go through each GetSickAction:
					for (int k = 0; k < getsickActions.size(); k++) {
						GetSickAction action = getsickActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("Quit")) {
					// get the QuitActionStateRepository for the last clock
					// tick:
					State state = log.get(log.size() - 1);
					Vector<QuitAction> quitActions = state
							.getActionStateRepository()
							.getQuitActionStateRepository().getAllActions();

					// go through each QuitAction:
					for (int k = 0; k < quitActions.size(); k++) {
						QuitAction action = quitActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("IntroduceNewRequirements")) {
					// get the IntroduceNewRequirementsActionStateRepository for
					// the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<IntroduceNewRequirementsAction> introducenewrequirementsActions = state
							.getActionStateRepository()
							.getIntroduceNewRequirementsActionStateRepository()
							.getAllActions();

					// go through each IntroduceNewRequirementsAction:
					for (int k = 0; k < introducenewrequirementsActions.size(); k++) {
						IntroduceNewRequirementsAction action = introducenewrequirementsActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("ChangePayRate")) {
					// get the ChangePayRateActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<ChangePayRateAction> changepayrateActions = state
							.getActionStateRepository()
							.getChangePayRateActionStateRepository()
							.getAllActions();

					// go through each ChangePayRateAction:
					for (int k = 0; k < changepayrateActions.size(); k++) {
						ChangePayRateAction action = changepayrateActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("GiveBonus")) {
					// get the GiveBonusActionStateRepository for the last clock
					// tick:
					State state = log.get(log.size() - 1);
					Vector<GiveBonusAction> givebonusActions = state
							.getActionStateRepository()
							.getGiveBonusActionStateRepository()
							.getAllActions();

					// go through each GiveBonusAction:
					for (int k = 0; k < givebonusActions.size(); k++) {
						GiveBonusAction action = givebonusActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("Fire")) {
					// get the FireActionStateRepository for the last clock
					// tick:
					State state = log.get(log.size() - 1);
					Vector<FireAction> fireActions = state
							.getActionStateRepository()
							.getFireActionStateRepository().getAllActions();

					// go through each FireAction:
					for (int k = 0; k < fireActions.size(); k++) {
						FireAction action = fireActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i].equals("PurchaseTool")) {
					// get the PurchaseToolActionStateRepository for the last
					// clock tick:
					State state = log.get(log.size() - 1);
					Vector<PurchaseToolAction> purchasetoolActions = state
							.getActionStateRepository()
							.getPurchaseToolActionStateRepository()
							.getAllActions();

					// go through each PurchaseToolAction:
					for (int k = 0; k < purchasetoolActions.size(); k++) {
						PurchaseToolAction action = purchasetoolActions.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i]
						.equals("SuggestedRequirementsPhaseDuration")) {
					// get the
					// SuggestedRequirementsPhaseDurationActionStateRepository
					// for the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedRequirementsPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedRequirementsPhaseDurationAction:
					for (int k = 0; k < suggestedrequirementsphasedurationActions
							.size(); k++) {
						SuggestedRequirementsPhaseDurationAction action = suggestedrequirementsphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i]
						.equals("SuggestedDesignPhaseDuration")) {
					// get the SuggestedDesignPhaseDurationActionStateRepository
					// for the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedDesignPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedDesignPhaseDurationAction:
					for (int k = 0; k < suggesteddesignphasedurationActions
							.size(); k++) {
						SuggestedDesignPhaseDurationAction action = suggesteddesignphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i]
						.equals("SuggestedImplIntegrationPhaseDuration")) {
					// get the
					// SuggestedImplIntegrationPhaseDurationActionStateRepository
					// for the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each
					// SuggestedImplIntegrationPhaseDurationAction:
					for (int k = 0; k < suggestedimplintegrationphasedurationActions
							.size(); k++) {
						SuggestedImplIntegrationPhaseDurationAction action = suggestedimplintegrationphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				} else if (actionNames[i]
						.equals("SuggestedTestingPhaseDuration")) {
					// get the
					// SuggestedTestingPhaseDurationActionStateRepository for
					// the last clock tick:
					State state = log.get(log.size() - 1);
					Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationActions = state
							.getActionStateRepository()
							.getSuggestedTestingPhaseDurationActionStateRepository()
							.getAllActions();

					// go through each SuggestedTestingPhaseDurationAction:
					for (int k = 0; k < suggestedtestingphasedurationActions
							.size(); k++) {
						SuggestedTestingPhaseDurationAction action = suggestedtestingphasedurationActions
								.get(k);

						// update series:
						updateSeries(action, (log.size() - 1));
					}
				}
			}
		}
	}

	public XYPlot getXYPlot() {
		return chart.getXYPlot();
	}

	public class ActionGraphToolTipGenerator extends
			AbstractXYItemLabelGenerator implements XYToolTipGenerator {

		public ActionGraphToolTipGenerator() {
			super();
		}

		public String generateToolTip(XYDataset dataset, int series, int item) {
			return new String(dataset.getSeriesKey(series)
					+ ": click for Action info");
		}
	}
}