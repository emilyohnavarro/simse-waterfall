/* File generated by: simse.codegenerator.explanatorytoolgenerator.ExplanatoryToolGenerator */
package simse.explanatorytool;

import simse.state.State;

import org.jfree.ui.RefineryUtilities;

import java.awt.event.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;

import java.util.ArrayList;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class ExplanatoryTool extends JFrame implements ActionListener,
		ListSelectionListener {
	private ArrayList<State> log; // log for current simulation
	private ArrayList<JFrame> visibleGraphs; // holds all of the currently
												// visible graphs
	private static MultipleTimelinesBrowser timelinesBrowser;
	private JButton multipleTimelinesButton;
	private JComboBox objectList; // for choosing an object whose attributes to
									// graph
	private JList attributeList; // for choosing which attributes to show
	private JList actionList; // for choosing which actions to show
	private JButton generateObjGraphButton; // for generating an object graph
	private JButton generateActGraphButton; // for generating an action graph
	private JButton generateCompGraphButton; // for generating a composite graph
	private JComboBox actionComboBox;
	private JList triggerRuleList;
	private JList destroyerRuleList;
	private JList intermediateRuleList;
	private JTextArea descriptionArea;
	private JButton closeButton;
	private Box mainPane;
	private Branch branch;

	public ExplanatoryTool(JFrame owner, ArrayList<State> log, Branch branch,
			MultipleTimelinesBrowser browser) {
		super();
		this.branch = branch;
		timelinesBrowser = browser;
		String title = "Explanatory Tool";
		if (branch.getName() != null) {
			title = title.concat(" - " + branch.getName());
		}
		setTitle(title);
		this.log = log;
		this.visibleGraphs = new ArrayList<JFrame>();

		// Create main panel (box):
		mainPane = Box.createVerticalBox();

		JPanel multipleTimelinesPanel = new JPanel();
		multipleTimelinesButton = new JButton("Multiple Timelines Browser");
		multipleTimelinesButton.addActionListener(this);
		multipleTimelinesPanel.add(multipleTimelinesButton);

		// Create main sub-panel:
		JPanel generateGraphsPanel = new JPanel();

		// Create generate graphs title pane and label:
		JPanel generateGraphsTitlePane = new JPanel();
		generateGraphsTitlePane.add(new JLabel("Generate Graph(s):"));

		// Create object pane and components:
		Box objectPane = Box.createVerticalBox();
		JPanel objectTitlePane = new JPanel();
		objectTitlePane.add(new JLabel("Object Graph:"));
		objectPane.add(objectTitlePane);

		// object list:
		String[] objects = { "SoftwareEngineer Employee Andre",
				"SoftwareEngineer Employee Anita",
				"SoftwareEngineer Employee Calvin",
				"SoftwareEngineer Employee Emily",
				"SoftwareEngineer Employee Mimi",
				"SoftwareEngineer Employee Pedro",
				"SoftwareEngineer Employee Roger",
				"RequirementsDocument Artifact Requirements",
				"DesignDocument Artifact Design", "Code Artifact Code",
				"SystemTestPlan Artifact TestPlan",
				"SEProject Project Groceries@Home",
				"RequirementsCaptureTool Tool SteelTrace",
				"DesignEnvironment Tool RationalRose", "IDE Tool Eclipse",
				"AutomatedTestingTool Tool JUnit",
				"ACustomer Customer Grocery Home Delivery Service", };
		objectList = new JComboBox(objects);
		objectList.addActionListener(this);
		objectPane.add(objectList);

		// Create attribute list pane:
		JPanel attributeListTitlePane = new JPanel();
		attributeListTitlePane.add(new JLabel("Show Attributes:"));
		objectPane.add(attributeListTitlePane);
		attributeList = new JList();
		attributeList.setVisibleRowCount(5); // make 5 items visible at a time
		attributeList.setFixedCellWidth(250);
		attributeList
				.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		attributeList.addListSelectionListener(this);
		JScrollPane attributeListPane = new JScrollPane(attributeList);
		objectPane.add(attributeListPane);

		// Create objectBottom pane & button:
		JPanel objBottomPane = new JPanel();
		generateObjGraphButton = new JButton("Generate Object Graph");
		generateObjGraphButton.addActionListener(this);
		objBottomPane.add(generateObjGraphButton);
		objectPane.add(objBottomPane);

		// Create action pane and components:
		Box actionPane = Box.createVerticalBox();
		JPanel actionTitlePane = new JPanel();
		actionTitlePane.add(new JLabel("Action Graph:"));
		actionPane.add(actionTitlePane);

		// action list:
		String[] actions = { "CreateRequirements", "ReviewRequirements",
				"CorrectRequirements", "CreateDesign", "ReviewDesign",
				"CorrectDesign", "CreateCode", "InspectCode", "CorrectCode",
				"IntegrateCode", "SystemTest", "CreateSystemTestPlan",
				"ReviewSystemTestPlan", "CorrectSystemTestPlan",
				"DeliverProduct", "Break", "GetSick", "Quit",
				"IntroduceNewRequirements", "ChangePayRate", "GiveBonus",
				"Fire", "PurchaseTool", "SuggestedRequirementsPhaseDuration",
				"SuggestedDesignPhaseDuration",
				"SuggestedImplIntegrationPhaseDuration",
				"SuggestedTestingPhaseDuration", };
		actionList = new JList(actions);
		actionList.setVisibleRowCount(5); // make 5 items visible at a time
		actionList.setFixedCellWidth(250);
		actionList
				.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		actionList.addListSelectionListener(this);
		JScrollPane actionListPane = new JScrollPane(actionList);
		actionPane.add(actionListPane);

		// Create actionBottom pane & buttons:
		JPanel actBottomPane = new JPanel();
		generateActGraphButton = new JButton("Generate Action Graph");
		generateActGraphButton.addActionListener(this);
		actBottomPane.add(generateActGraphButton);
		actionPane.add(actBottomPane);

		// Create comp graph pane & button:
		JPanel generateCompGraphPane = new JPanel();
		generateCompGraphButton = new JButton("Generate Composite Graph");
		generateCompGraphButton.addActionListener(this);
		generateCompGraphPane.add(generateCompGraphButton);

		refreshAttributeList();
		if (actions.length > 0) {
			actionList.setSelectedIndex(0);
		}
		refreshButtons();

		// Create viewRuleTitlePane and label:
		JPanel viewRulesTitlePane = new JPanel();
		viewRulesTitlePane.add(new JLabel("View Rules:"));

		// Create actionsComboBoxPane:
		JPanel actionComboBoxPane = new JPanel();
		actionComboBoxPane.add(new JLabel("Actions:"));
		actionComboBox = new JComboBox(actions);
		actionComboBox.addActionListener(this);
		actionComboBoxPane.add(actionComboBox);

		// Create rulesMainPane:
		JPanel rulesMainPane = new JPanel();

		// Create ruleListsPane:
		Box ruleListsPane = Box.createVerticalBox();

		// rule lists:
		JPanel trigRuleTitlePane = new JPanel();
		trigRuleTitlePane.add(new JLabel("Trigger Rules:"));
		ruleListsPane.add(trigRuleTitlePane);
		triggerRuleList = new JList();
		triggerRuleList.setVisibleRowCount(4);
		triggerRuleList.setFixedCellWidth(250);
		triggerRuleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		triggerRuleList.addListSelectionListener(this);
		JScrollPane triggerRuleListPane = new JScrollPane(triggerRuleList);
		ruleListsPane.add(triggerRuleListPane);

		JPanel destRuleTitlePane = new JPanel();
		destRuleTitlePane.add(new JLabel("Destroyer Rules:"));
		ruleListsPane.add(destRuleTitlePane);
		destroyerRuleList = new JList();
		destroyerRuleList.setVisibleRowCount(4);
		destroyerRuleList.setFixedCellWidth(250);
		destroyerRuleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		destroyerRuleList.addListSelectionListener(this);
		JScrollPane destroyerRuleListPane = new JScrollPane(destroyerRuleList);
		ruleListsPane.add(destroyerRuleListPane);

		JPanel intRuleTitlePane = new JPanel();
		intRuleTitlePane.add(new JLabel("Intermediate Rules:"));
		ruleListsPane.add(intRuleTitlePane);
		intermediateRuleList = new JList();
		intermediateRuleList.setVisibleRowCount(4);
		intermediateRuleList.setFixedCellWidth(250);
		intermediateRuleList
				.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		intermediateRuleList.addListSelectionListener(this);
		JScrollPane intermediateRuleListPane = new JScrollPane(
				intermediateRuleList);
		ruleListsPane.add(intermediateRuleListPane);

		rulesMainPane.add(ruleListsPane);

		// description pane:
		Box descriptionPane = Box.createVerticalBox();
		JPanel descriptionTitlePane = new JPanel();
		descriptionTitlePane.add(new JLabel("Description:"));
		descriptionPane.add(descriptionTitlePane);

		// description text area:
		descriptionArea = new JTextArea(16, 30);
		descriptionArea.setLineWrap(true);
		descriptionArea.setWrapStyleWord(true);
		descriptionArea.setEditable(false);
		JScrollPane descriptionScrollPane = new JScrollPane(descriptionArea,
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		descriptionPane.add(descriptionScrollPane);

		rulesMainPane.add(descriptionPane);

		// Create close button pane:
		JPanel closeButtonPane = new JPanel();
		closeButton = new JButton("Close");
		closeButton.addActionListener(this);
		closeButtonPane.add(closeButton);

		if (actions.length > 0) { // at least one action in list
			actionComboBox.setSelectedIndex(0);
		}

		// set up tool tips:
		setUpToolTips();

		// Add panes to main pane and main sub-pane:
		mainPane.add(multipleTimelinesPanel);
		JSeparator separator0 = new JSeparator();
		separator0.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator0);
		generateGraphsPanel.add(objectPane);
		generateGraphsPanel.add(actionPane);
		mainPane.add(generateGraphsTitlePane);
		JSeparator separator1 = new JSeparator();
		separator1.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator1);
		mainPane.add(generateGraphsPanel);
		JSeparator separator2 = new JSeparator();
		separator2.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator2);
		mainPane.add(generateCompGraphPane);
		JSeparator separator3 = new JSeparator();
		separator3.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator3);
		mainPane.add(viewRulesTitlePane);
		JSeparator separator4 = new JSeparator();
		separator4.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator4);
		mainPane.add(actionComboBoxPane);
		mainPane.add(rulesMainPane);
		JSeparator separator5 = new JSeparator();
		separator5.setMaximumSize(new Dimension(2900, 1));
		mainPane.add(separator5);
		mainPane.add(closeButtonPane);

		// Set main window frame properties:
		setBackground(Color.black);
		setContentPane(mainPane);
		validate();
		pack();
		repaint();
		toFront();
		// Make it show up in the center of the screen:
		RefineryUtilities.centerFrameOnScreen(this);
		setVisible(false);
	}

	public void actionPerformed(ActionEvent evt) {
		Object source = evt.getSource(); // get which component the action came
											// from
		if (source == objectList) { // user has chosen an object
			refreshAttributeList();
		} else if (source == multipleTimelinesButton) {
			if (timelinesBrowser.getState() == Frame.ICONIFIED) {
				timelinesBrowser.setState(Frame.NORMAL);
			}
			timelinesBrowser.setVisible(true);
		} else if (source == generateObjGraphButton) { // generateObjGraphButton
														// has been pressed
			String selectedObj = (String) objectList.getSelectedItem();
			String[] words = selectedObj.split("\\s");
			String title = selectedObj + " Attributes";
			String objType = words[0];
			String objTypeType = words[1];

			// add 2 for the 2 spaces:
			String keyAttVal = selectedObj.substring(objType.length()
					+ objTypeType.length() + 2);

			Object[] selectedAtts = attributeList.getSelectedValues();
			String[] attributes = new String[selectedAtts.length];
			for (int i = 0; i < selectedAtts.length; i++) {
				attributes[i] = new String((String) selectedAtts[i]);
			}
			if (attributes.length > 0) { // at least one attribute is selected
				ObjectGraph graph = new ObjectGraph(title, log, objTypeType,
						objType, keyAttVal, attributes, true, branch);
				visibleGraphs.add(graph);
			} else {
				JOptionPane.showMessageDialog(null,
						("Please select at least one attribute"), "Warning",
						JOptionPane.WARNING_MESSAGE);
			}
		} else if (source == generateActGraphButton) { // generateActGraphButton
														// has been pressed
			Object[] selectedActions = actionList.getSelectedValues();
			String[] actions = new String[selectedActions.length];
			for (int i = 0; i < selectedActions.length; i++) {
				actions[i] = new String((String) selectedActions[i]);
			}
			if (actions.length > 0) { // at least one attribute is selected
				ActionGraph graph = new ActionGraph(log, actions, true, branch);
				visibleGraphs.add(graph);
			} else {
				JOptionPane.showMessageDialog(null,
						("Please select at least one action"), "Warning",
						JOptionPane.WARNING_MESSAGE);
			}
		} else if (source == generateCompGraphButton) { // generateCompGraphButton
														// has been pressed
			String selectedObj = (String) objectList.getSelectedItem();
			String[] words = selectedObj.split("\\s");
			String title = selectedObj + " Attributes";
			String objType = words[0];
			String objTypeType = words[1];

			// add 2 for the 2 spaces:
			String keyAttVal = selectedObj.substring(objType.length()
					+ objTypeType.length() + 2);

			Object[] selectedAtts = attributeList.getSelectedValues();
			String[] attributes = new String[selectedAtts.length];
			for (int i = 0; i < selectedAtts.length; i++) {
				attributes[i] = new String((String) selectedAtts[i]);
			}
			if (attributes.length > 0) { // at least one attribute is selected
				ObjectGraph objGraph = new ObjectGraph(title, log, objTypeType,
						objType, keyAttVal, attributes, false, branch);

				Object[] selectedActions = actionList.getSelectedValues();
				String[] actions = new String[selectedActions.length];
				for (int i = 0; i < selectedActions.length; i++) {
					actions[i] = new String((String) selectedActions[i]);
				}
				if (actions.length > 0) { // at least one attribute is selected
					ActionGraph actGraph = new ActionGraph(log, actions, false,
							branch);

					// generate composite graph:
					CompositeGraph compGraph = new CompositeGraph(objGraph,
							actGraph, branch);
					visibleGraphs.add(compGraph);
				} else {
					JOptionPane.showMessageDialog(null,
							("Please select at least one action"), "Warning",
							JOptionPane.WARNING_MESSAGE);
				}
			} else {
				JOptionPane.showMessageDialog(null,
						("Please select at least one attribute"), "Warning",
						JOptionPane.WARNING_MESSAGE);
			}
		} else if (source == actionComboBox) {
			if (actionComboBox.getItemCount() > 0) {
				refreshRuleLists((String) actionComboBox.getSelectedItem());
				descriptionArea.setText("");
			}
		} else if (source == closeButton) {
			setVisible(false);
			dispose();
		}
	}

	public void valueChanged(ListSelectionEvent e) {
		if ((e.getSource() == attributeList) || (e.getSource() == actionList)) {
			refreshButtons();
		} else if ((e.getSource() == triggerRuleList && !triggerRuleList
				.isSelectionEmpty())) {
			destroyerRuleList.clearSelection();
			intermediateRuleList.clearSelection();
			refreshDescriptionArea((String) triggerRuleList.getSelectedValue());
		} else if (e.getSource() == destroyerRuleList
				&& !destroyerRuleList.isSelectionEmpty()) {
			triggerRuleList.clearSelection();
			intermediateRuleList.clearSelection();
			refreshDescriptionArea((String) destroyerRuleList
					.getSelectedValue());
		} else if (e.getSource() == intermediateRuleList
				&& !intermediateRuleList.isSelectionEmpty()) {
			triggerRuleList.clearSelection();
			destroyerRuleList.clearSelection();
			refreshDescriptionArea((String) intermediateRuleList
					.getSelectedValue());
		}
	}

	// Updates all of the visible graphs
	public void update() {
		for (int i = 0; i < visibleGraphs.size(); i++) {
			JFrame graph = visibleGraphs.get(i);
			// remove graphs whose windows have been closed from visibleGraphs:
			if (!graph.isShowing()) {
				visibleGraphs.remove(graph);
			} else if (graph instanceof ObjectGraph) {
				((ObjectGraph) graph).update();
			} else if (graph instanceof ActionGraph) {
				((ActionGraph) graph).update();
			} else if (graph instanceof CompositeGraph) {
				((CompositeGraph) graph).update();
			}
		}

		// update timelines browser:
		if (timelinesBrowser != null) {
			timelinesBrowser.update();
		}
	}

	private void refreshAttributeList() {
		attributeList.removeAll();
		String selectedObject = (String) objectList.getSelectedItem();
		if (selectedObject.startsWith("SoftwareEngineer Employee")) {
			String[] attributes = { "Energy", "Mood", "PayRate", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("RequirementsDocument Artifact")) {
			String[] attributes = { "NumKnownErrors", "NumUnknownErrors",
					"PercentErroneous", "PercentComplete", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("DesignDocument Artifact")) {
			String[] attributes = { "NumKnownErrors", "NumUnknownErrors",
					"PercentErroneous", "PercentComplete", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("Code Artifact")) {
			String[] attributes = { "PercentComplete", "PercentIntegrated",
					"NumKnownErrors", "NumUnknownErrors", "PercentErroneous", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("SystemTestPlan Artifact")) {
			String[] attributes = { "NumKnownErrors", "NumUnknownErrors",
					"PercentErroneous", "PercentComplete", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("SEProject Project")) {
			String[] attributes = { "Budget", "MoneySpent", "AllottedTime",
					"TimeUsed", "Score", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("RequirementsCaptureTool Tool")) {
			String[] attributes = { "Cost", "ProductivityIncreaseFactor",
					"ErrorRateDecreaseFactor", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("DesignEnvironment Tool")) {
			String[] attributes = { "Cost", "ProductivityIncreaseFactor",
					"ErrorRateDecreaseFactor", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("IDE Tool")) {
			String[] attributes = { "Cost", "ProductivityIncreaseFactor",
					"ErrorRateDecreaseFactor", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("AutomatedTestingTool Tool")) {
			String[] attributes = { "Cost", "ProductivityIncreaseFactor",
					"ErrorRateDecreaseFactor", };
			attributeList.setListData(attributes);
			attributeList.setEnabled(true);
			attributeList.setSelectedIndex(0);
		} else if (selectedObject.startsWith("ACustomer Customer")) {
			String[] attributes = { "(No numerical attributes)" };
			attributeList.setListData(attributes);
			attributeList.setEnabled(false);
		}
	}

	private void setUpToolTips() {
		objectList.setToolTipText("Choose an object to graph");
		attributeList.setToolTipText("Choose which attributes to graph");
		actionList.setToolTipText("Choose which actions to graph");
		actionComboBox.setToolTipText("Choose which action to show rules for");
		triggerRuleList
				.setToolTipText("Rules that execute at the beginning of the action");
		destroyerRuleList
				.setToolTipText("Rules that execute at the end of the action");
		intermediateRuleList
				.setToolTipText("Rules that execute every clock tick during the life of the action");
	}

	private void refreshButtons() {
		if (attributeList.isSelectionEmpty()) { // no attributes selected
			generateObjGraphButton.setEnabled(false);
			generateCompGraphButton.setEnabled(false);
		} else { // an attribute is selected
			generateObjGraphButton.setEnabled(true);
			if (!actionList.isSelectionEmpty()) { // an action is also selected
				generateCompGraphButton.setEnabled(true);
			}
		}
		if (actionList.isSelectionEmpty()) { // no actions selected
			generateActGraphButton.setEnabled(false);
			generateCompGraphButton.setEnabled(false);
		} else { // an action is selected
			generateActGraphButton.setEnabled(true);
		}
	}

	private void refreshRuleLists(String actionName) {
		triggerRuleList.setListData(new Vector());
		destroyerRuleList.setListData(new Vector());
		intermediateRuleList.setListData(new Vector());

		if (actionName.equals("CreateRequirements")) {
			String[] intList = { "CreateRequirementsEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("ReviewRequirements")) {
			String[] intList = { "ReviewRequirementsEffectRuleC",
					"ReviewRequirementsEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CorrectRequirements")) {
			String[] intList = { "CorrectRequirementsEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CreateDesign")) {
			String[] intList = { "CreateDesignEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("ReviewDesign")) {
			String[] intList = { "ReviewDesignEffectRuleA",
					"ReviewDesignEffectRuleC", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CorrectDesign")) {
			String[] intList = { "CorrectDesignEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CreateCode")) {
			String[] trigList = {};
			triggerRuleList.setListData(trigList);
			String[] intList = { "CreateCodeEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("InspectCode")) {
			String[] intList = { "InspectCodeEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CorrectCode")) {
			String[] intList = { "CorrectCodeEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("IntegrateCode")) {
			String[] intList = { "IntegrateCodeEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("SystemTest")) {
			String[] intList = { "SystemTestEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CreateSystemTestPlan")) {
			String[] intList = { "CreateSystemTestPlanEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("ReviewSystemTestPlan")) {
			String[] intList = { "ReviewTestPlanEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("CorrectSystemTestPlan")) {
			String[] intList = { "CorrectTestPlanEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("DeliverProduct")) {
			String[] trigList = { "CalculateScore", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("Break")) {
			String[] trigList = { "BreakTrigRule", };
			triggerRuleList.setListData(trigList);
			String[] destList = { "BreakDestRule", };
			destroyerRuleList.setListData(destList);
			String[] intList = { "BreakEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("GetSick")) {
			String[] trigList = { "GetSickTrigRule", };
			triggerRuleList.setListData(trigList);
			String[] destList = { "GetSickDestRule", };
			destroyerRuleList.setListData(destList);
			String[] intList = { "GetSickEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("Quit")) {
			String[] trigList = { "QuitDestroyObjectsRuleA", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("IntroduceNewRequirements")) {
			String[] intList = { "IntroduceNewRequirementsEffectRuleA", };
			intermediateRuleList.setListData(intList);
		} else if (actionName.equals("ChangePayRate")) {
			String[] trigList = { "ChangePayRateEffectRuleA", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("GiveBonus")) {
			String[] trigList = { "GiveBonusEffectRuleA", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("Fire")) {
			String[] trigList = { "FireDestroyObjectsRuleA", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("PurchaseTool")) {
			String[] trigList = { "PurchaseToolEffectRuleA", };
			triggerRuleList.setListData(trigList);
		} else if (actionName.equals("SuggestedRequirementsPhaseDuration")) {
			String[] trigList = {};
			triggerRuleList.setListData(trigList);
			String[] destList = {};
			destroyerRuleList.setListData(destList);
		} else if (actionName.equals("SuggestedDesignPhaseDuration")) {
			String[] trigList = {};
			triggerRuleList.setListData(trigList);
			String[] destList = {};
			destroyerRuleList.setListData(destList);
		} else if (actionName.equals("SuggestedImplIntegrationPhaseDuration")) {
			String[] trigList = {};
			triggerRuleList.setListData(trigList);
			String[] destList = {};
			destroyerRuleList.setListData(destList);
		} else if (actionName.equals("SuggestedTestingPhaseDuration")) {
			String[] trigList = {};
			triggerRuleList.setListData(trigList);
			String[] destList = {};
			destroyerRuleList.setListData(destList);
		}
	}

	// refreshes the description area with the selected rule description
	private void refreshDescriptionArea(String ruleName) {
		if (ruleName != null) {
			String text = "";
			if (ruleName.equals("CreateRequirementsEffectRuleA")) {
				text = RuleDescriptions.CREATEREQUIREMENTS_CREATEREQUIREMENTSEFFECTRULEA;
			} else if (ruleName.equals("ReviewRequirementsEffectRuleA")) {
				text = RuleDescriptions.REVIEWREQUIREMENTS_REVIEWREQUIREMENTSEFFECTRULEA;
			} else if (ruleName.equals("ReviewRequirementsEffectRuleC")) {
				text = RuleDescriptions.REVIEWREQUIREMENTS_REVIEWREQUIREMENTSEFFECTRULEC;
			} else if (ruleName.equals("CorrectRequirementsEffectRuleA")) {
				text = RuleDescriptions.CORRECTREQUIREMENTS_CORRECTREQUIREMENTSEFFECTRULEA;
			} else if (ruleName.equals("CreateDesignEffectRuleA")) {
				text = RuleDescriptions.CREATEDESIGN_CREATEDESIGNEFFECTRULEA;
			} else if (ruleName.equals("ReviewDesignEffectRuleA")) {
				text = RuleDescriptions.REVIEWDESIGN_REVIEWDESIGNEFFECTRULEA;
			} else if (ruleName.equals("ReviewDesignEffectRuleC")) {
				text = RuleDescriptions.REVIEWDESIGN_REVIEWDESIGNEFFECTRULEC;
			} else if (ruleName.equals("CorrectDesignEffectRuleA")) {
				text = RuleDescriptions.CORRECTDESIGN_CORRECTDESIGNEFFECTRULEA;
			} else if (ruleName.equals("CreateCodeEffectRuleA")) {
				text = RuleDescriptions.CREATECODE_CREATECODEEFFECTRULEA;
			} else if (ruleName.equals("InspectCodeEffectRuleA")) {
				text = RuleDescriptions.INSPECTCODE_INSPECTCODEEFFECTRULEA;
			} else if (ruleName.equals("CorrectCodeEffectRuleA")) {
				text = RuleDescriptions.CORRECTCODE_CORRECTCODEEFFECTRULEA;
			} else if (ruleName.equals("IntegrateCodeEffectRuleA")) {
				text = RuleDescriptions.INTEGRATECODE_INTEGRATECODEEFFECTRULEA;
			} else if (ruleName.equals("SystemTestEffectRuleA")) {
				text = RuleDescriptions.SYSTEMTEST_SYSTEMTESTEFFECTRULEA;
			} else if (ruleName.equals("CreateSystemTestPlanEffectRuleA")) {
				text = RuleDescriptions.CREATESYSTEMTESTPLAN_CREATESYSTEMTESTPLANEFFECTRULEA;
			} else if (ruleName.equals("ReviewTestPlanEffectRuleA")) {
				text = RuleDescriptions.REVIEWSYSTEMTESTPLAN_REVIEWTESTPLANEFFECTRULEA;
			} else if (ruleName.equals("CorrectTestPlanEffectRuleA")) {
				text = RuleDescriptions.CORRECTSYSTEMTESTPLAN_CORRECTTESTPLANEFFECTRULEA;
			} else if (ruleName.equals("CalculateScore")) {
				text = RuleDescriptions.DELIVERPRODUCT_CALCULATESCORE;
			} else if (ruleName.equals("BreakEffectRuleA")) {
				text = RuleDescriptions.BREAK_BREAKEFFECTRULEA;
			} else if (ruleName.equals("BreakTrigRule")) {
				text = RuleDescriptions.BREAK_BREAKTRIGRULE;
			} else if (ruleName.equals("BreakDestRule")) {
				text = RuleDescriptions.BREAK_BREAKDESTRULE;
			} else if (ruleName.equals("GetSickEffectRuleA")) {
				text = RuleDescriptions.GETSICK_GETSICKEFFECTRULEA;
			} else if (ruleName.equals("GetSickTrigRule")) {
				text = RuleDescriptions.GETSICK_GETSICKTRIGRULE;
			} else if (ruleName.equals("GetSickDestRule")) {
				text = RuleDescriptions.GETSICK_GETSICKDESTRULE;
			} else if (ruleName.equals("QuitDestroyObjectsRuleA")) {
				text = RuleDescriptions.QUIT_QUITDESTROYOBJECTSRULEA;
			} else if (ruleName.equals("IntroduceNewRequirementsEffectRuleA")) {
				text = RuleDescriptions.INTRODUCENEWREQUIREMENTS_INTRODUCENEWREQUIREMENTSEFFECTRULEA;
			} else if (ruleName.equals("ChangePayRateEffectRuleA")) {
				text = RuleDescriptions.CHANGEPAYRATE_CHANGEPAYRATEEFFECTRULEA;
			} else if (ruleName.equals("GiveBonusEffectRuleA")) {
				text = RuleDescriptions.GIVEBONUS_GIVEBONUSEFFECTRULEA;
			} else if (ruleName.equals("FireDestroyObjectsRuleA")) {
				text = RuleDescriptions.FIRE_FIREDESTROYOBJECTSRULEA;
			} else if (ruleName.equals("PurchaseToolEffectRuleA")) {
				text = RuleDescriptions.PURCHASETOOL_PURCHASETOOLEFFECTRULEA;
			}
			descriptionArea.setText(text);
			descriptionArea.setCaretPosition(0);
		}
	}
}