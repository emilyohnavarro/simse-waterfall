/* File generated by: simse.codegenerator.logicgenerator.MenuInputManagerGenerator */
package simse.logic;

import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import simse.logic.dialogs.*;
import java.util.*;
import javax.swing.*;

public class MenuInputManager {
	private State state;
	private TriggerChecker trigChecker;
	private DestroyerChecker destChecker;
	private RuleExecutor ruleExec;

	public MenuInputManager(State s, TriggerChecker t, DestroyerChecker d,
			RuleExecutor r) {
		state = s;
		trigChecker = t;
		destChecker = d;
		ruleExec = r;
	}

	public void menuItemSelected(Employee e, String s, JFrame parent) {
		boolean hasStr = false;
		Vector<String> menu = e.getMenu();
		for (int i = 0; i < menu.size(); i++) {
			String menuItem = menu.elementAt(i);
			if (menuItem.equals(s)) {
				hasStr = true;
				break;
			}
		}
		if (!hasStr) {
		} else {
			if (s.equals("Everyone stop what you're doing")) {
				int choice = JOptionPane
						.showConfirmDialog(
								null,
								("Are you sure you want everyone to stop what they're doing?"),
								"Confirm Activities Ending",
								JOptionPane.YES_NO_OPTION);
				if (choice == JOptionPane.YES_OPTION) {
					Vector<Employee> allEmps = state
							.getEmployeeStateRepository().getAll();
					for (int z = 0; z < allEmps.size(); z++) {
						Employee emp = allEmps.elementAt(z);
						// Stop creating the requirements document:
						Vector<CreateRequirementsAction> allActions0 = state
								.getActionStateRepository()
								.getCreateRequirementsActionStateRepository()
								.getAllActions();
						int a0 = 0;
						for (int i = 0; i < allActions0.size(); i++) {
							CreateRequirementsAction b0 = allActions0
									.elementAt(i);
							if (b0.getAllParticipants().contains(emp)) {
								a0++;
							}
						}
						if (a0 == 1) {
							for (int i = 0; i < allActions0.size(); i++) {
								CreateRequirementsAction b0 = allActions0
										.elementAt(i);
								if (b0.getAllEmps().contains(emp)) {
									b0.removeEmp(emp);
									emp.setOverheadText("I've stopped creating the requirements document");
									if (b0.getAllEmps().size() < 1) {
										Vector<SSObject> c0 = b0
												.getAllParticipants();
										for (int j = 0; j < c0.size(); j++) {
											SSObject d0 = c0.elementAt(j);
											if (d0 instanceof Employee) {
												((Employee) d0)
														.setOverheadText("I've stopped creating the requirements document");
											} else if (d0 instanceof Customer) {
												((Customer) d0)
														.setOverheadText("I've stopped creating the requirements document");
											}
										}
										state.getActionStateRepository()
												.getCreateRequirementsActionStateRepository()
												.remove(b0);
									}
								}
							}
						} else if (a0 > 1) {
							Vector<CreateRequirementsAction> b0 = new Vector<CreateRequirementsAction>();
							for (int i = 0; i < allActions0.size(); i++) {
								CreateRequirementsAction c0 = (CreateRequirementsAction) allActions0
										.elementAt(i);
								if ((c0.getAllEmps().contains(emp))
										&& (!(b0.contains(c0)))) {
									b0.add(c0);
								}
							}
							new ChooseActionToDestroyDialog(parent, b0, state,
									emp, ruleExec, s);
						}
						// Stop reviewing the requirements document:
						Vector<ReviewRequirementsAction> allActions1 = state
								.getActionStateRepository()
								.getReviewRequirementsActionStateRepository()
								.getAllActions();
						int a1 = 0;
						for (int i = 0; i < allActions1.size(); i++) {
							ReviewRequirementsAction b1 = allActions1
									.elementAt(i);
							if (b1.getAllParticipants().contains(emp)) {
								a1++;
							}
						}
						if (a1 == 1) {
							for (int i = 0; i < allActions1.size(); i++) {
								ReviewRequirementsAction b1 = allActions1
										.elementAt(i);
								if (b1.getAllEmps().contains(emp)) {
									b1.removeEmp(emp);
									emp.setOverheadText("I'm done reviewing the requirements document");
									if (b1.getAllEmps().size() < 1) {
										Vector<SSObject> c1 = b1
												.getAllParticipants();
										for (int j = 0; j < c1.size(); j++) {
											SSObject d1 = c1.elementAt(j);
											if (d1 instanceof Employee) {
												((Employee) d1)
														.setOverheadText("I'm done reviewing the requirements document");
											} else if (d1 instanceof Customer) {
												((Customer) d1)
														.setOverheadText("I'm done reviewing the requirements document");
											}
										}
										state.getActionStateRepository()
												.getReviewRequirementsActionStateRepository()
												.remove(b1);
									}
								}
							}
						} else if (a1 > 1) {
							Vector<ReviewRequirementsAction> b1 = new Vector<ReviewRequirementsAction>();
							for (int i = 0; i < allActions1.size(); i++) {
								ReviewRequirementsAction c1 = (ReviewRequirementsAction) allActions1
										.elementAt(i);
								if ((c1.getAllEmps().contains(emp))
										&& (!(b1.contains(c1)))) {
									b1.add(c1);
								}
							}
							new ChooseActionToDestroyDialog(parent, b1, state,
									emp, ruleExec, s);
						}
						// Stop correcting the requirements doc:
						Vector<CorrectRequirementsAction> allActions2 = state
								.getActionStateRepository()
								.getCorrectRequirementsActionStateRepository()
								.getAllActions();
						int a2 = 0;
						for (int i = 0; i < allActions2.size(); i++) {
							CorrectRequirementsAction b2 = allActions2
									.elementAt(i);
							if (b2.getAllParticipants().contains(emp)) {
								a2++;
							}
						}
						if (a2 == 1) {
							for (int i = 0; i < allActions2.size(); i++) {
								CorrectRequirementsAction b2 = allActions2
										.elementAt(i);
								if (b2.getAllEmps().contains(emp)) {
									b2.removeEmp(emp);
									emp.setOverheadText("I've stopped correcting the requirements document");
									if (b2.getAllEmps().size() < 1) {
										Vector<SSObject> c2 = b2
												.getAllParticipants();
										for (int j = 0; j < c2.size(); j++) {
											SSObject d2 = c2.elementAt(j);
											if (d2 instanceof Employee) {
												((Employee) d2)
														.setOverheadText("I've stopped correcting the requirements document");
											} else if (d2 instanceof Customer) {
												((Customer) d2)
														.setOverheadText("I've stopped correcting the requirements document");
											}
										}
										state.getActionStateRepository()
												.getCorrectRequirementsActionStateRepository()
												.remove(b2);
									}
								}
							}
						} else if (a2 > 1) {
							Vector<CorrectRequirementsAction> b2 = new Vector<CorrectRequirementsAction>();
							for (int i = 0; i < allActions2.size(); i++) {
								CorrectRequirementsAction c2 = (CorrectRequirementsAction) allActions2
										.elementAt(i);
								if ((c2.getAllEmps().contains(emp))
										&& (!(b2.contains(c2)))) {
									b2.add(c2);
								}
							}
							new ChooseActionToDestroyDialog(parent, b2, state,
									emp, ruleExec, s);
						}
						// Stop creating the design:
						Vector<CreateDesignAction> allActions3 = state
								.getActionStateRepository()
								.getCreateDesignActionStateRepository()
								.getAllActions();
						int a3 = 0;
						for (int i = 0; i < allActions3.size(); i++) {
							CreateDesignAction b3 = allActions3.elementAt(i);
							if (b3.getAllParticipants().contains(emp)) {
								a3++;
							}
						}
						if (a3 == 1) {
							for (int i = 0; i < allActions3.size(); i++) {
								CreateDesignAction b3 = allActions3
										.elementAt(i);
								if (b3.getAllEmps().contains(emp)) {
									b3.removeEmp(emp);
									emp.setOverheadText("I've stopped creating the design document");
									if (b3.getAllEmps().size() < 1) {
										Vector<SSObject> c3 = b3
												.getAllParticipants();
										for (int j = 0; j < c3.size(); j++) {
											SSObject d3 = c3.elementAt(j);
											if (d3 instanceof Employee) {
												((Employee) d3)
														.setOverheadText("I've stopped creating the design document");
											} else if (d3 instanceof Customer) {
												((Customer) d3)
														.setOverheadText("I've stopped creating the design document");
											}
										}
										state.getActionStateRepository()
												.getCreateDesignActionStateRepository()
												.remove(b3);
									}
								}
							}
						} else if (a3 > 1) {
							Vector<CreateDesignAction> b3 = new Vector<CreateDesignAction>();
							for (int i = 0; i < allActions3.size(); i++) {
								CreateDesignAction c3 = (CreateDesignAction) allActions3
										.elementAt(i);
								if ((c3.getAllEmps().contains(emp))
										&& (!(b3.contains(c3)))) {
									b3.add(c3);
								}
							}
							new ChooseActionToDestroyDialog(parent, b3, state,
									emp, ruleExec, s);
						}
						// Stop reviewing the design document:
						Vector<ReviewDesignAction> allActions4 = state
								.getActionStateRepository()
								.getReviewDesignActionStateRepository()
								.getAllActions();
						int a4 = 0;
						for (int i = 0; i < allActions4.size(); i++) {
							ReviewDesignAction b4 = allActions4.elementAt(i);
							if (b4.getAllParticipants().contains(emp)) {
								a4++;
							}
						}
						if (a4 == 1) {
							for (int i = 0; i < allActions4.size(); i++) {
								ReviewDesignAction b4 = allActions4
										.elementAt(i);
								if (b4.getAllEmps().contains(emp)) {
									b4.removeEmp(emp);
									emp.setOverheadText("I've stopped reviewing the design document");
									if (b4.getAllEmps().size() < 1) {
										Vector<SSObject> c4 = b4
												.getAllParticipants();
										for (int j = 0; j < c4.size(); j++) {
											SSObject d4 = c4.elementAt(j);
											if (d4 instanceof Employee) {
												((Employee) d4)
														.setOverheadText("I've stopped reviewing the design document");
											} else if (d4 instanceof Customer) {
												((Customer) d4)
														.setOverheadText("I've stopped reviewing the design document");
											}
										}
										state.getActionStateRepository()
												.getReviewDesignActionStateRepository()
												.remove(b4);
									}
								}
							}
						} else if (a4 > 1) {
							Vector<ReviewDesignAction> b4 = new Vector<ReviewDesignAction>();
							for (int i = 0; i < allActions4.size(); i++) {
								ReviewDesignAction c4 = (ReviewDesignAction) allActions4
										.elementAt(i);
								if ((c4.getAllEmps().contains(emp))
										&& (!(b4.contains(c4)))) {
									b4.add(c4);
								}
							}
							new ChooseActionToDestroyDialog(parent, b4, state,
									emp, ruleExec, s);
						}
						// Stop correcting the design document:
						Vector<CorrectDesignAction> allActions5 = state
								.getActionStateRepository()
								.getCorrectDesignActionStateRepository()
								.getAllActions();
						int a5 = 0;
						for (int i = 0; i < allActions5.size(); i++) {
							CorrectDesignAction b5 = allActions5.elementAt(i);
							if (b5.getAllParticipants().contains(emp)) {
								a5++;
							}
						}
						if (a5 == 1) {
							for (int i = 0; i < allActions5.size(); i++) {
								CorrectDesignAction b5 = allActions5
										.elementAt(i);
								if (b5.getAllEmps().contains(emp)) {
									b5.removeEmp(emp);
									emp.setOverheadText("I've stopped correcting the design document");
									if (b5.getAllEmps().size() < 1) {
										Vector<SSObject> c5 = b5
												.getAllParticipants();
										for (int j = 0; j < c5.size(); j++) {
											SSObject d5 = c5.elementAt(j);
											if (d5 instanceof Employee) {
												((Employee) d5)
														.setOverheadText("I've stopped correcting the design document");
											} else if (d5 instanceof Customer) {
												((Customer) d5)
														.setOverheadText("I've stopped correcting the design document");
											}
										}
										state.getActionStateRepository()
												.getCorrectDesignActionStateRepository()
												.remove(b5);
									}
								}
							}
						} else if (a5 > 1) {
							Vector<CorrectDesignAction> b5 = new Vector<CorrectDesignAction>();
							for (int i = 0; i < allActions5.size(); i++) {
								CorrectDesignAction c5 = (CorrectDesignAction) allActions5
										.elementAt(i);
								if ((c5.getAllEmps().contains(emp))
										&& (!(b5.contains(c5)))) {
									b5.add(c5);
								}
							}
							new ChooseActionToDestroyDialog(parent, b5, state,
									emp, ruleExec, s);
						}
						// Stop creating code:
						Vector<CreateCodeAction> allActions6 = state
								.getActionStateRepository()
								.getCreateCodeActionStateRepository()
								.getAllActions();
						int a6 = 0;
						for (int i = 0; i < allActions6.size(); i++) {
							CreateCodeAction b6 = allActions6.elementAt(i);
							if (b6.getAllParticipants().contains(emp)) {
								a6++;
							}
						}
						if (a6 == 1) {
							for (int i = 0; i < allActions6.size(); i++) {
								CreateCodeAction b6 = allActions6.elementAt(i);
								if (b6.getAllEmps().contains(emp)) {
									b6.removeEmp(emp);
									emp.setOverheadText("I've stopped creating code");
									if (b6.getAllEmps().size() < 1) {
										Vector<SSObject> c6 = b6
												.getAllParticipants();
										for (int j = 0; j < c6.size(); j++) {
											SSObject d6 = c6.elementAt(j);
											if (d6 instanceof Employee) {
												((Employee) d6)
														.setOverheadText("I've stopped creating code");
											} else if (d6 instanceof Customer) {
												((Customer) d6)
														.setOverheadText("I've stopped creating code");
											}
										}
										state.getActionStateRepository()
												.getCreateCodeActionStateRepository()
												.remove(b6);
									}
								}
							}
						} else if (a6 > 1) {
							Vector<CreateCodeAction> b6 = new Vector<CreateCodeAction>();
							for (int i = 0; i < allActions6.size(); i++) {
								CreateCodeAction c6 = (CreateCodeAction) allActions6
										.elementAt(i);
								if ((c6.getAllEmps().contains(emp))
										&& (!(b6.contains(c6)))) {
									b6.add(c6);
								}
							}
							new ChooseActionToDestroyDialog(parent, b6, state,
									emp, ruleExec, s);
						}
						// Stop inspecting code:
						Vector<InspectCodeAction> allActions7 = state
								.getActionStateRepository()
								.getInspectCodeActionStateRepository()
								.getAllActions();
						int a7 = 0;
						for (int i = 0; i < allActions7.size(); i++) {
							InspectCodeAction b7 = allActions7.elementAt(i);
							if (b7.getAllParticipants().contains(emp)) {
								a7++;
							}
						}
						if (a7 == 1) {
							for (int i = 0; i < allActions7.size(); i++) {
								InspectCodeAction b7 = allActions7.elementAt(i);
								if (b7.getAllEmps().contains(emp)) {
									b7.removeEmp(emp);
									emp.setOverheadText("I've stopped inspecting the code");
									if (b7.getAllEmps().size() < 3) {
										Vector<SSObject> c7 = b7
												.getAllParticipants();
										for (int j = 0; j < c7.size(); j++) {
											SSObject d7 = c7.elementAt(j);
											if (d7 instanceof Employee) {
												((Employee) d7)
														.setOverheadText("I've stopped inspecting the code");
											} else if (d7 instanceof Customer) {
												((Customer) d7)
														.setOverheadText("I've stopped inspecting the code");
											}
										}
										state.getActionStateRepository()
												.getInspectCodeActionStateRepository()
												.remove(b7);
									}
								}
							}
						} else if (a7 > 1) {
							Vector<InspectCodeAction> b7 = new Vector<InspectCodeAction>();
							for (int i = 0; i < allActions7.size(); i++) {
								InspectCodeAction c7 = (InspectCodeAction) allActions7
										.elementAt(i);
								if ((c7.getAllEmps().contains(emp))
										&& (!(b7.contains(c7)))) {
									b7.add(c7);
								}
							}
							new ChooseActionToDestroyDialog(parent, b7, state,
									emp, ruleExec, s);
						}
						// Stop correcting code:
						Vector<CorrectCodeAction> allActions8 = state
								.getActionStateRepository()
								.getCorrectCodeActionStateRepository()
								.getAllActions();
						int a8 = 0;
						for (int i = 0; i < allActions8.size(); i++) {
							CorrectCodeAction b8 = allActions8.elementAt(i);
							if (b8.getAllParticipants().contains(emp)) {
								a8++;
							}
						}
						if (a8 == 1) {
							for (int i = 0; i < allActions8.size(); i++) {
								CorrectCodeAction b8 = allActions8.elementAt(i);
								if (b8.getAllEmps().contains(emp)) {
									b8.removeEmp(emp);
									emp.setOverheadText("I've stopped correcting code");
									if (b8.getAllEmps().size() < 1) {
										Vector<SSObject> c8 = b8
												.getAllParticipants();
										for (int j = 0; j < c8.size(); j++) {
											SSObject d8 = c8.elementAt(j);
											if (d8 instanceof Employee) {
												((Employee) d8)
														.setOverheadText("I've stopped correcting code");
											} else if (d8 instanceof Customer) {
												((Customer) d8)
														.setOverheadText("I've stopped correcting code");
											}
										}
										state.getActionStateRepository()
												.getCorrectCodeActionStateRepository()
												.remove(b8);
									}
								}
							}
						} else if (a8 > 1) {
							Vector<CorrectCodeAction> b8 = new Vector<CorrectCodeAction>();
							for (int i = 0; i < allActions8.size(); i++) {
								CorrectCodeAction c8 = (CorrectCodeAction) allActions8
										.elementAt(i);
								if ((c8.getAllEmps().contains(emp))
										&& (!(b8.contains(c8)))) {
									b8.add(c8);
								}
							}
							new ChooseActionToDestroyDialog(parent, b8, state,
									emp, ruleExec, s);
						}
						// Stop integrating code:
						Vector<IntegrateCodeAction> allActions9 = state
								.getActionStateRepository()
								.getIntegrateCodeActionStateRepository()
								.getAllActions();
						int a9 = 0;
						for (int i = 0; i < allActions9.size(); i++) {
							IntegrateCodeAction b9 = allActions9.elementAt(i);
							if (b9.getAllParticipants().contains(emp)) {
								a9++;
							}
						}
						if (a9 == 1) {
							for (int i = 0; i < allActions9.size(); i++) {
								IntegrateCodeAction b9 = allActions9
										.elementAt(i);
								if (b9.getAllEmps().contains(emp)) {
									b9.removeEmp(emp);
									emp.setOverheadText("I've stopped integrating code");
									if (b9.getAllEmps().size() < 1) {
										Vector<SSObject> c9 = b9
												.getAllParticipants();
										for (int j = 0; j < c9.size(); j++) {
											SSObject d9 = c9.elementAt(j);
											if (d9 instanceof Employee) {
												((Employee) d9)
														.setOverheadText("I've stopped integrating code");
											} else if (d9 instanceof Customer) {
												((Customer) d9)
														.setOverheadText("I've stopped integrating code");
											}
										}
										state.getActionStateRepository()
												.getIntegrateCodeActionStateRepository()
												.remove(b9);
									}
								}
							}
						} else if (a9 > 1) {
							Vector<IntegrateCodeAction> b9 = new Vector<IntegrateCodeAction>();
							for (int i = 0; i < allActions9.size(); i++) {
								IntegrateCodeAction c9 = (IntegrateCodeAction) allActions9
										.elementAt(i);
								if ((c9.getAllEmps().contains(emp))
										&& (!(b9.contains(c9)))) {
									b9.add(c9);
								}
							}
							new ChooseActionToDestroyDialog(parent, b9, state,
									emp, ruleExec, s);
						}
						// Stop doing the system test:
						Vector<SystemTestAction> allActions10 = state
								.getActionStateRepository()
								.getSystemTestActionStateRepository()
								.getAllActions();
						int a10 = 0;
						for (int i = 0; i < allActions10.size(); i++) {
							SystemTestAction b10 = allActions10.elementAt(i);
							if (b10.getAllParticipants().contains(emp)) {
								a10++;
							}
						}
						if (a10 == 1) {
							for (int i = 0; i < allActions10.size(); i++) {
								SystemTestAction b10 = allActions10
										.elementAt(i);
								if (b10.getAllEmps().contains(emp)) {
									b10.removeEmp(emp);
									emp.setOverheadText("I've stopped doing the system test");
									if (b10.getAllEmps().size() < 1) {
										Vector<SSObject> c10 = b10
												.getAllParticipants();
										for (int j = 0; j < c10.size(); j++) {
											SSObject d10 = c10.elementAt(j);
											if (d10 instanceof Employee) {
												((Employee) d10)
														.setOverheadText("I've stopped doing the system test");
											} else if (d10 instanceof Customer) {
												((Customer) d10)
														.setOverheadText("I've stopped doing the system test");
											}
										}
										state.getActionStateRepository()
												.getSystemTestActionStateRepository()
												.remove(b10);
									}
								}
							}
						} else if (a10 > 1) {
							Vector<SystemTestAction> b10 = new Vector<SystemTestAction>();
							for (int i = 0; i < allActions10.size(); i++) {
								SystemTestAction c10 = (SystemTestAction) allActions10
										.elementAt(i);
								if ((c10.getAllEmps().contains(emp))
										&& (!(b10.contains(c10)))) {
									b10.add(c10);
								}
							}
							new ChooseActionToDestroyDialog(parent, b10, state,
									emp, ruleExec, s);
						}
						// Stop creating the system test plan:
						Vector<CreateSystemTestPlanAction> allActions11 = state
								.getActionStateRepository()
								.getCreateSystemTestPlanActionStateRepository()
								.getAllActions();
						int a11 = 0;
						for (int i = 0; i < allActions11.size(); i++) {
							CreateSystemTestPlanAction b11 = allActions11
									.elementAt(i);
							if (b11.getAllParticipants().contains(emp)) {
								a11++;
							}
						}
						if (a11 == 1) {
							for (int i = 0; i < allActions11.size(); i++) {
								CreateSystemTestPlanAction b11 = allActions11
										.elementAt(i);
								if (b11.getAllEmps().contains(emp)) {
									b11.removeEmp(emp);
									emp.setOverheadText("I've stopped creating the system test plan");
									if (b11.getAllEmps().size() < 1) {
										Vector<SSObject> c11 = b11
												.getAllParticipants();
										for (int j = 0; j < c11.size(); j++) {
											SSObject d11 = c11.elementAt(j);
											if (d11 instanceof Employee) {
												((Employee) d11)
														.setOverheadText("I've stopped creating the system test plan");
											} else if (d11 instanceof Customer) {
												((Customer) d11)
														.setOverheadText("I've stopped creating the system test plan");
											}
										}
										state.getActionStateRepository()
												.getCreateSystemTestPlanActionStateRepository()
												.remove(b11);
									}
								}
							}
						} else if (a11 > 1) {
							Vector<CreateSystemTestPlanAction> b11 = new Vector<CreateSystemTestPlanAction>();
							for (int i = 0; i < allActions11.size(); i++) {
								CreateSystemTestPlanAction c11 = (CreateSystemTestPlanAction) allActions11
										.elementAt(i);
								if ((c11.getAllEmps().contains(emp))
										&& (!(b11.contains(c11)))) {
									b11.add(c11);
								}
							}
							new ChooseActionToDestroyDialog(parent, b11, state,
									emp, ruleExec, s);
						}
						// Stop reviewing the system test plan:
						Vector<ReviewSystemTestPlanAction> allActions12 = state
								.getActionStateRepository()
								.getReviewSystemTestPlanActionStateRepository()
								.getAllActions();
						int a12 = 0;
						for (int i = 0; i < allActions12.size(); i++) {
							ReviewSystemTestPlanAction b12 = allActions12
									.elementAt(i);
							if (b12.getAllParticipants().contains(emp)) {
								a12++;
							}
						}
						if (a12 == 1) {
							for (int i = 0; i < allActions12.size(); i++) {
								ReviewSystemTestPlanAction b12 = allActions12
										.elementAt(i);
								if (b12.getAllEmps().contains(emp)) {
									b12.removeEmp(emp);
									emp.setOverheadText("I've stopped reviewing the system test plan");
									if (b12.getAllEmps().size() < 1) {
										Vector<SSObject> c12 = b12
												.getAllParticipants();
										for (int j = 0; j < c12.size(); j++) {
											SSObject d12 = c12.elementAt(j);
											if (d12 instanceof Employee) {
												((Employee) d12)
														.setOverheadText("I've stopped reviewing the system test plan");
											} else if (d12 instanceof Customer) {
												((Customer) d12)
														.setOverheadText("I've stopped reviewing the system test plan");
											}
										}
										state.getActionStateRepository()
												.getReviewSystemTestPlanActionStateRepository()
												.remove(b12);
									}
								}
							}
						} else if (a12 > 1) {
							Vector<ReviewSystemTestPlanAction> b12 = new Vector<ReviewSystemTestPlanAction>();
							for (int i = 0; i < allActions12.size(); i++) {
								ReviewSystemTestPlanAction c12 = (ReviewSystemTestPlanAction) allActions12
										.elementAt(i);
								if ((c12.getAllEmps().contains(emp))
										&& (!(b12.contains(c12)))) {
									b12.add(c12);
								}
							}
							new ChooseActionToDestroyDialog(parent, b12, state,
									emp, ruleExec, s);
						}
						// Stop correcting the system test plan:
						Vector<CorrectSystemTestPlanAction> allActions13 = state
								.getActionStateRepository()
								.getCorrectSystemTestPlanActionStateRepository()
								.getAllActions();
						int a13 = 0;
						for (int i = 0; i < allActions13.size(); i++) {
							CorrectSystemTestPlanAction b13 = allActions13
									.elementAt(i);
							if (b13.getAllParticipants().contains(emp)) {
								a13++;
							}
						}
						if (a13 == 1) {
							for (int i = 0; i < allActions13.size(); i++) {
								CorrectSystemTestPlanAction b13 = allActions13
										.elementAt(i);
								if (b13.getAllEmps().contains(emp)) {
									b13.removeEmp(emp);
									emp.setOverheadText("I've stopped correcting the system test plan");
									if (b13.getAllEmps().size() < 1) {
										Vector<SSObject> c13 = b13
												.getAllParticipants();
										for (int j = 0; j < c13.size(); j++) {
											SSObject d13 = c13.elementAt(j);
											if (d13 instanceof Employee) {
												((Employee) d13)
														.setOverheadText("I've stopped correcting the system test plan");
											} else if (d13 instanceof Customer) {
												((Customer) d13)
														.setOverheadText("I've stopped correcting the system test plan");
											}
										}
										state.getActionStateRepository()
												.getCorrectSystemTestPlanActionStateRepository()
												.remove(b13);
									}
								}
							}
						} else if (a13 > 1) {
							Vector<CorrectSystemTestPlanAction> b13 = new Vector<CorrectSystemTestPlanAction>();
							for (int i = 0; i < allActions13.size(); i++) {
								CorrectSystemTestPlanAction c13 = (CorrectSystemTestPlanAction) allActions13
										.elementAt(i);
								if ((c13.getAllEmps().contains(emp))
										&& (!(b13.contains(c13)))) {
									b13.add(c13);
								}
							}
							new ChooseActionToDestroyDialog(parent, b13, state,
									emp, ruleExec, s);
						}
					}
				}
			}
			if (s.equals("Create Requirements Document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateRequirementsAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> reqdocs1 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateRequirementsAction b = allActions.elementAt(j);
						if (b.getAllReqDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getPercentComplete() < 100.0)) {
						reqdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Tool> requirementscapturetools3 = new Vector<Tool>();
				Vector<RequirementsCaptureTool> requirementscapturetools = state
						.getToolStateRepository()
						.getRequirementsCaptureToolStateRepository().getAll();
				for (int i = 0; i < requirementscapturetools.size(); i++) {
					RequirementsCaptureTool a = requirementscapturetools
							.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						requirementscapturetools3.add(a);
					}
				}
				Vector<Artifact> associatedcodedocs4 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateRequirementsAction b = allActions.elementAt(j);
						if (b.getAllAssociatedCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedcodedocs4.add(a);
					}
				}
				Vector<Artifact> associateddesigndocs5 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateRequirementsAction b = allActions.elementAt(j);
						if (b.getAllAssociatedDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associateddesigndocs5.add(a);
					}
				}
				Vector<Artifact> associatedsystemtestplans6 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateRequirementsAction b = allActions.elementAt(j);
						if (b.getAllAssociatedSystemTestPlans().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedsystemtestplans6.add(a);
					}
				}
				if ((emps0.size() >= 1) && (reqdocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (requirementscapturetools3.size() >= 0)
						&& (associatedcodedocs4.size() >= 1)
						&& (associateddesigndocs5.size() >= 1)
						&& (associatedsystemtestplans6.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("ReqDoc");
					c.add("Proj");
					c.add("RequirementsCaptureTool");
					c.add("AssociatedCodeDoc");
					c.add("AssociatedDesignDoc");
					c.add("AssociatedSystemTestPlan");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(reqdocs1);
					d.add(projs2);
					d.add(requirementscapturetools3);
					d.add(associatedcodedocs4);
					d.add(associateddesigndocs5);
					d.add(associatedsystemtestplans6);
					CreateRequirementsAction f = new CreateRequirementsAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Create Requirements Document")) {
				Vector<CreateRequirementsAction> a = state
						.getActionStateRepository()
						.getCreateRequirementsActionStateRepository()
						.getAllActions();
				Vector<CreateRequirementsAction> b = new Vector<CreateRequirementsAction>();
				for (int i = 0; i < a.size(); i++) {
					CreateRequirementsAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Create Requirements Document", ruleExec);
			} else if (s.equals("Review requirements document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewRequirementsAction> allActions = state
							.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewRequirementsAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> requirementsdocs1 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewRequirementsAction> allActions = state
							.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewRequirementsAction b = allActions.elementAt(j);
						if (b.getAllRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)
							&& (a.getNumUnknownErrors() > 0.0)) {
						requirementsdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				if ((emps0.size() >= 1) && (requirementsdocs1.size() >= 1)
						&& (projs2.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("RequirementsDoc");
					c.add("Proj");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(requirementsdocs1);
					d.add(projs2);
					ReviewRequirementsAction f = new ReviewRequirementsAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Review requirements document")) {
				Vector<ReviewRequirementsAction> a = state
						.getActionStateRepository()
						.getReviewRequirementsActionStateRepository()
						.getAllActions();
				Vector<ReviewRequirementsAction> b = new Vector<ReviewRequirementsAction>();
				for (int i = 0; i < a.size(); i++) {
					ReviewRequirementsAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Review requirements document", ruleExec);
			} else if (s.equals("Correct the requirements document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectRequirementsAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> requirementsdocs1 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectRequirementsAction> allActions = state
							.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectRequirementsAction b = allActions.elementAt(j);
						if (b.getAllRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getNumKnownErrors() > 0.0)) {
						requirementsdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Tool> requirementscapturetools3 = new Vector<Tool>();
				Vector<RequirementsCaptureTool> requirementscapturetools = state
						.getToolStateRepository()
						.getRequirementsCaptureToolStateRepository().getAll();
				for (int i = 0; i < requirementscapturetools.size(); i++) {
					RequirementsCaptureTool a = requirementscapturetools
							.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						requirementscapturetools3.add(a);
					}
				}
				if ((emps0.size() >= 1) && (requirementsdocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (requirementscapturetools3.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("RequirementsDoc");
					c.add("Proj");
					c.add("RequirementsCaptureTool");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(requirementsdocs1);
					d.add(projs2);
					d.add(requirementscapturetools3);
					CorrectRequirementsAction f = new CorrectRequirementsAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Correct the requirements document")) {
				Vector<CorrectRequirementsAction> a = state
						.getActionStateRepository()
						.getCorrectRequirementsActionStateRepository()
						.getAllActions();
				Vector<CorrectRequirementsAction> b = new Vector<CorrectRequirementsAction>();
				for (int i = 0; i < a.size(); i++) {
					CorrectRequirementsAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Correct the requirements document", ruleExec);
			} else if (s.equals("Create the design document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateDesignAction> allActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateDesignAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> designdocs1 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateDesignAction> allActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateDesignAction b = allActions.elementAt(j);
						if (b.getAllDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getPercentComplete() < 100.0)) {
						designdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateDesignAction> allActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateDesignAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Tool> designenvironments4 = new Vector<Tool>();
				Vector<DesignEnvironment> designenvironments = state
						.getToolStateRepository()
						.getDesignEnvironmentStateRepository().getAll();
				for (int i = 0; i < designenvironments.size(); i++) {
					DesignEnvironment a = designenvironments.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						designenvironments4.add(a);
					}
				}
				Vector<Artifact> associatedcodedocs5 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateDesignAction> allActions = state
							.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateDesignAction b = allActions.elementAt(j);
						if (b.getAllAssociatedCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedcodedocs5.add(a);
					}
				}
				if ((emps0.size() >= 1) && (designdocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (designenvironments4.size() >= 0)
						&& (associatedcodedocs5.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("DesignDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("DesignEnvironment");
					c.add("AssociatedCodeDoc");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(designdocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(designenvironments4);
					d.add(associatedcodedocs5);
					CreateDesignAction f = new CreateDesignAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Create the design document")) {
				Vector<CreateDesignAction> a = state.getActionStateRepository()
						.getCreateDesignActionStateRepository().getAllActions();
				Vector<CreateDesignAction> b = new Vector<CreateDesignAction>();
				for (int i = 0; i < a.size(); i++) {
					CreateDesignAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Create the design document", ruleExec);
			} else if (s.equals("Review the design document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewDesignAction> allActions = state
							.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewDesignAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> designdocs1 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewDesignAction> allActions = state
							.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewDesignAction b = allActions.elementAt(j);
						if (b.getAllDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)
							&& (a.getNumUnknownErrors() > 0.0)) {
						designdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewDesignAction> allActions = state
							.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewDesignAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				if ((emps0.size() >= 1) && (designdocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("DesignDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(designdocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					ReviewDesignAction f = new ReviewDesignAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Review the design document")) {
				Vector<ReviewDesignAction> a = state.getActionStateRepository()
						.getReviewDesignActionStateRepository().getAllActions();
				Vector<ReviewDesignAction> b = new Vector<ReviewDesignAction>();
				for (int i = 0; i < a.size(); i++) {
					ReviewDesignAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Review the design document", ruleExec);
			} else if (s.equals("Correct the design document")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectDesignAction> allActions = state
							.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectDesignAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> designdocs1 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectDesignAction> allActions = state
							.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectDesignAction b = allActions.elementAt(j);
						if (b.getAllDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getNumKnownErrors() > 0.0)) {
						designdocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectDesignAction> allActions = state
							.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectDesignAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Tool> designenvironments4 = new Vector<Tool>();
				Vector<DesignEnvironment> designenvironments = state
						.getToolStateRepository()
						.getDesignEnvironmentStateRepository().getAll();
				for (int i = 0; i < designenvironments.size(); i++) {
					DesignEnvironment a = designenvironments.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						designenvironments4.add(a);
					}
				}
				if ((emps0.size() >= 1) && (designdocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (designenvironments4.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("DesignDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("DesignEnvironment");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(designdocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(designenvironments4);
					CorrectDesignAction f = new CorrectDesignAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Correct the design document")) {
				Vector<CorrectDesignAction> a = state
						.getActionStateRepository()
						.getCorrectDesignActionStateRepository()
						.getAllActions();
				Vector<CorrectDesignAction> b = new Vector<CorrectDesignAction>();
				for (int i = 0; i < a.size(); i++) {
					CorrectDesignAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Correct the design document", ruleExec);
			} else if (s.equals("Create code")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateCodeAction> allActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateCodeAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> codedocs1 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateCodeAction> allActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateCodeAction b = allActions.elementAt(j);
						if (b.getAllCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getPercentComplete() < 100.0)) {
						codedocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateCodeAction> allActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Artifact> associateddesigndocuments4 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateCodeAction> allActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedDesignDocuments().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associateddesigndocuments4.add(a);
					}
				}
				Vector<Tool> developmentenvironments5 = new Vector<Tool>();
				Vector<IDE> ides = state.getToolStateRepository()
						.getIDEStateRepository().getAll();
				for (int i = 0; i < ides.size(); i++) {
					IDE a = ides.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						developmentenvironments5.add(a);
					}
				}
				Vector<Artifact> associatedsystemtestplans6 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateCodeAction> allActions = state
							.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedSystemTestPlans().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedsystemtestplans6.add(a);
					}
				}
				if ((emps0.size() >= 1) && (codedocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (associateddesigndocuments4.size() >= 1)
						&& (developmentenvironments5.size() >= 0)
						&& (associatedsystemtestplans6.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("CodeDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("AssociatedDesignDocument");
					c.add("DevelopmentEnvironment");
					c.add("AssociatedSystemTestPlan");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(codedocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(associateddesigndocuments4);
					d.add(developmentenvironments5);
					d.add(associatedsystemtestplans6);
					CreateCodeAction f = new CreateCodeAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Create code")) {
				Vector<CreateCodeAction> a = state.getActionStateRepository()
						.getCreateCodeActionStateRepository().getAllActions();
				Vector<CreateCodeAction> b = new Vector<CreateCodeAction>();
				for (int i = 0; i < a.size(); i++) {
					CreateCodeAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Create code", ruleExec);
			} else if (s.equals("Inspect the code")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<InspectCodeAction> allActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						InspectCodeAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> codedocs1 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<InspectCodeAction> allActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						InspectCodeAction b = allActions.elementAt(j);
						if (b.getAllCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
						codedocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<InspectCodeAction> allActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						InspectCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Artifact> associateddesigndocs4 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<InspectCodeAction> allActions = state
							.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						InspectCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associateddesigndocs4.add(a);
					}
				}
				if ((emps0.size() >= 3) && (codedocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (associateddesigndocs4.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("CodeDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("AssociatedDesignDoc");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(codedocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(associateddesigndocs4);
					InspectCodeAction f = new InspectCodeAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Inspect the code")) {
				Vector<InspectCodeAction> a = state.getActionStateRepository()
						.getInspectCodeActionStateRepository().getAllActions();
				Vector<InspectCodeAction> b = new Vector<InspectCodeAction>();
				for (int i = 0; i < a.size(); i++) {
					InspectCodeAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Inspect the code", ruleExec);
			} else if (s.equals("Correct code")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectCodeAction> allActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectCodeAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> codedocs1 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectCodeAction> allActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectCodeAction b = allActions.elementAt(j);
						if (b.getAllCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getNumKnownErrors() > 0.0)) {
						codedocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectCodeAction> allActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Artifact> associateddesigndocs4 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectCodeAction> allActions = state
							.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associateddesigndocs4.add(a);
					}
				}
				Vector<Tool> developmentenvironments5 = new Vector<Tool>();
				Vector<IDE> ides = state.getToolStateRepository()
						.getIDEStateRepository().getAll();
				for (int i = 0; i < ides.size(); i++) {
					IDE a = ides.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						developmentenvironments5.add(a);
					}
				}
				if ((emps0.size() >= 1) && (codedocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (associateddesigndocs4.size() >= 1)
						&& (developmentenvironments5.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("CodeDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("AssociatedDesignDoc");
					c.add("DevelopmentEnvironment");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(codedocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(associateddesigndocs4);
					d.add(developmentenvironments5);
					CorrectCodeAction f = new CorrectCodeAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Correct code")) {
				Vector<CorrectCodeAction> a = state.getActionStateRepository()
						.getCorrectCodeActionStateRepository().getAllActions();
				Vector<CorrectCodeAction> b = new Vector<CorrectCodeAction>();
				for (int i = 0; i < a.size(); i++) {
					CorrectCodeAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Correct code", ruleExec);
			} else if (s.equals("Integrate code")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<IntegrateCodeAction> allActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						IntegrateCodeAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> codedocs1 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<IntegrateCodeAction> allActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						IntegrateCodeAction b = allActions.elementAt(j);
						if (b.getAllCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)
							&& (a.getPercentIntegrated() < 100.0)) {
						codedocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs3 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<IntegrateCodeAction> allActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						IntegrateCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs3.add(a);
					}
				}
				Vector<Artifact> associateddesigndocs4 = new Vector<Artifact>();
				Vector<DesignDocument> designdocuments = state
						.getArtifactStateRepository()
						.getDesignDocumentStateRepository().getAll();
				for (int i = 0; i < designdocuments.size(); i++) {
					DesignDocument a = designdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<IntegrateCodeAction> allActions = state
							.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						IntegrateCodeAction b = allActions.elementAt(j);
						if (b.getAllAssociatedDesignDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associateddesigndocs4.add(a);
					}
				}
				Vector<Tool> developmentenvironments5 = new Vector<Tool>();
				Vector<IDE> ides = state.getToolStateRepository()
						.getIDEStateRepository().getAll();
				for (int i = 0; i < ides.size(); i++) {
					IDE a = ides.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						developmentenvironments5.add(a);
					}
				}
				if ((emps0.size() >= 1) && (codedocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (associatedrequirementsdocs3.size() >= 1)
						&& (associateddesigndocs4.size() >= 1)
						&& (developmentenvironments5.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("CodeDoc");
					c.add("Proj");
					c.add("AssociatedRequirementsDoc");
					c.add("AssociatedDesignDoc");
					c.add("DevelopmentEnvironment");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(codedocs1);
					d.add(projs2);
					d.add(associatedrequirementsdocs3);
					d.add(associateddesigndocs4);
					d.add(developmentenvironments5);
					IntegrateCodeAction f = new IntegrateCodeAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Integrate code")) {
				Vector<IntegrateCodeAction> a = state
						.getActionStateRepository()
						.getIntegrateCodeActionStateRepository()
						.getAllActions();
				Vector<IntegrateCodeAction> b = new Vector<IntegrateCodeAction>();
				for (int i = 0; i < a.size(); i++) {
					IntegrateCodeAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Integrate code", ruleExec);
			} else if (s.equals("Do system test")) {
				Vector<Artifact> codedocs0 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<SystemTestAction> allActions = state
							.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						SystemTestAction b = allActions.elementAt(j);
						if (b.getAllCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)
							&& (a.getPercentIntegrated() == 100.0)) {
						codedocs0.add(a);
					}
				}
				Vector<Project> projs1 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs1.add(a);
					}
				}
				Vector<Employee> emps2 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<SystemTestAction> allActions = state
							.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						SystemTestAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps2.add(a);
					}
				}
				Vector<Artifact> associatedsystemtestplans3 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<SystemTestAction> allActions = state
							.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						SystemTestAction b = allActions.elementAt(j);
						if (b.getAllAssociatedSystemTestPlans().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
						associatedsystemtestplans3.add(a);
					}
				}
				Vector<Tool> testingtools4 = new Vector<Tool>();
				Vector<AutomatedTestingTool> automatedtestingtools = state
						.getToolStateRepository()
						.getAutomatedTestingToolStateRepository().getAll();
				for (int i = 0; i < automatedtestingtools.size(); i++) {
					AutomatedTestingTool a = automatedtestingtools.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						testingtools4.add(a);
					}
				}
				if ((codedocs0.size() >= 1) && (projs1.size() >= 1)
						&& (emps2.size() >= 1)
						&& (associatedsystemtestplans3.size() >= 1)
						&& (testingtools4.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("CodeDoc");
					c.add("Proj");
					c.add("Emp");
					c.add("AssociatedSystemTestPlan");
					c.add("TestingTool");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(codedocs0);
					d.add(projs1);
					d.add(emps2);
					d.add(associatedsystemtestplans3);
					d.add(testingtools4);
					SystemTestAction f = new SystemTestAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Do system test")) {
				Vector<SystemTestAction> a = state.getActionStateRepository()
						.getSystemTestActionStateRepository().getAllActions();
				Vector<SystemTestAction> b = new Vector<SystemTestAction>();
				for (int i = 0; i < a.size(); i++) {
					SystemTestAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Do system test", ruleExec);
			} else if (s.equals("Create the system test plan")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> associatedcodedocs1 = new Vector<Artifact>();
				Vector<Code> codes = state.getArtifactStateRepository()
						.getCodeStateRepository().getAll();
				for (int i = 0; i < codes.size(); i++) {
					Code a = codes.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllAssociatedCodeDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedcodedocs1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				Vector<Artifact> systemtestplandocs3 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllSystemTestPlanDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getPercentComplete() < 100.0)) {
						systemtestplandocs3.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs4 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CreateSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CreateSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs4.add(a);
					}
				}
				Vector<Tool> testingtools5 = new Vector<Tool>();
				Vector<AutomatedTestingTool> automatedtestingtools = state
						.getToolStateRepository()
						.getAutomatedTestingToolStateRepository().getAll();
				for (int i = 0; i < automatedtestingtools.size(); i++) {
					AutomatedTestingTool a = automatedtestingtools.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						testingtools5.add(a);
					}
				}
				if ((emps0.size() >= 1) && (associatedcodedocs1.size() >= 1)
						&& (projs2.size() >= 1)
						&& (systemtestplandocs3.size() >= 1)
						&& (associatedrequirementsdocs4.size() >= 1)
						&& (testingtools5.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("AssociatedCodeDoc");
					c.add("Proj");
					c.add("SystemTestPlanDoc");
					c.add("AssociatedRequirementsDoc");
					c.add("TestingTool");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(associatedcodedocs1);
					d.add(projs2);
					d.add(systemtestplandocs3);
					d.add(associatedrequirementsdocs4);
					d.add(testingtools5);
					CreateSystemTestPlanAction f = new CreateSystemTestPlanAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Create the system test plan")) {
				Vector<CreateSystemTestPlanAction> a = state
						.getActionStateRepository()
						.getCreateSystemTestPlanActionStateRepository()
						.getAllActions();
				Vector<CreateSystemTestPlanAction> b = new Vector<CreateSystemTestPlanAction>();
				for (int i = 0; i < a.size(); i++) {
					CreateSystemTestPlanAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Create the system test plan", ruleExec);
			} else if (s.equals("Review the system test plan")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> testplans1 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllTestPlans().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
						testplans1.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs2 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ReviewSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ReviewSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs2.add(a);
					}
				}
				Vector<Project> projs3 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs3.add(a);
					}
				}
				if ((emps0.size() >= 1) && (testplans1.size() >= 1)
						&& (associatedrequirementsdocs2.size() >= 1)
						&& (projs3.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("TestPlan");
					c.add("AssociatedRequirementsDoc");
					c.add("Proj");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(testplans1);
					d.add(associatedrequirementsdocs2);
					d.add(projs3);
					ReviewSystemTestPlanAction f = new ReviewSystemTestPlanAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Review the system test plan")) {
				Vector<ReviewSystemTestPlanAction> a = state
						.getActionStateRepository()
						.getReviewSystemTestPlanActionStateRepository()
						.getAllActions();
				Vector<ReviewSystemTestPlanAction> b = new Vector<ReviewSystemTestPlanAction>();
				for (int i = 0; i < a.size(); i++) {
					ReviewSystemTestPlanAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Review the system test plan", ruleExec);
			} else if (s.equals("Correct the system test plan")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
							&& (a.getOnBreak() == false)) {
						emps0.add(a);
					}
				}
				Vector<Artifact> testplans1 = new Vector<Artifact>();
				Vector<SystemTestPlan> systemtestplans = state
						.getArtifactStateRepository()
						.getSystemTestPlanStateRepository().getAll();
				for (int i = 0; i < systemtestplans.size(); i++) {
					SystemTestPlan a = systemtestplans.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllTestPlans().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)
							&& (a.getNumKnownErrors() > 0.0)) {
						testplans1.add(a);
					}
				}
				Vector<Artifact> associatedrequirementsdocs2 = new Vector<Artifact>();
				Vector<RequirementsDocument> requirementsdocuments = state
						.getArtifactStateRepository()
						.getRequirementsDocumentStateRepository().getAll();
				for (int i = 0; i < requirementsdocuments.size(); i++) {
					RequirementsDocument a = requirementsdocuments.elementAt(i);
					boolean alreadyInAction = false;
					Vector<CorrectSystemTestPlanAction> allActions = state
							.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						CorrectSystemTestPlanAction b = allActions.elementAt(j);
						if (b.getAllAssociatedRequirementsDocs().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						associatedrequirementsdocs2.add(a);
					}
				}
				Vector<Project> projs3 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs3.add(a);
					}
				}
				Vector<Tool> testingtools4 = new Vector<Tool>();
				Vector<AutomatedTestingTool> automatedtestingtools = state
						.getToolStateRepository()
						.getAutomatedTestingToolStateRepository().getAll();
				for (int i = 0; i < automatedtestingtools.size(); i++) {
					AutomatedTestingTool a = automatedtestingtools.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == true)) {
						testingtools4.add(a);
					}
				}
				if ((emps0.size() >= 1) && (testplans1.size() >= 1)
						&& (associatedrequirementsdocs2.size() >= 1)
						&& (projs3.size() >= 1) && (testingtools4.size() >= 0)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("TestPlan");
					c.add("AssociatedRequirementsDoc");
					c.add("Proj");
					c.add("TestingTool");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(testplans1);
					d.add(associatedrequirementsdocs2);
					d.add(projs3);
					d.add(testingtools4);
					CorrectSystemTestPlanAction f = new CorrectSystemTestPlanAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Correct the system test plan")) {
				Vector<CorrectSystemTestPlanAction> a = state
						.getActionStateRepository()
						.getCorrectSystemTestPlanActionStateRepository()
						.getAllActions();
				Vector<CorrectSystemTestPlanAction> b = new Vector<CorrectSystemTestPlanAction>();
				for (int i = 0; i < a.size(); i++) {
					CorrectSystemTestPlanAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Correct the system test plan", ruleExec);
			} else if (s.equals("Deliver product to customer")) {
				int choice = JOptionPane.showConfirmDialog(null,
						("Are you sure you want to end the game?"),
						"Confirm Game Ending", JOptionPane.YES_NO_OPTION);
				if (choice == JOptionPane.YES_OPTION) {
					Vector<Employee> emps0 = new Vector<Employee>();
					Vector<SoftwareEngineer> softwareengineers = state
							.getEmployeeStateRepository()
							.getSoftwareEngineerStateRepository().getAll();
					for (int i = 0; i < softwareengineers.size(); i++) {
						SoftwareEngineer a = softwareengineers.elementAt(i);
						boolean alreadyInAction = false;
						Vector<DeliverProductAction> allActions = state
								.getActionStateRepository()
								.getDeliverProductActionStateRepository()
								.getAllActions(a);
						for (int j = 0; j < allActions.size(); j++) {
							DeliverProductAction b = allActions.elementAt(j);
							if (b.getAllEmps().contains(a)) {
								alreadyInAction = true;
								break;
							}
						}
						if ((alreadyInAction == false)
								&& (a.getHealth() >= 0.7)) {
							emps0.add(a);
						}
					}
					Vector<Project> projs1 = new Vector<Project>();
					Vector<SEProject> seprojects = state
							.getProjectStateRepository()
							.getSEProjectStateRepository().getAll();
					for (int i = 0; i < seprojects.size(); i++) {
						SEProject a = seprojects.elementAt(i);
						boolean alreadyInAction = false;
						if ((alreadyInAction == false)) {
							projs1.add(a);
						}
					}
					Vector<Artifact> codedocs2 = new Vector<Artifact>();
					Vector<Code> codes = state.getArtifactStateRepository()
							.getCodeStateRepository().getAll();
					for (int i = 0; i < codes.size(); i++) {
						Code a = codes.elementAt(i);
						boolean alreadyInAction = false;
						Vector<DeliverProductAction> allActions = state
								.getActionStateRepository()
								.getDeliverProductActionStateRepository()
								.getAllActions(a);
						for (int j = 0; j < allActions.size(); j++) {
							DeliverProductAction b = allActions.elementAt(j);
							if (b.getAllCodeDocs().contains(a)) {
								alreadyInAction = true;
								break;
							}
						}
						if ((alreadyInAction == false)) {
							codedocs2.add(a);
						}
					}
					Vector<Customer> custs3 = new Vector<Customer>();
					Vector<ACustomer> acustomers = state
							.getCustomerStateRepository()
							.getACustomerStateRepository().getAll();
					for (int i = 0; i < acustomers.size(); i++) {
						ACustomer a = acustomers.elementAt(i);
						boolean alreadyInAction = false;
						if ((alreadyInAction == false)) {
							custs3.add(a);
						}
					}
					if ((emps0.size() >= 1) && (projs1.size() >= 1)
							&& (codedocs2.size() >= 1) && (custs3.size() >= 1)) {
						Vector<String> c = new Vector<String>();
						c.add("Emp");
						c.add("Proj");
						c.add("CodeDoc");
						c.add("Cust");
						Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
						d.add(emps0);
						d.add(projs1);
						d.add(codedocs2);
						d.add(custs3);
						DeliverProductAction f = new DeliverProductAction();
						new ParticipantSelectionDialogsDriver(parent, c, d, f,
								state, ruleExec, destChecker, e, s);
					}
				}
			} else if (s.equals("JOIN Deliver product to customer")) {
				Vector<DeliverProductAction> a = state
						.getActionStateRepository()
						.getDeliverProductActionStateRepository()
						.getAllActions();
				Vector<DeliverProductAction> b = new Vector<DeliverProductAction>();
				for (int i = 0; i < a.size(); i++) {
					DeliverProductAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Deliver product to customer", ruleExec);
			} else if (s.equals("Change pay rate")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<ChangePayRateAction> allActions = state
							.getActionStateRepository()
							.getChangePayRateActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						ChangePayRateAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						emps0.add(a);
					}
				}
				if ((emps0.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					ChangePayRateAction f = new ChangePayRateAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Change pay rate")) {
				Vector<ChangePayRateAction> a = state
						.getActionStateRepository()
						.getChangePayRateActionStateRepository()
						.getAllActions();
				Vector<ChangePayRateAction> b = new Vector<ChangePayRateAction>();
				for (int i = 0; i < a.size(); i++) {
					ChangePayRateAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Change pay rate", ruleExec);
			} else if (s.equals("Give bonus")) {
				Vector<Employee> emps0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<GiveBonusAction> allActions = state
							.getActionStateRepository()
							.getGiveBonusActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						GiveBonusAction b = allActions.elementAt(j);
						if (b.getAllEmps().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						emps0.add(a);
					}
				}
				Vector<Project> projectwithbudgets1 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projectwithbudgets1.add(a);
					}
				}
				if ((emps0.size() >= 1) && (projectwithbudgets1.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("Emp");
					c.add("ProjectWithBudget");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(emps0);
					d.add(projectwithbudgets1);
					GiveBonusAction f = new GiveBonusAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Give bonus")) {
				Vector<GiveBonusAction> a = state.getActionStateRepository()
						.getGiveBonusActionStateRepository().getAllActions();
				Vector<GiveBonusAction> b = new Vector<GiveBonusAction>();
				for (int i = 0; i < a.size(); i++) {
					GiveBonusAction c = a.elementAt(i);
					if ((c.getAllEmps().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state, "Give bonus",
						ruleExec);
			} else if (s.equals("Fire")) {
				Vector<Employee> firedpersons0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<FireAction> allActions = state
							.getActionStateRepository()
							.getFireActionStateRepository().getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						FireAction b = allActions.elementAt(j);
						if (b.getAllFiredPersons().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false) && (a.getOnBreak() == false)) {
						firedpersons0.add(a);
					}
				}
				if ((firedpersons0.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("FiredPerson");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(firedpersons0);
					FireAction f = new FireAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Fire")) {
				Vector<FireAction> a = state.getActionStateRepository()
						.getFireActionStateRepository().getAllActions();
				Vector<FireAction> b = new Vector<FireAction>();
				for (int i = 0; i < a.size(); i++) {
					FireAction c = a.elementAt(i);
					if ((c.getAllFiredPersons().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state, "Fire",
						ruleExec);
			} else if (s.equals("Purchase tool(s)")) {
				Vector<Employee> empwhosemenuclickedons0 = new Vector<Employee>();
				Vector<SoftwareEngineer> softwareengineers = state
						.getEmployeeStateRepository()
						.getSoftwareEngineerStateRepository().getAll();
				for (int i = 0; i < softwareengineers.size(); i++) {
					SoftwareEngineer a = softwareengineers.elementAt(i);
					boolean alreadyInAction = false;
					Vector<PurchaseToolAction> allActions = state
							.getActionStateRepository()
							.getPurchaseToolActionStateRepository()
							.getAllActions(a);
					for (int j = 0; j < allActions.size(); j++) {
						PurchaseToolAction b = allActions.elementAt(j);
						if (b.getAllEmpWhoseMenuClickedOns().contains(a)) {
							alreadyInAction = true;
							break;
						}
					}
					if ((alreadyInAction == false)) {
						empwhosemenuclickedons0.add(a);
					}
				}
				Vector<Tool> setools1 = new Vector<Tool>();
				Vector<IDE> ides = state.getToolStateRepository()
						.getIDEStateRepository().getAll();
				for (int i = 0; i < ides.size(); i++) {
					IDE a = ides.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == false)) {
						setools1.add(a);
					}
				}
				Vector<RequirementsCaptureTool> requirementscapturetools = state
						.getToolStateRepository()
						.getRequirementsCaptureToolStateRepository().getAll();
				for (int i = 0; i < requirementscapturetools.size(); i++) {
					RequirementsCaptureTool a = requirementscapturetools
							.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == false)) {
						setools1.add(a);
					}
				}
				Vector<AutomatedTestingTool> automatedtestingtools = state
						.getToolStateRepository()
						.getAutomatedTestingToolStateRepository().getAll();
				for (int i = 0; i < automatedtestingtools.size(); i++) {
					AutomatedTestingTool a = automatedtestingtools.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == false)) {
						setools1.add(a);
					}
				}
				Vector<DesignEnvironment> designenvironments = state
						.getToolStateRepository()
						.getDesignEnvironmentStateRepository().getAll();
				for (int i = 0; i < designenvironments.size(); i++) {
					DesignEnvironment a = designenvironments.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)
							&& (a.getPurchased() == false)) {
						setools1.add(a);
					}
				}
				Vector<Project> projs2 = new Vector<Project>();
				Vector<SEProject> seprojects = state
						.getProjectStateRepository()
						.getSEProjectStateRepository().getAll();
				for (int i = 0; i < seprojects.size(); i++) {
					SEProject a = seprojects.elementAt(i);
					boolean alreadyInAction = false;
					if ((alreadyInAction == false)) {
						projs2.add(a);
					}
				}
				if ((empwhosemenuclickedons0.size() >= 1)
						&& (setools1.size() >= 1) && (projs2.size() >= 1)) {
					Vector<String> c = new Vector<String>();
					c.add("EmpWhoseMenuClickedOn");
					c.add("SETool");
					c.add("Proj");
					Vector<Vector<? extends SSObject>> d = new Vector<Vector<? extends SSObject>>();
					d.add(empwhosemenuclickedons0);
					d.add(setools1);
					d.add(projs2);
					PurchaseToolAction f = new PurchaseToolAction();
					new ParticipantSelectionDialogsDriver(parent, c, d, f,
							state, ruleExec, destChecker, e, s);
				}
			} else if (s.equals("JOIN Purchase tool(s)")) {
				Vector<PurchaseToolAction> a = state.getActionStateRepository()
						.getPurchaseToolActionStateRepository().getAllActions();
				Vector<PurchaseToolAction> b = new Vector<PurchaseToolAction>();
				for (int i = 0; i < a.size(); i++) {
					PurchaseToolAction c = a.elementAt(i);
					if ((c.getAllEmpWhoseMenuClickedOns().contains(e) == false)
							&& (b.contains(c) == false)) {
						b.add(c);
					}
				}
				new ChooseActionToJoinDialog(parent, b, e, state,
						"Purchase tool(s)", ruleExec);
			} else if (s.equals("Stop creating the requirements document")) {
				Vector<CreateRequirementsAction> allActions = state
						.getActionStateRepository()
						.getCreateRequirementsActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CreateRequirementsAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CreateRequirementsAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped creating the requirements document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped creating the requirements document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped creating the requirements document");
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CreateRequirementsAction> b = new Vector<CreateRequirementsAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CreateRequirementsAction c = (CreateRequirementsAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop reviewing the requirements document")) {
				Vector<ReviewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getReviewRequirementsActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					ReviewRequirementsAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						ReviewRequirementsAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I'm done reviewing the requirements document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I'm done reviewing the requirements document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I'm done reviewing the requirements document");
									}
								}
								state.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<ReviewRequirementsAction> b = new Vector<ReviewRequirementsAction>();
					for (int i = 0; i < allActions.size(); i++) {
						ReviewRequirementsAction c = (ReviewRequirementsAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop correcting the requirements doc")) {
				Vector<CorrectRequirementsAction> allActions = state
						.getActionStateRepository()
						.getCorrectRequirementsActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CorrectRequirementsAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CorrectRequirementsAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped correcting the requirements document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped correcting the requirements document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped correcting the requirements document");
									}
								}
								state.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CorrectRequirementsAction> b = new Vector<CorrectRequirementsAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CorrectRequirementsAction c = (CorrectRequirementsAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop creating the design")) {
				Vector<CreateDesignAction> allActions = state
						.getActionStateRepository()
						.getCreateDesignActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CreateDesignAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CreateDesignAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped creating the design document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped creating the design document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped creating the design document");
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CreateDesignAction> b = new Vector<CreateDesignAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CreateDesignAction c = (CreateDesignAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop reviewing the design document")) {
				Vector<ReviewDesignAction> allActions = state
						.getActionStateRepository()
						.getReviewDesignActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					ReviewDesignAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						ReviewDesignAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped reviewing the design document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped reviewing the design document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped reviewing the design document");
									}
								}
								state.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<ReviewDesignAction> b = new Vector<ReviewDesignAction>();
					for (int i = 0; i < allActions.size(); i++) {
						ReviewDesignAction c = (ReviewDesignAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop correcting the design document")) {
				Vector<CorrectDesignAction> allActions = state
						.getActionStateRepository()
						.getCorrectDesignActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CorrectDesignAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CorrectDesignAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped correcting the design document");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped correcting the design document");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped correcting the design document");
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CorrectDesignAction> b = new Vector<CorrectDesignAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CorrectDesignAction c = (CorrectDesignAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop creating code")) {
				Vector<CreateCodeAction> allActions = state
						.getActionStateRepository()
						.getCreateCodeActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CreateCodeAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CreateCodeAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped creating code");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped creating code");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped creating code");
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CreateCodeAction> b = new Vector<CreateCodeAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CreateCodeAction c = (CreateCodeAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop inspecting code")) {
				Vector<InspectCodeAction> allActions = state
						.getActionStateRepository()
						.getInspectCodeActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					InspectCodeAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						InspectCodeAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped inspecting the code");
							if (b.getAllEmps().size() < 3) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped inspecting the code");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped inspecting the code");
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<InspectCodeAction> b = new Vector<InspectCodeAction>();
					for (int i = 0; i < allActions.size(); i++) {
						InspectCodeAction c = (InspectCodeAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop correcting code")) {
				Vector<CorrectCodeAction> allActions = state
						.getActionStateRepository()
						.getCorrectCodeActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CorrectCodeAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CorrectCodeAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped correcting code");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped correcting code");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped correcting code");
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CorrectCodeAction> b = new Vector<CorrectCodeAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CorrectCodeAction c = (CorrectCodeAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop integrating code")) {
				Vector<IntegrateCodeAction> allActions = state
						.getActionStateRepository()
						.getIntegrateCodeActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					IntegrateCodeAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						IntegrateCodeAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped integrating code");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped integrating code");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped integrating code");
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<IntegrateCodeAction> b = new Vector<IntegrateCodeAction>();
					for (int i = 0; i < allActions.size(); i++) {
						IntegrateCodeAction c = (IntegrateCodeAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop doing the system test")) {
				Vector<SystemTestAction> allActions = state
						.getActionStateRepository()
						.getSystemTestActionStateRepository().getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					SystemTestAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						SystemTestAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped doing the system test");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped doing the system test");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped doing the system test");
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<SystemTestAction> b = new Vector<SystemTestAction>();
					for (int i = 0; i < allActions.size(); i++) {
						SystemTestAction c = (SystemTestAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop creating the system test plan")) {
				Vector<CreateSystemTestPlanAction> allActions = state
						.getActionStateRepository()
						.getCreateSystemTestPlanActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CreateSystemTestPlanAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CreateSystemTestPlanAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped creating the system test plan");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped creating the system test plan");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped creating the system test plan");
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CreateSystemTestPlanAction> b = new Vector<CreateSystemTestPlanAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CreateSystemTestPlanAction c = (CreateSystemTestPlanAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop reviewing the system test plan")) {
				Vector<ReviewSystemTestPlanAction> allActions = state
						.getActionStateRepository()
						.getReviewSystemTestPlanActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					ReviewSystemTestPlanAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						ReviewSystemTestPlanAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped reviewing the system test plan");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped reviewing the system test plan");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped reviewing the system test plan");
									}
								}
								state.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<ReviewSystemTestPlanAction> b = new Vector<ReviewSystemTestPlanAction>();
					for (int i = 0; i < allActions.size(); i++) {
						ReviewSystemTestPlanAction c = (ReviewSystemTestPlanAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			} else if (s.equals("Stop correcting the system test plan")) {
				Vector<CorrectSystemTestPlanAction> allActions = state
						.getActionStateRepository()
						.getCorrectSystemTestPlanActionStateRepository()
						.getAllActions();
				int a = 0;
				for (int i = 0; i < allActions.size(); i++) {
					CorrectSystemTestPlanAction b = allActions.elementAt(i);
					if (b.getAllParticipants().contains(e)) {
						a++;
					}
				}
				if (a == 1) {
					for (int i = 0; i < allActions.size(); i++) {
						CorrectSystemTestPlanAction b = allActions.elementAt(i);
						if (b.getAllEmps().contains(e)) {
							b.removeEmp(e);
							e.setOverheadText("I've stopped correcting the system test plan");
							if (b.getAllEmps().size() < 1) {
								Vector<SSObject> c = b.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										((Employee) d)
												.setOverheadText("I've stopped correcting the system test plan");
									} else if (d instanceof Customer) {
										((Customer) d)
												.setOverheadText("I've stopped correcting the system test plan");
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(b);
							}
						}
					}
				} else {
					Vector<CorrectSystemTestPlanAction> b = new Vector<CorrectSystemTestPlanAction>();
					for (int i = 0; i < allActions.size(); i++) {
						CorrectSystemTestPlanAction c = (CorrectSystemTestPlanAction) allActions
								.elementAt(i);
						if ((c.getAllEmps().contains(e)) && (!(b.contains(c)))) {
							b.add(c);
						}
					}
					new ChooseActionToDestroyDialog(parent, b, state, e,
							ruleExec, s);
				}
			}
		}
		// update all employees' menus:
		Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
		for (int i = 0; i < allEmps.size(); i++) {
			allEmps.elementAt(i).clearMenu();
		}
		// update trigger checker:
		trigChecker.update(true, parent);
		// update destroyer checker:
		destChecker.update(true, parent);
		// update gui:
		((SimSEGUI) parent).update();
	}
}
