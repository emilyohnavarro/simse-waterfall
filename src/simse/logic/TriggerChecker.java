/* File generated by: simse.codegenerator.logicgenerator.TriggerCheckerGenerator */
package simse.logic;

import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;

public class TriggerChecker {
	private State state;
	private RuleExecutor ruleExec;
	private Random ranNumGen;

	public TriggerChecker(State s, RuleExecutor r) {
		state = s;
		ruleExec = r;
		ranNumGen = new Random();
	}

	public void update(boolean updateUserTrigsOnly, JFrame gui) {
		if (!updateUserTrigsOnly) {
			Vector<Employee> quitters0 = new Vector<Employee>();
			Vector<SoftwareEngineer> softwareengineers = state
					.getEmployeeStateRepository()
					.getSoftwareEngineerStateRepository().getAll();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<QuitAction> allActions = state
						.getActionStateRepository()
						.getQuitActionStateRepository().getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					QuitAction b = allActions.elementAt(j);
					if (b.getAllQuitters().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false) && (a.getMood() == 0.0)) {
					quitters0.add(a);
				}
			}
			while ((quitters0.size() >= 1)) {
				QuitAction a = new QuitAction();
				for (int i = 0; i < 1; i++) {
					if (quitters0.size() > 0) {
						Employee a0 = quitters0.remove(0);
						a.addQuitter(a0);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
						((Employee) tempObj).setOverheadText("I QUIT!");
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("I QUIT!");
					}
				}
				state.getActionStateRepository().getQuitActionStateRepository()
						.add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"QuitDestroyObjectsRuleA", a);
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Employee> sickpersons1 = new Vector<Employee>();
			Vector<SoftwareEngineer> softwareengineers = state
					.getEmployeeStateRepository()
					.getSoftwareEngineerStateRepository().getAll();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<GetSickAction> allActions = state
						.getActionStateRepository()
						.getGetSickActionStateRepository().getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					GetSickAction b = allActions.elementAt(j);
					if (b.getAllSickPersons().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false) && (a.getEnergy() >= 1.0)
						&& (a.getOnBreak() == false)) {
					sickpersons1.add(a);
				}
			}
			while ((sickpersons1.size() >= 1)) {
				GetSickAction a = new GetSickAction();
				for (int i = 0; i < 1; i++) {
					if (sickpersons1.size() > 0) {
						Employee a0 = sickpersons1.remove(0);
						a.addSickPerson(a0);
					} else {
						break;
					}
				}
				if ((ranNumGen.nextDouble() * 100.0) < 0.25) {
					// set all overhead texts:
					Vector<SSObject> allPart = a.getAllParticipants();
					for (int i = 0; i < allPart.size(); i++) {
						SSObject tempObj = allPart.elementAt(i);
						if (tempObj instanceof Employee) {
							((Employee) tempObj)
									.setOverheadText("Aaaa-CHOO! I'm sick!");
						} else if (tempObj instanceof Customer) {
							((Customer) tempObj)
									.setOverheadText("Aaaa-CHOO! I'm sick!");
						}
					}
					state.getActionStateRepository()
							.getGetSickActionStateRepository().add(a);
					ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
							"GetSickTrigRule", a);
				}
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Employee> breakers2 = new Vector<Employee>();
			Vector<SoftwareEngineer> softwareengineers = state
					.getEmployeeStateRepository()
					.getSoftwareEngineerStateRepository().getAll();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<BreakAction> allActions = state
						.getActionStateRepository()
						.getBreakActionStateRepository().getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					BreakAction b = allActions.elementAt(j);
					if (b.getAllBreakers().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false) && (a.getEnergy() <= 0.2)
						&& (a.getHealth() >= 1.0) && (a.getOnBreak() == false)) {
					breakers2.add(a);
				}
			}
			while ((breakers2.size() >= 1)) {
				BreakAction a = new BreakAction();
				for (int i = 0; i < 1; i++) {
					if (breakers2.size() > 0) {
						Employee a0 = breakers2.remove(0);
						a.addBreaker(a0);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
						((Employee) tempObj)
								.setOverheadText("I'm tired... Going on a break now");
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj)
								.setOverheadText("I'm tired... Going on a break now");
					}
				}
				state.getActionStateRepository()
						.getBreakActionStateRepository().add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "BreakTrigRule",
						a);
			}
		}
		Vector<Employee> emps3 = new Vector<Employee>();
		Vector<SoftwareEngineer> softwareengineers = state
				.getEmployeeStateRepository()
				.getSoftwareEngineerStateRepository().getAll();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<GiveBonusAction> allActions = state
					.getActionStateRepository()
					.getGiveBonusActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				GiveBonusAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				emps3.add(a);
			}
		}
		Vector<Project> projectwithbudgets3 = new Vector<Project>();
		Vector<SEProject> seprojects = state.getProjectStateRepository()
				.getSEProjectStateRepository().getAll();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<GiveBonusAction> allActions = state
					.getActionStateRepository()
					.getGiveBonusActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projectwithbudgets3.add(a);
			}
		}
		if ((emps3.size() >= 1) && (projectwithbudgets3.size() >= 1)) {
			for (int j = 0; j < emps3.size(); j++) {
				Employee z = (Employee) emps3.elementAt(j);
				z.addMenuItem("Give bonus");
			}
		}
		Vector<Employee> emps4 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<ChangePayRateAction> allActions = state
					.getActionStateRepository()
					.getChangePayRateActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ChangePayRateAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				emps4.add(a);
			}
		}
		if ((emps4.size() >= 1)) {
			for (int j = 0; j < emps4.size(); j++) {
				Employee z = (Employee) emps4.elementAt(j);
				z.addMenuItem("Change pay rate");
			}
		}
		Vector<Employee> emps5 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateRequirementsAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps5.add(a);
			}
		}
		Vector<Artifact> reqdocs5 = new Vector<Artifact>();
		Vector<RequirementsDocument> requirementsdocuments = state
				.getArtifactStateRepository()
				.getRequirementsDocumentStateRepository().getAll();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateRequirementsAction b = allActions.elementAt(j);
				if (b.getAllReqDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getPercentComplete() < 100.0)) {
				reqdocs5.add(a);
			}
		}
		Vector<Project> projs5 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs5.add(a);
			}
		}
		Vector<Tool> requirementscapturetools5 = new Vector<Tool>();
		Vector<RequirementsCaptureTool> requirementscapturetools = state
				.getToolStateRepository()
				.getRequirementsCaptureToolStateRepository().getAll();
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			RequirementsCaptureTool a = requirementscapturetools.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				requirementscapturetools5.add(a);
			}
		}
		Vector<Artifact> associatedcodedocs5 = new Vector<Artifact>();
		Vector<Code> codes = state.getArtifactStateRepository()
				.getCodeStateRepository().getAll();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateRequirementsAction b = allActions.elementAt(j);
				if (b.getAllAssociatedCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedcodedocs5.add(a);
			}
		}
		Vector<Artifact> associateddesigndocs5 = new Vector<Artifact>();
		Vector<DesignDocument> designdocuments = state
				.getArtifactStateRepository()
				.getDesignDocumentStateRepository().getAll();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateRequirementsAction b = allActions.elementAt(j);
				if (b.getAllAssociatedDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associateddesigndocs5.add(a);
			}
		}
		Vector<Artifact> associatedsystemtestplans5 = new Vector<Artifact>();
		Vector<SystemTestPlan> systemtestplans = state
				.getArtifactStateRepository()
				.getSystemTestPlanStateRepository().getAll();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<CreateRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCreateRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateRequirementsAction b = allActions.elementAt(j);
				if (b.getAllAssociatedSystemTestPlans().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedsystemtestplans5.add(a);
			}
		}
		if ((emps5.size() >= 1) && (reqdocs5.size() >= 1)
				&& (projs5.size() >= 1)
				&& (requirementscapturetools5.size() >= 0)
				&& (associatedcodedocs5.size() >= 1)
				&& (associateddesigndocs5.size() >= 1)
				&& (associatedsystemtestplans5.size() >= 1)) {
			for (int j = 0; j < emps5.size(); j++) {
				Employee z = (Employee) emps5.elementAt(j);
				z.addMenuItem("Create Requirements Document");
			}
		}
		Vector a7s = state.getActionStateRepository()
				.getCreateRequirementsActionStateRepository().getAllActions();
		if (a7s.size() == 0) {
			Vector f7 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f7.size(); i++) {
				((Employee) f7.elementAt(i))
						.removeMenuItem("JOIN Create Requirements Document");
			}
		}
		for (int i = 0; i < a7s.size(); i++) {
			CreateRequirementsAction a7 = (CreateRequirementsAction) a7s
					.elementAt(i);
			if (a7.getAllEmps().size() < 999999) {
				Vector b7s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b7s.size(); j++) {
					Employee b7 = (Employee) b7s.elementAt(j);
					if (((b7 instanceof SoftwareEngineer))
							&& (a7.getAllEmps().contains(b7) == false)) {
						boolean z7 = true;
						for (int k = 0; k < a7s.size(); k++) {
							CreateRequirementsAction a7b = (CreateRequirementsAction) a7s
									.elementAt(k);
							if (a7b.getAllEmps().contains(b7)) {
								z7 = false;
								break;
							}
						}
						if (z7
								&& (b7.getMenu().contains(
										"JOIN Create Requirements Document") == false)) {
							if ((b7 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b7).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b7).getOnBreak() == false)) {
								b7.addMenuItem("JOIN Create Requirements Document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps6 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateDesignAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps6.add(a);
			}
		}
		Vector<Artifact> designdocs6 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateDesignAction b = allActions.elementAt(j);
				if (b.getAllDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getPercentComplete() < 100.0)) {
				designdocs6.add(a);
			}
		}
		Vector<Project> projs6 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs6.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs6 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateDesignAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs6.add(a);
			}
		}
		Vector<Tool> designenvironments6 = new Vector<Tool>();
		Vector<DesignEnvironment> designenvironments = state
				.getToolStateRepository().getDesignEnvironmentStateRepository()
				.getAll();
		for (int i = 0; i < designenvironments.size(); i++) {
			DesignEnvironment a = designenvironments.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				designenvironments6.add(a);
			}
		}
		Vector<Artifact> associatedcodedocs6 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<CreateDesignAction> allActions = state
					.getActionStateRepository()
					.getCreateDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateDesignAction b = allActions.elementAt(j);
				if (b.getAllAssociatedCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedcodedocs6.add(a);
			}
		}
		if ((emps6.size() >= 1) && (designdocs6.size() >= 1)
				&& (projs6.size() >= 1)
				&& (associatedrequirementsdocs6.size() >= 1)
				&& (designenvironments6.size() >= 0)
				&& (associatedcodedocs6.size() >= 1)) {
			for (int j = 0; j < emps6.size(); j++) {
				Employee z = (Employee) emps6.elementAt(j);
				z.addMenuItem("Create the design document");
			}
		}
		Vector a8s = state.getActionStateRepository()
				.getCreateDesignActionStateRepository().getAllActions();
		if (a8s.size() == 0) {
			Vector f8 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f8.size(); i++) {
				((Employee) f8.elementAt(i))
						.removeMenuItem("JOIN Create the design document");
			}
		}
		for (int i = 0; i < a8s.size(); i++) {
			CreateDesignAction a8 = (CreateDesignAction) a8s.elementAt(i);
			if (a8.getAllEmps().size() < 999999) {
				Vector b8s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b8s.size(); j++) {
					Employee b8 = (Employee) b8s.elementAt(j);
					if (((b8 instanceof SoftwareEngineer))
							&& (a8.getAllEmps().contains(b8) == false)) {
						boolean z8 = true;
						for (int k = 0; k < a8s.size(); k++) {
							CreateDesignAction a8b = (CreateDesignAction) a8s
									.elementAt(k);
							if (a8b.getAllEmps().contains(b8)) {
								z8 = false;
								break;
							}
						}
						if (z8
								&& (b8.getMenu().contains(
										"JOIN Create the design document") == false)) {
							if ((b8 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b8).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b8).getOnBreak() == false)) {
								b8.addMenuItem("JOIN Create the design document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps7 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateCodeAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps7.add(a);
			}
		}
		Vector<Artifact> codedocs7 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateCodeAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getPercentComplete() < 100.0)) {
				codedocs7.add(a);
			}
		}
		Vector<Project> projs7 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs7.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs7 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs7.add(a);
			}
		}
		Vector<Artifact> associateddesigndocuments7 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedDesignDocuments().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associateddesigndocuments7.add(a);
			}
		}
		Vector<Tool> developmentenvironments7 = new Vector<Tool>();
		Vector<IDE> ides = state.getToolStateRepository()
				.getIDEStateRepository().getAll();
		for (int i = 0; i < ides.size(); i++) {
			IDE a = ides.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				developmentenvironments7.add(a);
			}
		}
		Vector<Artifact> associatedsystemtestplans7 = new Vector<Artifact>();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<CreateCodeAction> allActions = state
					.getActionStateRepository()
					.getCreateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedSystemTestPlans().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedsystemtestplans7.add(a);
			}
		}
		if ((emps7.size() >= 1) && (codedocs7.size() >= 1)
				&& (projs7.size() >= 1)
				&& (associatedrequirementsdocs7.size() >= 1)
				&& (associateddesigndocuments7.size() >= 1)
				&& (developmentenvironments7.size() >= 0)
				&& (associatedsystemtestplans7.size() >= 1)) {
			for (int j = 0; j < emps7.size(); j++) {
				Employee z = (Employee) emps7.elementAt(j);
				z.addMenuItem("Create code");
			}
		}
		Vector a9s = state.getActionStateRepository()
				.getCreateCodeActionStateRepository().getAllActions();
		if (a9s.size() == 0) {
			Vector f9 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f9.size(); i++) {
				((Employee) f9.elementAt(i)).removeMenuItem("JOIN Create code");
			}
		}
		for (int i = 0; i < a9s.size(); i++) {
			CreateCodeAction a9 = (CreateCodeAction) a9s.elementAt(i);
			if (a9.getAllEmps().size() < 999999) {
				Vector b9s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b9s.size(); j++) {
					Employee b9 = (Employee) b9s.elementAt(j);
					if (((b9 instanceof SoftwareEngineer))
							&& (a9.getAllEmps().contains(b9) == false)) {
						boolean z9 = true;
						for (int k = 0; k < a9s.size(); k++) {
							CreateCodeAction a9b = (CreateCodeAction) a9s
									.elementAt(k);
							if (a9b.getAllEmps().contains(b9)) {
								z9 = false;
								break;
							}
						}
						if (z9
								&& (b9.getMenu().contains("JOIN Create code") == false)) {
							if ((b9 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b9).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b9).getOnBreak() == false)) {
								b9.addMenuItem("JOIN Create code");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps8 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<ReviewRequirementsAction> allActions = state
					.getActionStateRepository()
					.getReviewRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewRequirementsAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps8.add(a);
			}
		}
		Vector<Artifact> requirementsdocs8 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<ReviewRequirementsAction> allActions = state
					.getActionStateRepository()
					.getReviewRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewRequirementsAction b = allActions.elementAt(j);
				if (b.getAllRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)
					&& (a.getNumUnknownErrors() > 0.0)) {
				requirementsdocs8.add(a);
			}
		}
		Vector<Project> projs8 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<ReviewRequirementsAction> allActions = state
					.getActionStateRepository()
					.getReviewRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs8.add(a);
			}
		}
		if ((emps8.size() >= 1) && (requirementsdocs8.size() >= 1)
				&& (projs8.size() >= 1)) {
			for (int j = 0; j < emps8.size(); j++) {
				Employee z = (Employee) emps8.elementAt(j);
				z.addMenuItem("Review requirements document");
			}
		}
		Vector a10s = state.getActionStateRepository()
				.getReviewRequirementsActionStateRepository().getAllActions();
		if (a10s.size() == 0) {
			Vector f10 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f10.size(); i++) {
				((Employee) f10.elementAt(i))
						.removeMenuItem("JOIN Review requirements document");
			}
		}
		for (int i = 0; i < a10s.size(); i++) {
			ReviewRequirementsAction a10 = (ReviewRequirementsAction) a10s
					.elementAt(i);
			if (a10.getAllEmps().size() < 999999) {
				Vector b10s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b10s.size(); j++) {
					Employee b10 = (Employee) b10s.elementAt(j);
					if (((b10 instanceof SoftwareEngineer))
							&& (a10.getAllEmps().contains(b10) == false)) {
						boolean z10 = true;
						for (int k = 0; k < a10s.size(); k++) {
							ReviewRequirementsAction a10b = (ReviewRequirementsAction) a10s
									.elementAt(k);
							if (a10b.getAllEmps().contains(b10)) {
								z10 = false;
								break;
							}
						}
						if (z10
								&& (b10.getMenu().contains(
										"JOIN Review requirements document") == false)) {
							if ((b10 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b10).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b10).getOnBreak() == false)) {
								b10.addMenuItem("JOIN Review requirements document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps9 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<ReviewDesignAction> allActions = state
					.getActionStateRepository()
					.getReviewDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewDesignAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps9.add(a);
			}
		}
		Vector<Artifact> designdocs9 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<ReviewDesignAction> allActions = state
					.getActionStateRepository()
					.getReviewDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewDesignAction b = allActions.elementAt(j);
				if (b.getAllDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)
					&& (a.getNumUnknownErrors() > 0.0)) {
				designdocs9.add(a);
			}
		}
		Vector<Project> projs9 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<ReviewDesignAction> allActions = state
					.getActionStateRepository()
					.getReviewDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs9.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs9 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<ReviewDesignAction> allActions = state
					.getActionStateRepository()
					.getReviewDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewDesignAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs9.add(a);
			}
		}
		if ((emps9.size() >= 1) && (designdocs9.size() >= 1)
				&& (projs9.size() >= 1)
				&& (associatedrequirementsdocs9.size() >= 1)) {
			for (int j = 0; j < emps9.size(); j++) {
				Employee z = (Employee) emps9.elementAt(j);
				z.addMenuItem("Review the design document");
			}
		}
		Vector a11s = state.getActionStateRepository()
				.getReviewDesignActionStateRepository().getAllActions();
		if (a11s.size() == 0) {
			Vector f11 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f11.size(); i++) {
				((Employee) f11.elementAt(i))
						.removeMenuItem("JOIN Review the design document");
			}
		}
		for (int i = 0; i < a11s.size(); i++) {
			ReviewDesignAction a11 = (ReviewDesignAction) a11s.elementAt(i);
			if (a11.getAllEmps().size() < 999999) {
				Vector b11s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b11s.size(); j++) {
					Employee b11 = (Employee) b11s.elementAt(j);
					if (((b11 instanceof SoftwareEngineer))
							&& (a11.getAllEmps().contains(b11) == false)) {
						boolean z11 = true;
						for (int k = 0; k < a11s.size(); k++) {
							ReviewDesignAction a11b = (ReviewDesignAction) a11s
									.elementAt(k);
							if (a11b.getAllEmps().contains(b11)) {
								z11 = false;
								break;
							}
						}
						if (z11
								&& (b11.getMenu().contains(
										"JOIN Review the design document") == false)) {
							if ((b11 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b11).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b11).getOnBreak() == false)) {
								b11.addMenuItem("JOIN Review the design document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps10 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<InspectCodeAction> allActions = state
					.getActionStateRepository()
					.getInspectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				InspectCodeAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps10.add(a);
			}
		}
		Vector<Artifact> codedocs10 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<InspectCodeAction> allActions = state
					.getActionStateRepository()
					.getInspectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				InspectCodeAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
				codedocs10.add(a);
			}
		}
		Vector<Project> projs10 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<InspectCodeAction> allActions = state
					.getActionStateRepository()
					.getInspectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs10.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs10 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<InspectCodeAction> allActions = state
					.getActionStateRepository()
					.getInspectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				InspectCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs10.add(a);
			}
		}
		Vector<Artifact> associateddesigndocs10 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<InspectCodeAction> allActions = state
					.getActionStateRepository()
					.getInspectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				InspectCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associateddesigndocs10.add(a);
			}
		}
		if ((emps10.size() >= 3) && (codedocs10.size() >= 1)
				&& (projs10.size() >= 1)
				&& (associatedrequirementsdocs10.size() >= 1)
				&& (associateddesigndocs10.size() >= 1)) {
			for (int j = 0; j < emps10.size(); j++) {
				Employee z = (Employee) emps10.elementAt(j);
				z.addMenuItem("Inspect the code");
			}
		}
		Vector a12s = state.getActionStateRepository()
				.getInspectCodeActionStateRepository().getAllActions();
		if (a12s.size() == 0) {
			Vector f12 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f12.size(); i++) {
				((Employee) f12.elementAt(i))
						.removeMenuItem("JOIN Inspect the code");
			}
		}
		for (int i = 0; i < a12s.size(); i++) {
			InspectCodeAction a12 = (InspectCodeAction) a12s.elementAt(i);
			if (a12.getAllEmps().size() < 999999) {
				Vector b12s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b12s.size(); j++) {
					Employee b12 = (Employee) b12s.elementAt(j);
					if (((b12 instanceof SoftwareEngineer))
							&& (a12.getAllEmps().contains(b12) == false)) {
						boolean z12 = true;
						for (int k = 0; k < a12s.size(); k++) {
							InspectCodeAction a12b = (InspectCodeAction) a12s
									.elementAt(k);
							if (a12b.getAllEmps().contains(b12)) {
								z12 = false;
								break;
							}
						}
						if (z12
								&& (b12.getMenu().contains(
										"JOIN Inspect the code") == false)) {
							if ((b12 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b12).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b12).getOnBreak() == false)) {
								b12.addMenuItem("JOIN Inspect the code");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps11 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CorrectRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCorrectRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectRequirementsAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps11.add(a);
			}
		}
		Vector<Artifact> requirementsdocs11 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CorrectRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCorrectRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectRequirementsAction b = allActions.elementAt(j);
				if (b.getAllRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getNumKnownErrors() > 0.0)) {
				requirementsdocs11.add(a);
			}
		}
		Vector<Project> projs11 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CorrectRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCorrectRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs11.add(a);
			}
		}
		Vector<Tool> requirementscapturetools11 = new Vector<Tool>();
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			RequirementsCaptureTool a = requirementscapturetools.elementAt(i);
			Vector<CorrectRequirementsAction> allActions = state
					.getActionStateRepository()
					.getCorrectRequirementsActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				requirementscapturetools11.add(a);
			}
		}
		if ((emps11.size() >= 1) && (requirementsdocs11.size() >= 1)
				&& (projs11.size() >= 1)
				&& (requirementscapturetools11.size() >= 0)) {
			for (int j = 0; j < emps11.size(); j++) {
				Employee z = (Employee) emps11.elementAt(j);
				z.addMenuItem("Correct the requirements document");
			}
		}
		Vector a13s = state.getActionStateRepository()
				.getCorrectRequirementsActionStateRepository().getAllActions();
		if (a13s.size() == 0) {
			Vector f13 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f13.size(); i++) {
				((Employee) f13.elementAt(i))
						.removeMenuItem("JOIN Correct the requirements document");
			}
		}
		for (int i = 0; i < a13s.size(); i++) {
			CorrectRequirementsAction a13 = (CorrectRequirementsAction) a13s
					.elementAt(i);
			if (a13.getAllEmps().size() < 999999) {
				Vector b13s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b13s.size(); j++) {
					Employee b13 = (Employee) b13s.elementAt(j);
					if (((b13 instanceof SoftwareEngineer))
							&& (a13.getAllEmps().contains(b13) == false)) {
						boolean z13 = true;
						for (int k = 0; k < a13s.size(); k++) {
							CorrectRequirementsAction a13b = (CorrectRequirementsAction) a13s
									.elementAt(k);
							if (a13b.getAllEmps().contains(b13)) {
								z13 = false;
								break;
							}
						}
						if (z13
								&& (b13.getMenu()
										.contains(
												"JOIN Correct the requirements document") == false)) {
							if ((b13 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b13).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b13).getOnBreak() == false)) {
								b13.addMenuItem("JOIN Correct the requirements document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps12 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CorrectDesignAction> allActions = state
					.getActionStateRepository()
					.getCorrectDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectDesignAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps12.add(a);
			}
		}
		Vector<Artifact> designdocs12 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<CorrectDesignAction> allActions = state
					.getActionStateRepository()
					.getCorrectDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectDesignAction b = allActions.elementAt(j);
				if (b.getAllDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getNumKnownErrors() > 0.0)) {
				designdocs12.add(a);
			}
		}
		Vector<Project> projs12 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CorrectDesignAction> allActions = state
					.getActionStateRepository()
					.getCorrectDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs12.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs12 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CorrectDesignAction> allActions = state
					.getActionStateRepository()
					.getCorrectDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectDesignAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs12.add(a);
			}
		}
		Vector<Tool> designenvironments12 = new Vector<Tool>();
		for (int i = 0; i < designenvironments.size(); i++) {
			DesignEnvironment a = designenvironments.elementAt(i);
			Vector<CorrectDesignAction> allActions = state
					.getActionStateRepository()
					.getCorrectDesignActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				designenvironments12.add(a);
			}
		}
		if ((emps12.size() >= 1) && (designdocs12.size() >= 1)
				&& (projs12.size() >= 1)
				&& (associatedrequirementsdocs12.size() >= 1)
				&& (designenvironments12.size() >= 0)) {
			for (int j = 0; j < emps12.size(); j++) {
				Employee z = (Employee) emps12.elementAt(j);
				z.addMenuItem("Correct the design document");
			}
		}
		Vector a14s = state.getActionStateRepository()
				.getCorrectDesignActionStateRepository().getAllActions();
		if (a14s.size() == 0) {
			Vector f14 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f14.size(); i++) {
				((Employee) f14.elementAt(i))
						.removeMenuItem("JOIN Correct the design document");
			}
		}
		for (int i = 0; i < a14s.size(); i++) {
			CorrectDesignAction a14 = (CorrectDesignAction) a14s.elementAt(i);
			if (a14.getAllEmps().size() < 999999) {
				Vector b14s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b14s.size(); j++) {
					Employee b14 = (Employee) b14s.elementAt(j);
					if (((b14 instanceof SoftwareEngineer))
							&& (a14.getAllEmps().contains(b14) == false)) {
						boolean z14 = true;
						for (int k = 0; k < a14s.size(); k++) {
							CorrectDesignAction a14b = (CorrectDesignAction) a14s
									.elementAt(k);
							if (a14b.getAllEmps().contains(b14)) {
								z14 = false;
								break;
							}
						}
						if (z14
								&& (b14.getMenu().contains(
										"JOIN Correct the design document") == false)) {
							if ((b14 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b14).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b14).getOnBreak() == false)) {
								b14.addMenuItem("JOIN Correct the design document");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps13 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectCodeAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps13.add(a);
			}
		}
		Vector<Artifact> codedocs13 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectCodeAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getNumKnownErrors() > 0.0)) {
				codedocs13.add(a);
			}
		}
		Vector<Project> projs13 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs13.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs13 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs13.add(a);
			}
		}
		Vector<Artifact> associateddesigndocs13 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associateddesigndocs13.add(a);
			}
		}
		Vector<Tool> developmentenvironments13 = new Vector<Tool>();
		for (int i = 0; i < ides.size(); i++) {
			IDE a = ides.elementAt(i);
			Vector<CorrectCodeAction> allActions = state
					.getActionStateRepository()
					.getCorrectCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				developmentenvironments13.add(a);
			}
		}
		if ((emps13.size() >= 1) && (codedocs13.size() >= 1)
				&& (projs13.size() >= 1)
				&& (associatedrequirementsdocs13.size() >= 1)
				&& (associateddesigndocs13.size() >= 1)
				&& (developmentenvironments13.size() >= 0)) {
			for (int j = 0; j < emps13.size(); j++) {
				Employee z = (Employee) emps13.elementAt(j);
				z.addMenuItem("Correct code");
			}
		}
		Vector a15s = state.getActionStateRepository()
				.getCorrectCodeActionStateRepository().getAllActions();
		if (a15s.size() == 0) {
			Vector f15 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f15.size(); i++) {
				((Employee) f15.elementAt(i))
						.removeMenuItem("JOIN Correct code");
			}
		}
		for (int i = 0; i < a15s.size(); i++) {
			CorrectCodeAction a15 = (CorrectCodeAction) a15s.elementAt(i);
			if (a15.getAllEmps().size() < 999999) {
				Vector b15s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b15s.size(); j++) {
					Employee b15 = (Employee) b15s.elementAt(j);
					if (((b15 instanceof SoftwareEngineer))
							&& (a15.getAllEmps().contains(b15) == false)) {
						boolean z15 = true;
						for (int k = 0; k < a15s.size(); k++) {
							CorrectCodeAction a15b = (CorrectCodeAction) a15s
									.elementAt(k);
							if (a15b.getAllEmps().contains(b15)) {
								z15 = false;
								break;
							}
						}
						if (z15
								&& (b15.getMenu().contains("JOIN Correct code") == false)) {
							if ((b15 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b15).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b15).getOnBreak() == false)) {
								b15.addMenuItem("JOIN Correct code");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps14 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				IntegrateCodeAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps14.add(a);
			}
		}
		Vector<Artifact> codedocs14 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				IntegrateCodeAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)
					&& (a.getPercentIntegrated() < 100.0)) {
				codedocs14.add(a);
			}
		}
		Vector<Project> projs14 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs14.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs14 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				IntegrateCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs14.add(a);
			}
		}
		Vector<Artifact> associateddesigndocs14 = new Vector<Artifact>();
		for (int i = 0; i < designdocuments.size(); i++) {
			DesignDocument a = designdocuments.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				IntegrateCodeAction b = allActions.elementAt(j);
				if (b.getAllAssociatedDesignDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associateddesigndocs14.add(a);
			}
		}
		Vector<Tool> developmentenvironments14 = new Vector<Tool>();
		for (int i = 0; i < ides.size(); i++) {
			IDE a = ides.elementAt(i);
			Vector<IntegrateCodeAction> allActions = state
					.getActionStateRepository()
					.getIntegrateCodeActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				developmentenvironments14.add(a);
			}
		}
		if ((emps14.size() >= 1) && (codedocs14.size() >= 1)
				&& (projs14.size() >= 1)
				&& (associatedrequirementsdocs14.size() >= 1)
				&& (associateddesigndocs14.size() >= 1)
				&& (developmentenvironments14.size() >= 0)) {
			for (int j = 0; j < emps14.size(); j++) {
				Employee z = (Employee) emps14.elementAt(j);
				z.addMenuItem("Integrate code");
			}
		}
		Vector a16s = state.getActionStateRepository()
				.getIntegrateCodeActionStateRepository().getAllActions();
		if (a16s.size() == 0) {
			Vector f16 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f16.size(); i++) {
				((Employee) f16.elementAt(i))
						.removeMenuItem("JOIN Integrate code");
			}
		}
		for (int i = 0; i < a16s.size(); i++) {
			IntegrateCodeAction a16 = (IntegrateCodeAction) a16s.elementAt(i);
			if (a16.getAllEmps().size() < 999999) {
				Vector b16s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b16s.size(); j++) {
					Employee b16 = (Employee) b16s.elementAt(j);
					if (((b16 instanceof SoftwareEngineer))
							&& (a16.getAllEmps().contains(b16) == false)) {
						boolean z16 = true;
						for (int k = 0; k < a16s.size(); k++) {
							IntegrateCodeAction a16b = (IntegrateCodeAction) a16s
									.elementAt(k);
							if (a16b.getAllEmps().contains(b16)) {
								z16 = false;
								break;
							}
						}
						if (z16
								&& (b16.getMenu().contains(
										"JOIN Integrate code") == false)) {
							if ((b16 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b16).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b16).getOnBreak() == false)) {
								b16.addMenuItem("JOIN Integrate code");
							}
						}
					}
				}
			}
		}
		Vector<Artifact> codedocs15 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<SystemTestAction> allActions = state
					.getActionStateRepository()
					.getSystemTestActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				SystemTestAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)
					&& (a.getPercentIntegrated() == 100.0)) {
				codedocs15.add(a);
			}
		}
		Vector<Project> projs15 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<SystemTestAction> allActions = state
					.getActionStateRepository()
					.getSystemTestActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs15.add(a);
			}
		}
		Vector<Employee> emps15 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<SystemTestAction> allActions = state
					.getActionStateRepository()
					.getSystemTestActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				SystemTestAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps15.add(a);
			}
		}
		Vector<Artifact> associatedsystemtestplans15 = new Vector<Artifact>();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<SystemTestAction> allActions = state
					.getActionStateRepository()
					.getSystemTestActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				SystemTestAction b = allActions.elementAt(j);
				if (b.getAllAssociatedSystemTestPlans().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
				associatedsystemtestplans15.add(a);
			}
		}
		Vector<Tool> testingtools15 = new Vector<Tool>();
		Vector<AutomatedTestingTool> automatedtestingtools = state
				.getToolStateRepository()
				.getAutomatedTestingToolStateRepository().getAll();
		for (int i = 0; i < automatedtestingtools.size(); i++) {
			AutomatedTestingTool a = automatedtestingtools.elementAt(i);
			Vector<SystemTestAction> allActions = state
					.getActionStateRepository()
					.getSystemTestActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				testingtools15.add(a);
			}
		}
		if ((codedocs15.size() >= 1) && (projs15.size() >= 1)
				&& (emps15.size() >= 1)
				&& (associatedsystemtestplans15.size() >= 1)
				&& (testingtools15.size() >= 0)) {
			for (int j = 0; j < emps15.size(); j++) {
				Employee z = (Employee) emps15.elementAt(j);
				z.addMenuItem("Do system test");
			}
		}
		Vector a17s = state.getActionStateRepository()
				.getSystemTestActionStateRepository().getAllActions();
		if (a17s.size() == 0) {
			Vector f17 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f17.size(); i++) {
				((Employee) f17.elementAt(i))
						.removeMenuItem("JOIN Do system test");
			}
		}
		for (int i = 0; i < a17s.size(); i++) {
			SystemTestAction a17 = (SystemTestAction) a17s.elementAt(i);
			if (a17.getAllEmps().size() < 999999) {
				Vector b17s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b17s.size(); j++) {
					Employee b17 = (Employee) b17s.elementAt(j);
					if (((b17 instanceof SoftwareEngineer))
							&& (a17.getAllEmps().contains(b17) == false)) {
						boolean z17 = true;
						for (int k = 0; k < a17s.size(); k++) {
							SystemTestAction a17b = (SystemTestAction) a17s
									.elementAt(k);
							if (a17b.getAllEmps().contains(b17)) {
								z17 = false;
								break;
							}
						}
						if (z17
								&& (b17.getMenu().contains(
										"JOIN Do system test") == false)) {
							if ((b17 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b17).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b17).getOnBreak() == false)) {
								b17.addMenuItem("JOIN Do system test");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps16 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps16.add(a);
			}
		}
		Vector<Artifact> associatedcodedocs16 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllAssociatedCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedcodedocs16.add(a);
			}
		}
		Vector<Project> projs16 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs16.add(a);
			}
		}
		Vector<Artifact> systemtestplandocs16 = new Vector<Artifact>();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllSystemTestPlanDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getPercentComplete() < 100.0)) {
				systemtestplandocs16.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs16 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CreateSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs16.add(a);
			}
		}
		Vector<Tool> testingtools16 = new Vector<Tool>();
		for (int i = 0; i < automatedtestingtools.size(); i++) {
			AutomatedTestingTool a = automatedtestingtools.elementAt(i);
			Vector<CreateSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCreateSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				testingtools16.add(a);
			}
		}
		if ((emps16.size() >= 1) && (associatedcodedocs16.size() >= 1)
				&& (projs16.size() >= 1) && (systemtestplandocs16.size() >= 1)
				&& (associatedrequirementsdocs16.size() >= 1)
				&& (testingtools16.size() >= 0)) {
			for (int j = 0; j < emps16.size(); j++) {
				Employee z = (Employee) emps16.elementAt(j);
				z.addMenuItem("Create the system test plan");
			}
		}
		Vector a18s = state.getActionStateRepository()
				.getCreateSystemTestPlanActionStateRepository().getAllActions();
		if (a18s.size() == 0) {
			Vector f18 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f18.size(); i++) {
				((Employee) f18.elementAt(i))
						.removeMenuItem("JOIN Create the system test plan");
			}
		}
		for (int i = 0; i < a18s.size(); i++) {
			CreateSystemTestPlanAction a18 = (CreateSystemTestPlanAction) a18s
					.elementAt(i);
			if (a18.getAllEmps().size() < 999999) {
				Vector b18s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b18s.size(); j++) {
					Employee b18 = (Employee) b18s.elementAt(j);
					if (((b18 instanceof SoftwareEngineer))
							&& (a18.getAllEmps().contains(b18) == false)) {
						boolean z18 = true;
						for (int k = 0; k < a18s.size(); k++) {
							CreateSystemTestPlanAction a18b = (CreateSystemTestPlanAction) a18s
									.elementAt(k);
							if (a18b.getAllEmps().contains(b18)) {
								z18 = false;
								break;
							}
						}
						if (z18
								&& (b18.getMenu().contains(
										"JOIN Create the system test plan") == false)) {
							if ((b18 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b18).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b18).getOnBreak() == false)) {
								b18.addMenuItem("JOIN Create the system test plan");
							}
						}
					}
				}
			}
		}
		Vector<Employee> firedpersons17 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<FireAction> allActions = state.getActionStateRepository()
					.getFireActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				FireAction b = allActions.elementAt(j);
				if (b.getAllFiredPersons().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getOnBreak() == false)) {
				firedpersons17.add(a);
			}
		}
		if ((firedpersons17.size() >= 1)) {
			for (int j = 0; j < firedpersons17.size(); j++) {
				Employee z = (Employee) firedpersons17.elementAt(j);
				z.addMenuItem("Fire");
			}
		}
		Vector<Employee> emps18 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<ReviewSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getReviewSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps18.add(a);
			}
		}
		Vector<Artifact> testplans18 = new Vector<Artifact>();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<ReviewSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getReviewSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllTestPlans().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getSize() > 0.0)) {
				testplans18.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs18 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<ReviewSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getReviewSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				ReviewSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs18.add(a);
			}
		}
		Vector<Project> projs18 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<ReviewSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getReviewSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs18.add(a);
			}
		}
		if ((emps18.size() >= 1) && (testplans18.size() >= 1)
				&& (associatedrequirementsdocs18.size() >= 1)
				&& (projs18.size() >= 1)) {
			for (int j = 0; j < emps18.size(); j++) {
				Employee z = (Employee) emps18.elementAt(j);
				z.addMenuItem("Review the system test plan");
			}
		}
		Vector a20s = state.getActionStateRepository()
				.getReviewSystemTestPlanActionStateRepository().getAllActions();
		if (a20s.size() == 0) {
			Vector f20 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f20.size(); i++) {
				((Employee) f20.elementAt(i))
						.removeMenuItem("JOIN Review the system test plan");
			}
		}
		for (int i = 0; i < a20s.size(); i++) {
			ReviewSystemTestPlanAction a20 = (ReviewSystemTestPlanAction) a20s
					.elementAt(i);
			if (a20.getAllEmps().size() < 999999) {
				Vector b20s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b20s.size(); j++) {
					Employee b20 = (Employee) b20s.elementAt(j);
					if (((b20 instanceof SoftwareEngineer))
							&& (a20.getAllEmps().contains(b20) == false)) {
						boolean z20 = true;
						for (int k = 0; k < a20s.size(); k++) {
							ReviewSystemTestPlanAction a20b = (ReviewSystemTestPlanAction) a20s
									.elementAt(k);
							if (a20b.getAllEmps().contains(b20)) {
								z20 = false;
								break;
							}
						}
						if (z20
								&& (b20.getMenu().contains(
										"JOIN Review the system test plan") == false)) {
							if ((b20 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b20).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b20).getOnBreak() == false)) {
								b20.addMenuItem("JOIN Review the system test plan");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps19 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<CorrectSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCorrectSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 1.0)
					&& (a.getOnBreak() == false)) {
				emps19.add(a);
			}
		}
		Vector<Artifact> testplans19 = new Vector<Artifact>();
		for (int i = 0; i < systemtestplans.size(); i++) {
			SystemTestPlan a = systemtestplans.elementAt(i);
			Vector<CorrectSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCorrectSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllTestPlans().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getNumKnownErrors() > 0.0)) {
				testplans19.add(a);
			}
		}
		Vector<Artifact> associatedrequirementsdocs19 = new Vector<Artifact>();
		for (int i = 0; i < requirementsdocuments.size(); i++) {
			RequirementsDocument a = requirementsdocuments.elementAt(i);
			Vector<CorrectSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCorrectSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				CorrectSystemTestPlanAction b = allActions.elementAt(j);
				if (b.getAllAssociatedRequirementsDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				associatedrequirementsdocs19.add(a);
			}
		}
		Vector<Project> projs19 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<CorrectSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCorrectSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs19.add(a);
			}
		}
		Vector<Tool> testingtools19 = new Vector<Tool>();
		for (int i = 0; i < automatedtestingtools.size(); i++) {
			AutomatedTestingTool a = automatedtestingtools.elementAt(i);
			Vector<CorrectSystemTestPlanAction> allActions = state
					.getActionStateRepository()
					.getCorrectSystemTestPlanActionStateRepository()
					.getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == true)) {
				testingtools19.add(a);
			}
		}
		if ((emps19.size() >= 1) && (testplans19.size() >= 1)
				&& (associatedrequirementsdocs19.size() >= 1)
				&& (projs19.size() >= 1) && (testingtools19.size() >= 0)) {
			for (int j = 0; j < emps19.size(); j++) {
				Employee z = (Employee) emps19.elementAt(j);
				z.addMenuItem("Correct the system test plan");
			}
		}
		Vector a21s = state.getActionStateRepository()
				.getCorrectSystemTestPlanActionStateRepository()
				.getAllActions();
		if (a21s.size() == 0) {
			Vector f21 = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < f21.size(); i++) {
				((Employee) f21.elementAt(i))
						.removeMenuItem("JOIN Correct the system test plan");
			}
		}
		for (int i = 0; i < a21s.size(); i++) {
			CorrectSystemTestPlanAction a21 = (CorrectSystemTestPlanAction) a21s
					.elementAt(i);
			if (a21.getAllEmps().size() < 999999) {
				Vector b21s = state.getEmployeeStateRepository().getAll();
				for (int j = 0; j < b21s.size(); j++) {
					Employee b21 = (Employee) b21s.elementAt(j);
					if (((b21 instanceof SoftwareEngineer))
							&& (a21.getAllEmps().contains(b21) == false)) {
						boolean z21 = true;
						for (int k = 0; k < a21s.size(); k++) {
							CorrectSystemTestPlanAction a21b = (CorrectSystemTestPlanAction) a21s
									.elementAt(k);
							if (a21b.getAllEmps().contains(b21)) {
								z21 = false;
								break;
							}
						}
						if (z21
								&& (b21.getMenu().contains(
										"JOIN Correct the system test plan") == false)) {
							if ((b21 instanceof SoftwareEngineer)
									&& (((SoftwareEngineer) b21).getHealth() >= 1.0)
									&& (((SoftwareEngineer) b21).getOnBreak() == false)) {
								b21.addMenuItem("JOIN Correct the system test plan");
							}
						}
					}
				}
			}
		}
		Vector<Employee> emps20 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<DeliverProductAction> allActions = state
					.getActionStateRepository()
					.getDeliverProductActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				DeliverProductAction b = allActions.elementAt(j);
				if (b.getAllEmps().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false) && (a.getHealth() >= 0.7)) {
				emps20.add(a);
			}
		}
		Vector<Project> projs20 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<DeliverProductAction> allActions = state
					.getActionStateRepository()
					.getDeliverProductActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs20.add(a);
			}
		}
		Vector<Artifact> codedocs20 = new Vector<Artifact>();
		for (int i = 0; i < codes.size(); i++) {
			Code a = codes.elementAt(i);
			Vector<DeliverProductAction> allActions = state
					.getActionStateRepository()
					.getDeliverProductActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				DeliverProductAction b = allActions.elementAt(j);
				if (b.getAllCodeDocs().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				codedocs20.add(a);
			}
		}
		Vector<Customer> custs20 = new Vector<Customer>();
		Vector<ACustomer> acustomers = state.getCustomerStateRepository()
				.getACustomerStateRepository().getAll();
		for (int i = 0; i < acustomers.size(); i++) {
			ACustomer a = acustomers.elementAt(i);
			Vector<DeliverProductAction> allActions = state
					.getActionStateRepository()
					.getDeliverProductActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				custs20.add(a);
			}
		}
		if ((emps20.size() >= 1) && (projs20.size() >= 1)
				&& (codedocs20.size() >= 1) && (custs20.size() >= 1)) {
			for (int j = 0; j < emps20.size(); j++) {
				Employee z = (Employee) emps20.elementAt(j);
				z.addMenuItem("Deliver product to customer");
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Customer> custs21 = new Vector<Customer>();
			for (int i = 0; i < acustomers.size(); i++) {
				ACustomer a = acustomers.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false)) {
					custs21.add(a);
				}
			}
			Vector<Artifact> associatedrequirementsdocuments21 = new Vector<Artifact>();
			for (int i = 0; i < requirementsdocuments.size(); i++) {
				RequirementsDocument a = requirementsdocuments.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					IntroduceNewRequirementsAction b = allActions.elementAt(j);
					if (b.getAllAssociatedRequirementsDocuments().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					associatedrequirementsdocuments21.add(a);
				}
			}
			Vector<Project> projs21 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false)) {
					projs21.add(a);
				}
			}
			Vector<Employee> empwoverheadtexts21 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					IntroduceNewRequirementsAction b = allActions.elementAt(j);
					if (b.getAllEmpWOverheadTexts().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					empwoverheadtexts21.add(a);
				}
			}
			Vector<Artifact> associatedcodes21 = new Vector<Artifact>();
			for (int i = 0; i < codes.size(); i++) {
				Code a = codes.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					IntroduceNewRequirementsAction b = allActions.elementAt(j);
					if (b.getAllAssociatedCodes().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					associatedcodes21.add(a);
				}
			}
			Vector<Artifact> associateddesigndocuments21 = new Vector<Artifact>();
			for (int i = 0; i < designdocuments.size(); i++) {
				DesignDocument a = designdocuments.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					IntroduceNewRequirementsAction b = allActions.elementAt(j);
					if (b.getAllAssociatedDesignDocuments().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					associateddesigndocuments21.add(a);
				}
			}
			Vector<Artifact> associatedsystemtestplans21 = new Vector<Artifact>();
			for (int i = 0; i < systemtestplans.size(); i++) {
				SystemTestPlan a = systemtestplans.elementAt(i);
				Vector<IntroduceNewRequirementsAction> allActions = state
						.getActionStateRepository()
						.getIntroduceNewRequirementsActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					IntroduceNewRequirementsAction b = allActions.elementAt(j);
					if (b.getAllAssociatedSystemTestPlans().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					associatedsystemtestplans21.add(a);
				}
			}
			while ((custs21.size() >= 1)
					&& (associatedrequirementsdocuments21.size() >= 1)
					&& (projs21.size() >= 1)
					&& (empwoverheadtexts21.size() >= 1)
					&& (associatedcodes21.size() >= 1)
					&& (associateddesigndocuments21.size() >= 1)
					&& (associatedsystemtestplans21.size() >= 1)) {
				IntroduceNewRequirementsAction a = new IntroduceNewRequirementsAction();
				for (int i = 0; i < 1; i++) {
					if (custs21.size() > 0) {
						Customer a0 = custs21.elementAt(0);
						a.addCust(a0);
					} else {
						break;
					}
				}
				for (int i = 0; i < 1; i++) {
					if (associatedrequirementsdocuments21.size() > 0) {
						Artifact a1 = associatedrequirementsdocuments21
								.remove(0);
						a.addAssociatedRequirementsDocument(a1);
					} else {
						break;
					}
				}
				for (int i = 0; i < 1; i++) {
					if (projs21.size() > 0) {
						Project a2 = projs21.elementAt(0);
						a.addProj(a2);
					} else {
						break;
					}
				}
				while (true) {
					if (empwoverheadtexts21.size() > 0) {
						Employee a3 = empwoverheadtexts21.remove(0);
						a.addEmpWOverheadText(a3);
					} else {
						break;
					}
				}
				for (int i = 0; i < 1; i++) {
					if (associatedcodes21.size() > 0) {
						Artifact a4 = associatedcodes21.remove(0);
						a.addAssociatedCode(a4);
					} else {
						break;
					}
				}
				for (int i = 0; i < 1; i++) {
					if (associateddesigndocuments21.size() > 0) {
						Artifact a5 = associateddesigndocuments21.remove(0);
						a.addAssociatedDesignDocument(a5);
					} else {
						break;
					}
				}
				for (int i = 0; i < 1; i++) {
					if (associatedsystemtestplans21.size() > 0) {
						Artifact a6 = associatedsystemtestplans21.remove(0);
						a.addAssociatedSystemTestPlan(a6);
					} else {
						break;
					}
				}
				if ((ranNumGen.nextDouble() * 100.0) < 0.666667) {
					// set all overhead texts:
					Vector<SSObject> allPart = a.getAllParticipants();
					for (int i = 0; i < allPart.size(); i++) {
						SSObject tempObj = allPart.elementAt(i);
						if (tempObj instanceof Employee) {
							((Employee) tempObj)
									.setOverheadText("The customer just gave us some new requirements!");
						} else if (tempObj instanceof Customer) {
							((Customer) tempObj)
									.setOverheadText("The customer just gave us some new requirements!");
						}
					}
					state.getActionStateRepository()
							.getIntroduceNewRequirementsActionStateRepository()
							.add(a);
				}
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Project> projs22 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<UpdateProjectAttributesAction> allActions = state
						.getActionStateRepository()
						.getUpdateProjectAttributesActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false)) {
					projs22.add(a);
				}
			}
			Vector<Employee> emps22 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<UpdateProjectAttributesAction> allActions = state
						.getActionStateRepository()
						.getUpdateProjectAttributesActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					UpdateProjectAttributesAction b = allActions.elementAt(j);
					if (b.getAllEmps().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					emps22.add(a);
				}
			}
			while ((projs22.size() >= 1) && (emps22.size() >= 1)) {
				UpdateProjectAttributesAction a = new UpdateProjectAttributesAction();
				for (int i = 0; i < 1; i++) {
					if (projs22.size() > 0) {
						Project a0 = projs22.elementAt(0);
						a.addProj(a0);
					} else {
						break;
					}
				}
				while (true) {
					if (emps22.size() > 0) {
						Employee a1 = emps22.remove(0);
						a.addEmp(a1);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("");
					}
				}
				state.getActionStateRepository()
						.getUpdateProjectAttributesActionStateRepository()
						.add(a);
			}
		}
		Vector<Employee> empwhosemenuclickedons23 = new Vector<Employee>();
		for (int i = 0; i < softwareengineers.size(); i++) {
			SoftwareEngineer a = softwareengineers.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			for (int j = 0; j < allActions.size(); j++) {
				PurchaseToolAction b = allActions.elementAt(j);
				if (b.getAllEmpWhoseMenuClickedOns().contains(a)) {
					alreadyInAction = true;
					break;
				}
			}
			if ((alreadyInAction == false)) {
				empwhosemenuclickedons23.add(a);
			}
		}
		Vector<Tool> setools23 = new Vector<Tool>();
		for (int i = 0; i < ides.size(); i++) {
			IDE a = ides.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == false)) {
				setools23.add(a);
			}
		}
		for (int i = 0; i < requirementscapturetools.size(); i++) {
			RequirementsCaptureTool a = requirementscapturetools.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == false)) {
				setools23.add(a);
			}
		}
		for (int i = 0; i < automatedtestingtools.size(); i++) {
			AutomatedTestingTool a = automatedtestingtools.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == false)) {
				setools23.add(a);
			}
		}
		for (int i = 0; i < designenvironments.size(); i++) {
			DesignEnvironment a = designenvironments.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false) && (a.getPurchased() == false)) {
				setools23.add(a);
			}
		}
		Vector<Project> projs23 = new Vector<Project>();
		for (int i = 0; i < seprojects.size(); i++) {
			SEProject a = seprojects.elementAt(i);
			Vector<PurchaseToolAction> allActions = state
					.getActionStateRepository()
					.getPurchaseToolActionStateRepository().getAllActions(a);
			boolean alreadyInAction = false;
			if ((alreadyInAction == false)) {
				projs23.add(a);
			}
		}
		if ((empwhosemenuclickedons23.size() >= 1) && (setools23.size() >= 1)
				&& (projs23.size() >= 1)) {
			for (int j = 0; j < empwhosemenuclickedons23.size(); j++) {
				Employee z = (Employee) empwhosemenuclickedons23.elementAt(j);
				z.addMenuItem("Purchase tool(s)");
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Project> projs24 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<SuggestedRequirementsPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedRequirementsPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false) && (a.getTimeUsed() >= 0)
						&& (a.getSuggestedRequirementsDone() == false)) {
					projs24.add(a);
				}
			}
			Vector<Employee> emps24 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<SuggestedRequirementsPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedRequirementsPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					SuggestedRequirementsPhaseDurationAction b = allActions
							.elementAt(j);
					if (b.getAllEmps().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					emps24.add(a);
				}
			}
			while ((projs24.size() >= 1) && (emps24.size() >= 1)) {
				SuggestedRequirementsPhaseDurationAction a = new SuggestedRequirementsPhaseDurationAction();
				for (int i = 0; i < 1; i++) {
					if (projs24.size() > 0) {
						Project a0 = projs24.elementAt(0);
						a.addProj(a0);
					} else {
						break;
					}
				}
				while (true) {
					if (emps24.size() > 0) {
						Employee a1 = emps24.remove(0);
						a.addEmp(a1);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("");
					}
				}
				state.getActionStateRepository()
						.getSuggestedRequirementsPhaseDurationActionStateRepository()
						.add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"DeactivateEmpsSuggReq", a);
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Project> projs25 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<SuggestedDesignPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedDesignPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false) && (a.getTimeUsed() >= 407)
						&& (a.getSuggestedDesignDone() == false)) {
					projs25.add(a);
				}
			}
			Vector<Employee> emps25 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<SuggestedDesignPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedDesignPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					SuggestedDesignPhaseDurationAction b = allActions
							.elementAt(j);
					if (b.getAllEmps().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					emps25.add(a);
				}
			}
			while ((projs25.size() >= 1) && (emps25.size() >= 1)) {
				SuggestedDesignPhaseDurationAction a = new SuggestedDesignPhaseDurationAction();
				for (int i = 0; i < 1; i++) {
					if (projs25.size() > 0) {
						Project a0 = projs25.elementAt(0);
						a.addProj(a0);
					} else {
						break;
					}
				}
				while (true) {
					if (emps25.size() > 0) {
						Employee a1 = emps25.remove(0);
						a.addEmp(a1);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("");
					}
				}
				state.getActionStateRepository()
						.getSuggestedDesignPhaseDurationActionStateRepository()
						.add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"DeactivateEmpsSuggDes", a);
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Project> projs26 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<SuggestedImplIntegrationPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false)
						&& (a.getTimeUsed() >= 819)
						&& (a.getSuggestedImplementationIntegrationDone() == false)) {
					projs26.add(a);
				}
			}
			Vector<Employee> emps26 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<SuggestedImplIntegrationPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					SuggestedImplIntegrationPhaseDurationAction b = allActions
							.elementAt(j);
					if (b.getAllEmps().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					emps26.add(a);
				}
			}
			while ((projs26.size() >= 1) && (emps26.size() >= 1)) {
				SuggestedImplIntegrationPhaseDurationAction a = new SuggestedImplIntegrationPhaseDurationAction();
				for (int i = 0; i < 1; i++) {
					if (projs26.size() > 0) {
						Project a0 = projs26.elementAt(0);
						a.addProj(a0);
					} else {
						break;
					}
				}
				while (true) {
					if (emps26.size() > 0) {
						Employee a1 = emps26.remove(0);
						a.addEmp(a1);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("");
					}
				}
				state.getActionStateRepository()
						.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
						.add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"DeactivateEmpsSuggImp", a);
			}
		}
		if (!updateUserTrigsOnly) {
			Vector<Project> projs27 = new Vector<Project>();
			for (int i = 0; i < seprojects.size(); i++) {
				SEProject a = seprojects.elementAt(i);
				Vector<SuggestedTestingPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedTestingPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				if ((alreadyInAction == false) && (a.getTimeUsed() >= 1135)
						&& (a.getSuggestedTestDone() == false)) {
					projs27.add(a);
				}
			}
			Vector<Employee> emps27 = new Vector<Employee>();
			for (int i = 0; i < softwareengineers.size(); i++) {
				SoftwareEngineer a = softwareengineers.elementAt(i);
				Vector<SuggestedTestingPhaseDurationAction> allActions = state
						.getActionStateRepository()
						.getSuggestedTestingPhaseDurationActionStateRepository()
						.getAllActions(a);
				boolean alreadyInAction = false;
				for (int j = 0; j < allActions.size(); j++) {
					SuggestedTestingPhaseDurationAction b = allActions
							.elementAt(j);
					if (b.getAllEmps().contains(a)) {
						alreadyInAction = true;
						break;
					}
				}
				if ((alreadyInAction == false)) {
					emps27.add(a);
				}
			}
			while ((projs27.size() >= 1) && (emps27.size() >= 1)) {
				SuggestedTestingPhaseDurationAction a = new SuggestedTestingPhaseDurationAction();
				for (int i = 0; i < 1; i++) {
					if (projs27.size() > 0) {
						Project a0 = projs27.elementAt(0);
						a.addProj(a0);
					} else {
						break;
					}
				}
				while (true) {
					if (emps27.size() > 0) {
						Employee a1 = emps27.remove(0);
						a.addEmp(a1);
					} else {
						break;
					}
				}
				// set all overhead texts:
				Vector<SSObject> allPart = a.getAllParticipants();
				for (int i = 0; i < allPart.size(); i++) {
					SSObject tempObj = allPart.elementAt(i);
					if (tempObj instanceof Employee) {
					} else if (tempObj instanceof Customer) {
						((Customer) tempObj).setOverheadText("");
					}
				}
				state.getActionStateRepository()
						.getSuggestedTestingPhaseDurationActionStateRepository()
						.add(a);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"DeactivateEmpsSuggTest", a);
			}
		}
	}
}