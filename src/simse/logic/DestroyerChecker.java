/* File generated by: simse.codegenerator.logicgenerator.DestroyerCheckerGenerator */
package simse.logic;

import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;

public class DestroyerChecker {
	private State state;
	private RuleExecutor ruleExec;
	private TriggerChecker trigCheck;
	private Random ranNumGen;

	public DestroyerChecker(State s, RuleExecutor r, TriggerChecker t) {
		state = s;
		ruleExec = r;
		trigCheck = t;
		ranNumGen = new Random();
	}

	public void update(boolean updateUserDestsOnly, JFrame gui) {
		Vector<simse.adts.actions.Action> actions = state
				.getActionStateRepository().getAllActions();
		for (int i = 0; i < actions.size(); i++) {
			simse.adts.actions.Action tempAct = actions.elementAt(i);
			if ((tempAct instanceof QuitAction)
					&& (state.getActionStateRepository()
							.getQuitActionStateRepository().getAllActions()
							.contains(tempAct))) {
				QuitAction quitTempAct = (QuitAction) tempAct;
				if (!updateUserDestsOnly) {
					if (quitTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						state.getActionStateRepository()
								.getQuitActionStateRepository()
								.remove(quitTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof GetSickAction)
					&& (state.getActionStateRepository()
							.getGetSickActionStateRepository().getAllActions()
							.contains(tempAct))) {
				GetSickAction getsickTempAct = (GetSickAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> sickpersons = getsickTempAct
							.getAllSickPersons();
					for (int j = 0; j < sickpersons.size(); j++) {
						Employee a = sickpersons.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							if ((!(((SoftwareEngineer) a).getHealth() >= 1.0))) {
								destroy = false;
								break;
							}
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm not sick anymore -- back to work!");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm not sick anymore -- back to work!");
							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"GetSickDestRule", tempAct);
						state.getActionStateRepository()
								.getGetSickActionStateRepository()
								.remove(getsickTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof BreakAction)
					&& (state.getActionStateRepository()
							.getBreakActionStateRepository().getAllActions()
							.contains(tempAct))) {
				BreakAction breakTempAct = (BreakAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> breakers = breakTempAct.getAllBreakers();
					for (int j = 0; j < breakers.size(); j++) {
						Employee a = breakers.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							if ((!(((SoftwareEngineer) a).getEnergy() == 1.0))
									|| (!(((SoftwareEngineer) a).getHealth() >= 1.0))) {
								destroy = false;
								break;
							}
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm going back to work now");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm going back to work now");
							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"BreakDestRule", tempAct);
						state.getActionStateRepository()
								.getBreakActionStateRepository()
								.remove(breakTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof GiveBonusAction)
					&& (state.getActionStateRepository()
							.getGiveBonusActionStateRepository()
							.getAllActions().contains(tempAct))) {
				GiveBonusAction givebonusTempAct = (GiveBonusAction) tempAct;
				if (!updateUserDestsOnly) {
					if (givebonusTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("Thanks for the bonus!");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("Thanks for the bonus!");
							}
						}
						state.getActionStateRepository()
								.getGiveBonusActionStateRepository()
								.remove(givebonusTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof ChangePayRateAction)
					&& (state.getActionStateRepository()
							.getChangePayRateActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ChangePayRateAction changepayrateTempAct = (ChangePayRateAction) tempAct;
				if (!updateUserDestsOnly) {
					if (changepayrateTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						state.getActionStateRepository()
								.getChangePayRateActionStateRepository()
								.remove(changepayrateTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CreateRequirementsAction)
					&& (state.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateRequirementsAction createrequirementsTempAct = (CreateRequirementsAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = createrequirementsTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> reqdocs = createrequirementsTempAct
							.getAllReqDocs();
					for (int j = 0; j < reqdocs.size(); j++) {
						Artifact a = reqdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							if ((!(((RequirementsDocument) a)
									.getPercentComplete() == 100.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = createrequirementsTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Tool> requirementscapturetools = createrequirementsTempAct
							.getAllRequirementsCaptureTools();
					for (int j = 0; j < requirementscapturetools.size(); j++) {
						Tool a = requirementscapturetools.elementAt(j);
						if (a instanceof RequirementsCaptureTool) {
						}
					}
					Vector<Artifact> associatedcodedocs = createrequirementsTempAct
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact a = associatedcodedocs.elementAt(j);
						if (a instanceof Code) {
						}
					}
					Vector<Artifact> associateddesigndocs = createrequirementsTempAct
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact a = associateddesigndocs.elementAt(j);
						if (a instanceof DesignDocument) {
						}
					}
					Vector<Artifact> associatedsystemtestplans = createrequirementsTempAct
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact a = associatedsystemtestplans.elementAt(j);
						if (a instanceof SystemTestPlan) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished creating the requirements document");
								((Employee) c)
										.removeMenuItem("Stop creating the requirements document");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished creating the requirements document");
							}
						}
						state.getActionStateRepository()
								.getCreateRequirementsActionStateRepository()
								.remove(createrequirementsTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CreateRequirementsAction)
					&& (state.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateRequirementsAction createrequirementsTempAct = (CreateRequirementsAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = createrequirementsTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> reqdocs = createrequirementsTempAct
						.getAllReqDocs();
				for (int j = 0; j < reqdocs.size(); j++) {
					Artifact a = reqdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Project> projs = createrequirementsTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Tool> requirementscapturetools = createrequirementsTempAct
						.getAllRequirementsCaptureTools();
				for (int j = 0; j < requirementscapturetools.size(); j++) {
					Tool a = requirementscapturetools.elementAt(j);
					if (a instanceof RequirementsCaptureTool) {
					}
				}
				Vector<Artifact> associatedcodedocs = createrequirementsTempAct
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < associatedcodedocs.size(); j++) {
					Artifact a = associatedcodedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Artifact> associateddesigndocs = createrequirementsTempAct
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < associateddesigndocs.size(); j++) {
					Artifact a = associateddesigndocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Artifact> associatedsystemtestplans = createrequirementsTempAct
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < associatedsystemtestplans.size(); j++) {
					Artifact a = associatedsystemtestplans.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop creating the requirements document");
						}
					}
				}
			}
			if ((tempAct instanceof CreateDesignAction)
					&& (state.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateDesignAction createdesignTempAct = (CreateDesignAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = createdesignTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> designdocs = createdesignTempAct
							.getAllDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact a = designdocs.elementAt(j);
						if (a instanceof DesignDocument) {
							if ((!(((DesignDocument) a).getPercentComplete() == 100.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = createdesignTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createdesignTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Tool> designenvironments = createdesignTempAct
							.getAllDesignEnvironments();
					for (int j = 0; j < designenvironments.size(); j++) {
						Tool a = designenvironments.elementAt(j);
						if (a instanceof DesignEnvironment) {
						}
					}
					Vector<Artifact> associatedcodedocs = createdesignTempAct
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact a = associatedcodedocs.elementAt(j);
						if (a instanceof Code) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished creating the design");
								((Employee) c)
										.removeMenuItem("Stop creating the design");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished creating the design");
							}
						}
						state.getActionStateRepository()
								.getCreateDesignActionStateRepository()
								.remove(createdesignTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CreateDesignAction)
					&& (state.getActionStateRepository()
							.getCreateDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateDesignAction createdesignTempAct = (CreateDesignAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = createdesignTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> designdocs = createdesignTempAct
						.getAllDesignDocs();
				for (int j = 0; j < designdocs.size(); j++) {
					Artifact a = designdocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Project> projs = createdesignTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = createdesignTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Tool> designenvironments = createdesignTempAct
						.getAllDesignEnvironments();
				for (int j = 0; j < designenvironments.size(); j++) {
					Tool a = designenvironments.elementAt(j);
					if (a instanceof DesignEnvironment) {
					}
				}
				Vector<Artifact> associatedcodedocs = createdesignTempAct
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < associatedcodedocs.size(); j++) {
					Artifact a = associatedcodedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop creating the design");
						}
					}
				}
			}
			if ((tempAct instanceof CreateCodeAction)
					&& (state.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateCodeAction createcodeTempAct = (CreateCodeAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = createcodeTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> codedocs = createcodeTempAct
							.getAllCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact a = codedocs.elementAt(j);
						if (a instanceof Code) {
							if ((!(((Code) a).getPercentComplete() == 100.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = createcodeTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createcodeTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Artifact> associateddesigndocuments = createcodeTempAct
							.getAllAssociatedDesignDocuments();
					for (int j = 0; j < associateddesigndocuments.size(); j++) {
						Artifact a = associateddesigndocuments.elementAt(j);
						if (a instanceof DesignDocument) {
						}
					}
					Vector<Tool> developmentenvironments = createcodeTempAct
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool a = developmentenvironments.elementAt(j);
						if (a instanceof IDE) {
						}
					}
					Vector<Artifact> associatedsystemtestplans = createcodeTempAct
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact a = associatedsystemtestplans.elementAt(j);
						if (a instanceof SystemTestPlan) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished creating code");
								((Employee) c)
										.removeMenuItem("Stop creating code");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished creating code");
							}
						}
						state.getActionStateRepository()
								.getCreateCodeActionStateRepository()
								.remove(createcodeTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CreateCodeAction)
					&& (state.getActionStateRepository()
							.getCreateCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateCodeAction createcodeTempAct = (CreateCodeAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = createcodeTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> codedocs = createcodeTempAct.getAllCodeDocs();
				for (int j = 0; j < codedocs.size(); j++) {
					Artifact a = codedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = createcodeTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = createcodeTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Artifact> associateddesigndocuments = createcodeTempAct
						.getAllAssociatedDesignDocuments();
				for (int j = 0; j < associateddesigndocuments.size(); j++) {
					Artifact a = associateddesigndocuments.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Tool> developmentenvironments = createcodeTempAct
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < developmentenvironments.size(); j++) {
					Tool a = developmentenvironments.elementAt(j);
					if (a instanceof IDE) {
					}
				}
				Vector<Artifact> associatedsystemtestplans = createcodeTempAct
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < associatedsystemtestplans.size(); j++) {
					Artifact a = associatedsystemtestplans.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c).addMenuItem("Stop creating code");
						}
					}
				}
			}
			if ((tempAct instanceof ReviewRequirementsAction)
					&& (state.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewRequirementsAction reviewrequirementsTempAct = (ReviewRequirementsAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = reviewrequirementsTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> requirementsdocs = reviewrequirementsTempAct
							.getAllRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact a = requirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							if ((!(((RequirementsDocument) a)
									.getNumUnknownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = reviewrequirementsTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished reviewing the requirements document");
								((Employee) c)
										.removeMenuItem("Stop reviewing the requirements document");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished reviewing the requirements document");
							}
						}
						state.getActionStateRepository()
								.getReviewRequirementsActionStateRepository()
								.remove(reviewrequirementsTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof ReviewRequirementsAction)
					&& (state.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewRequirementsAction reviewrequirementsTempAct = (ReviewRequirementsAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = reviewrequirementsTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> requirementsdocs = reviewrequirementsTempAct
						.getAllRequirementsDocs();
				for (int j = 0; j < requirementsdocs.size(); j++) {
					Artifact a = requirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Project> projs = reviewrequirementsTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop reviewing the requirements document");
						}
					}
				}
			}
			if ((tempAct instanceof ReviewDesignAction)
					&& (state.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewDesignAction reviewdesignTempAct = (ReviewDesignAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = reviewdesignTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> designdocs = reviewdesignTempAct
							.getAllDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact a = designdocs.elementAt(j);
						if (a instanceof DesignDocument) {
							if ((!(((DesignDocument) a).getNumUnknownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = reviewdesignTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewdesignTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished reviewing the design document");
								((Employee) c)
										.removeMenuItem("Stop reviewing the design document");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished reviewing the design document");
							}
						}
						state.getActionStateRepository()
								.getReviewDesignActionStateRepository()
								.remove(reviewdesignTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof ReviewDesignAction)
					&& (state.getActionStateRepository()
							.getReviewDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewDesignAction reviewdesignTempAct = (ReviewDesignAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = reviewdesignTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> designdocs = reviewdesignTempAct
						.getAllDesignDocs();
				for (int j = 0; j < designdocs.size(); j++) {
					Artifact a = designdocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Project> projs = reviewdesignTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = reviewdesignTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop reviewing the design document");
						}
					}
				}
			}
			if ((tempAct instanceof InspectCodeAction)
					&& (state.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				InspectCodeAction inspectcodeTempAct = (InspectCodeAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = inspectcodeTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> codedocs = inspectcodeTempAct
							.getAllCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact a = codedocs.elementAt(j);
						if (a instanceof Code) {
							if ((!(((Code) a).getNumUnknownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = inspectcodeTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = inspectcodeTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Artifact> associateddesigndocs = inspectcodeTempAct
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact a = associateddesigndocs.elementAt(j);
						if (a instanceof DesignDocument) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished inspecting the code");
								((Employee) c)
										.removeMenuItem("Stop inspecting code");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished inspecting the code");
							}
						}
						state.getActionStateRepository()
								.getInspectCodeActionStateRepository()
								.remove(inspectcodeTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof InspectCodeAction)
					&& (state.getActionStateRepository()
							.getInspectCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				InspectCodeAction inspectcodeTempAct = (InspectCodeAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = inspectcodeTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> codedocs = inspectcodeTempAct.getAllCodeDocs();
				for (int j = 0; j < codedocs.size(); j++) {
					Artifact a = codedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = inspectcodeTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = inspectcodeTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Artifact> associateddesigndocs = inspectcodeTempAct
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < associateddesigndocs.size(); j++) {
					Artifact a = associateddesigndocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c).addMenuItem("Stop inspecting code");
						}
					}
				}
			}
			if ((tempAct instanceof CorrectRequirementsAction)
					&& (state.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectRequirementsAction correctrequirementsTempAct = (CorrectRequirementsAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = correctrequirementsTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> requirementsdocs = correctrequirementsTempAct
							.getAllRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact a = requirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							if ((!(((RequirementsDocument) a)
									.getNumKnownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = correctrequirementsTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Tool> requirementscapturetools = correctrequirementsTempAct
							.getAllRequirementsCaptureTools();
					for (int j = 0; j < requirementscapturetools.size(); j++) {
						Tool a = requirementscapturetools.elementAt(j);
						if (a instanceof RequirementsCaptureTool) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished correcting the requirements document");
								((Employee) c)
										.removeMenuItem("Stop correcting the requirements doc");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished correcting the requirements document");
							}
						}
						state.getActionStateRepository()
								.getCorrectRequirementsActionStateRepository()
								.remove(correctrequirementsTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CorrectRequirementsAction)
					&& (state.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectRequirementsAction correctrequirementsTempAct = (CorrectRequirementsAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = correctrequirementsTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> requirementsdocs = correctrequirementsTempAct
						.getAllRequirementsDocs();
				for (int j = 0; j < requirementsdocs.size(); j++) {
					Artifact a = requirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Project> projs = correctrequirementsTempAct
						.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Tool> requirementscapturetools = correctrequirementsTempAct
						.getAllRequirementsCaptureTools();
				for (int j = 0; j < requirementscapturetools.size(); j++) {
					Tool a = requirementscapturetools.elementAt(j);
					if (a instanceof RequirementsCaptureTool) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop correcting the requirements doc");
						}
					}
				}
			}
			if ((tempAct instanceof CorrectDesignAction)
					&& (state.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectDesignAction correctdesignTempAct = (CorrectDesignAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = correctdesignTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> designdocs = correctdesignTempAct
							.getAllDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact a = designdocs.elementAt(j);
						if (a instanceof DesignDocument) {
							if ((!(((DesignDocument) a).getNumKnownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = correctdesignTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctdesignTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Tool> designenvironments = correctdesignTempAct
							.getAllDesignEnvironments();
					for (int j = 0; j < designenvironments.size(); j++) {
						Tool a = designenvironments.elementAt(j);
						if (a instanceof DesignEnvironment) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished correcting the design document");
								((Employee) c)
										.removeMenuItem("Stop correcting the design document");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished correcting the design document");
							}
						}
						state.getActionStateRepository()
								.getCorrectDesignActionStateRepository()
								.remove(correctdesignTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CorrectDesignAction)
					&& (state.getActionStateRepository()
							.getCorrectDesignActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectDesignAction correctdesignTempAct = (CorrectDesignAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = correctdesignTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> designdocs = correctdesignTempAct
						.getAllDesignDocs();
				for (int j = 0; j < designdocs.size(); j++) {
					Artifact a = designdocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Project> projs = correctdesignTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = correctdesignTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Tool> designenvironments = correctdesignTempAct
						.getAllDesignEnvironments();
				for (int j = 0; j < designenvironments.size(); j++) {
					Tool a = designenvironments.elementAt(j);
					if (a instanceof DesignEnvironment) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop correcting the design document");
						}
					}
				}
			}
			if ((tempAct instanceof CorrectCodeAction)
					&& (state.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectCodeAction correctcodeTempAct = (CorrectCodeAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = correctcodeTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> codedocs = correctcodeTempAct
							.getAllCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact a = codedocs.elementAt(j);
						if (a instanceof Code) {
							if ((!(((Code) a).getNumKnownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = correctcodeTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctcodeTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Artifact> associateddesigndocs = correctcodeTempAct
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact a = associateddesigndocs.elementAt(j);
						if (a instanceof DesignDocument) {
						}
					}
					Vector<Tool> developmentenvironments = correctcodeTempAct
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool a = developmentenvironments.elementAt(j);
						if (a instanceof IDE) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished correcting code");
								((Employee) c)
										.removeMenuItem("Stop correcting code");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished correcting code");
							}
						}
						state.getActionStateRepository()
								.getCorrectCodeActionStateRepository()
								.remove(correctcodeTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CorrectCodeAction)
					&& (state.getActionStateRepository()
							.getCorrectCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectCodeAction correctcodeTempAct = (CorrectCodeAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = correctcodeTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> codedocs = correctcodeTempAct.getAllCodeDocs();
				for (int j = 0; j < codedocs.size(); j++) {
					Artifact a = codedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = correctcodeTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = correctcodeTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Artifact> associateddesigndocs = correctcodeTempAct
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < associateddesigndocs.size(); j++) {
					Artifact a = associateddesigndocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Tool> developmentenvironments = correctcodeTempAct
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < developmentenvironments.size(); j++) {
					Tool a = developmentenvironments.elementAt(j);
					if (a instanceof IDE) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c).addMenuItem("Stop correcting code");
						}
					}
				}
			}
			if ((tempAct instanceof IntegrateCodeAction)
					&& (state.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				IntegrateCodeAction integratecodeTempAct = (IntegrateCodeAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = integratecodeTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> codedocs = integratecodeTempAct
							.getAllCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact a = codedocs.elementAt(j);
						if (a instanceof Code) {
							if ((!(((Code) a).getPercentIntegrated() == 100.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = integratecodeTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> associatedrequirementsdocs = integratecodeTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Artifact> associateddesigndocs = integratecodeTempAct
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact a = associateddesigndocs.elementAt(j);
						if (a instanceof DesignDocument) {
						}
					}
					Vector<Tool> developmentenvironments = integratecodeTempAct
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool a = developmentenvironments.elementAt(j);
						if (a instanceof IDE) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished integrating code");
								((Employee) c)
										.removeMenuItem("Stop integrating code");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished integrating code");
							}
						}
						state.getActionStateRepository()
								.getIntegrateCodeActionStateRepository()
								.remove(integratecodeTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof IntegrateCodeAction)
					&& (state.getActionStateRepository()
							.getIntegrateCodeActionStateRepository()
							.getAllActions().contains(tempAct))) {
				IntegrateCodeAction integratecodeTempAct = (IntegrateCodeAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = integratecodeTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> codedocs = integratecodeTempAct
						.getAllCodeDocs();
				for (int j = 0; j < codedocs.size(); j++) {
					Artifact a = codedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = integratecodeTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = integratecodeTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Artifact> associateddesigndocs = integratecodeTempAct
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < associateddesigndocs.size(); j++) {
					Artifact a = associateddesigndocs.elementAt(j);
					if (a instanceof DesignDocument) {
					}
				}
				Vector<Tool> developmentenvironments = integratecodeTempAct
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < developmentenvironments.size(); j++) {
					Tool a = developmentenvironments.elementAt(j);
					if (a instanceof IDE) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c).addMenuItem("Stop integrating code");
						}
					}
				}
			}
			if ((tempAct instanceof SystemTestAction)
					&& (state.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SystemTestAction systemtestTempAct = (SystemTestAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Artifact> codedocs = systemtestTempAct
							.getAllCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact a = codedocs.elementAt(j);
						if (a instanceof Code) {
							if ((!(((Code) a).getNumUnknownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Project> projs = systemtestTempAct.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Employee> emps = systemtestTempAct.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> associatedsystemtestplans = systemtestTempAct
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact a = associatedsystemtestplans.elementAt(j);
						if (a instanceof SystemTestPlan) {
						}
					}
					Vector<Tool> testingtools = systemtestTempAct
							.getAllTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool a = testingtools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm finished doing the system test");
								((Employee) c)
										.removeMenuItem("Stop doing the system test");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm finished doing the system test");
							}
						}
						state.getActionStateRepository()
								.getSystemTestActionStateRepository()
								.remove(systemtestTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof SystemTestAction)
					&& (state.getActionStateRepository()
							.getSystemTestActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SystemTestAction systemtestTempAct = (SystemTestAction) tempAct;
				boolean destroy = true;
				Vector<Artifact> codedocs = systemtestTempAct.getAllCodeDocs();
				for (int j = 0; j < codedocs.size(); j++) {
					Artifact a = codedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = systemtestTempAct.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Employee> emps = systemtestTempAct.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> associatedsystemtestplans = systemtestTempAct
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < associatedsystemtestplans.size(); j++) {
					Artifact a = associatedsystemtestplans.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				Vector<Tool> testingtools = systemtestTempAct
						.getAllTestingTools();
				for (int j = 0; j < testingtools.size(); j++) {
					Tool a = testingtools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop doing the system test");
						}
					}
				}
			}
			if ((tempAct instanceof CreateSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateSystemTestPlanAction createsystemtestplanTempAct = (CreateSystemTestPlanAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = createsystemtestplanTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> associatedcodedocs = createsystemtestplanTempAct
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact a = associatedcodedocs.elementAt(j);
						if (a instanceof Code) {
						}
					}
					Vector<Project> projs = createsystemtestplanTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Artifact> systemtestplandocs = createsystemtestplanTempAct
							.getAllSystemTestPlanDocs();
					for (int j = 0; j < systemtestplandocs.size(); j++) {
						Artifact a = systemtestplandocs.elementAt(j);
						if (a instanceof SystemTestPlan) {
							if ((!(((SystemTestPlan) a).getPercentComplete() == 100.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createsystemtestplanTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Tool> testingtools = createsystemtestplanTempAct
							.getAllTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool a = testingtools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm done creating the system test plan");
								((Employee) c)
										.removeMenuItem("Stop creating the system test plan");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm done creating the system test plan");
							}
						}
						state.getActionStateRepository()
								.getCreateSystemTestPlanActionStateRepository()
								.remove(createsystemtestplanTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CreateSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CreateSystemTestPlanAction createsystemtestplanTempAct = (CreateSystemTestPlanAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = createsystemtestplanTempAct
						.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> associatedcodedocs = createsystemtestplanTempAct
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < associatedcodedocs.size(); j++) {
					Artifact a = associatedcodedocs.elementAt(j);
					if (a instanceof Code) {
					}
				}
				Vector<Project> projs = createsystemtestplanTempAct
						.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Artifact> systemtestplandocs = createsystemtestplanTempAct
						.getAllSystemTestPlanDocs();
				for (int j = 0; j < systemtestplandocs.size(); j++) {
					Artifact a = systemtestplandocs.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = createsystemtestplanTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Tool> testingtools = createsystemtestplanTempAct
						.getAllTestingTools();
				for (int j = 0; j < testingtools.size(); j++) {
					Tool a = testingtools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop creating the system test plan");
						}
					}
				}
			}
			if ((tempAct instanceof FireAction)
					&& (state.getActionStateRepository()
							.getFireActionStateRepository().getAllActions()
							.contains(tempAct))) {
				FireAction fireTempAct = (FireAction) tempAct;
				if (!updateUserDestsOnly) {
					if (fireTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						state.getActionStateRepository()
								.getFireActionStateRepository()
								.remove(fireTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof ReviewSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewSystemTestPlanAction reviewsystemtestplanTempAct = (ReviewSystemTestPlanAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = reviewsystemtestplanTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> testplans = reviewsystemtestplanTempAct
							.getAllTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact a = testplans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							if ((!(((SystemTestPlan) a).getNumUnknownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Project> projs = reviewsystemtestplanTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm done reviewing the system test plan");
								((Employee) c)
										.removeMenuItem("Stop reviewing the system test plan");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm done reviewing the system test plan");
							}
						}
						state.getActionStateRepository()
								.getReviewSystemTestPlanActionStateRepository()
								.remove(reviewsystemtestplanTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof ReviewSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				ReviewSystemTestPlanAction reviewsystemtestplanTempAct = (ReviewSystemTestPlanAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = reviewsystemtestplanTempAct
						.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> testplans = reviewsystemtestplanTempAct
						.getAllTestPlans();
				for (int j = 0; j < testplans.size(); j++) {
					Artifact a = testplans.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Project> projs = reviewsystemtestplanTempAct
						.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop reviewing the system test plan");
						}
					}
				}
			}
			if ((tempAct instanceof CorrectSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectSystemTestPlanAction correctsystemtestplanTempAct = (CorrectSystemTestPlanAction) tempAct;
				if (!updateUserDestsOnly) {
					boolean destroy = true;
					Vector<Employee> emps = correctsystemtestplanTempAct
							.getAllEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee a = emps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
						}
					}
					Vector<Artifact> testplans = correctsystemtestplanTempAct
							.getAllTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact a = testplans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							if ((!(((SystemTestPlan) a).getNumKnownErrors() == 0.0))) {
								destroy = false;
								break;
							}
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctsystemtestplanTempAct
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact a = associatedrequirementsdocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
						}
					}
					Vector<Project> projs = correctsystemtestplanTempAct
							.getAllProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project a = projs.elementAt(j);
						if (a instanceof SEProject) {
						}
					}
					Vector<Tool> testingtools = correctsystemtestplanTempAct
							.getAllTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool a = testingtools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
						}
					}
					if (destroy) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
								((Employee) c)
										.setOverheadText("I'm done correcting the system test plan");
								((Employee) c)
										.removeMenuItem("Stop correcting the system test plan");
							} else if (c instanceof Customer) {
								((Customer) c)
										.setOverheadText("I'm done correcting the system test plan");
							}
						}
						state.getActionStateRepository()
								.getCorrectSystemTestPlanActionStateRepository()
								.remove(correctsystemtestplanTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof CorrectSystemTestPlanAction)
					&& (state.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.getAllActions().contains(tempAct))) {
				CorrectSystemTestPlanAction correctsystemtestplanTempAct = (CorrectSystemTestPlanAction) tempAct;
				boolean destroy = true;
				Vector<Employee> emps = correctsystemtestplanTempAct
						.getAllEmps();
				for (int j = 0; j < emps.size(); j++) {
					Employee a = emps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
					}
				}
				Vector<Artifact> testplans = correctsystemtestplanTempAct
						.getAllTestPlans();
				for (int j = 0; j < testplans.size(); j++) {
					Artifact a = testplans.elementAt(j);
					if (a instanceof SystemTestPlan) {
					}
				}
				Vector<Artifact> associatedrequirementsdocs = correctsystemtestplanTempAct
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
					Artifact a = associatedrequirementsdocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
					}
				}
				Vector<Project> projs = correctsystemtestplanTempAct
						.getAllProjs();
				for (int j = 0; j < projs.size(); j++) {
					Project a = projs.elementAt(j);
					if (a instanceof SEProject) {
					}
				}
				Vector<Tool> testingtools = correctsystemtestplanTempAct
						.getAllTestingTools();
				for (int j = 0; j < testingtools.size(); j++) {
					Tool a = testingtools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
					}
				}
				if (destroy) {
					Vector<SSObject> b = tempAct.getAllParticipants();
					for (int j = 0; j < b.size(); j++) {
						SSObject c = b.elementAt(j);
						if (c instanceof Employee) {
							((Employee) c)
									.addMenuItem("Stop correcting the system test plan");
						}
					}
				}
			}
			if ((tempAct instanceof IntroduceNewRequirementsAction)
					&& (state.getActionStateRepository()
							.getIntroduceNewRequirementsActionStateRepository()
							.getAllActions().contains(tempAct))) {
				IntroduceNewRequirementsAction introducenewrequirementsTempAct = (IntroduceNewRequirementsAction) tempAct;
				if (!updateUserDestsOnly) {
					if (introducenewrequirementsTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						state.getActionStateRepository()
								.getIntroduceNewRequirementsActionStateRepository()
								.remove(introducenewrequirementsTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof PurchaseToolAction)
					&& (state.getActionStateRepository()
							.getPurchaseToolActionStateRepository()
							.getAllActions().contains(tempAct))) {
				PurchaseToolAction purchasetoolTempAct = (PurchaseToolAction) tempAct;
				if (!updateUserDestsOnly) {
					if (purchasetoolTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						state.getActionStateRepository()
								.getPurchaseToolActionStateRepository()
								.remove(purchasetoolTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof SuggestedRequirementsPhaseDurationAction)
					&& (state
							.getActionStateRepository()
							.getSuggestedRequirementsPhaseDurationActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SuggestedRequirementsPhaseDurationAction suggestedrequirementsphasedurationTempAct = (SuggestedRequirementsPhaseDurationAction) tempAct;
				if (!updateUserDestsOnly) {
					if (suggestedrequirementsphasedurationTempAct
							.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"SetSuggestedRequirementsDone", tempAct);
						state.getActionStateRepository()
								.getSuggestedRequirementsPhaseDurationActionStateRepository()
								.remove(suggestedrequirementsphasedurationTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof SuggestedDesignPhaseDurationAction)
					&& (state
							.getActionStateRepository()
							.getSuggestedDesignPhaseDurationActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SuggestedDesignPhaseDurationAction suggesteddesignphasedurationTempAct = (SuggestedDesignPhaseDurationAction) tempAct;
				if (!updateUserDestsOnly) {
					if (suggesteddesignphasedurationTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"SetSuggestedDesignDone", tempAct);
						state.getActionStateRepository()
								.getSuggestedDesignPhaseDurationActionStateRepository()
								.remove(suggesteddesignphasedurationTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof SuggestedImplIntegrationPhaseDurationAction)
					&& (state
							.getActionStateRepository()
							.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SuggestedImplIntegrationPhaseDurationAction suggestedimplintegrationphasedurationTempAct = (SuggestedImplIntegrationPhaseDurationAction) tempAct;
				if (!updateUserDestsOnly) {
					if (suggestedimplintegrationphasedurationTempAct
							.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"SetSuggestedImplDone", tempAct);
						state.getActionStateRepository()
								.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
								.remove(suggestedimplintegrationphasedurationTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
			if ((tempAct instanceof SuggestedTestingPhaseDurationAction)
					&& (state
							.getActionStateRepository()
							.getSuggestedTestingPhaseDurationActionStateRepository()
							.getAllActions().contains(tempAct))) {
				SuggestedTestingPhaseDurationAction suggestedtestingphasedurationTempAct = (SuggestedTestingPhaseDurationAction) tempAct;
				if (!updateUserDestsOnly) {
					if (suggestedtestingphasedurationTempAct.getTimeToLive() == 0) {
						Vector<SSObject> b = tempAct.getAllParticipants();
						for (int j = 0; j < b.size(); j++) {
							SSObject c = b.elementAt(j);
							if (c instanceof Employee) {
							} else if (c instanceof Customer) {

							}
						}
						ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
								"SetSuggestedTestingDone", tempAct);
						state.getActionStateRepository()
								.getSuggestedTestingPhaseDurationActionStateRepository()
								.remove(suggestedtestingphasedurationTempAct);
						trigCheck.update(true, gui);
						update(false, gui);
					}
				}
			}
		}
		// update trigger checker:
		trigCheck.update(true, gui);
	}
}
