/* File generated by: simse.codegenerator.logicgenerator.RuleExecutorGenerator */
package simse.logic;

import simse.state.*;
import simse.gui.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;

public class RuleExecutor {
	public static final int UPDATE_ALL_CONTINUOUS = 0;
	public static final int UPDATE_ONE = 1;

	private State state;
	private Random ranNumGen;
	private TriggerChecker triggerChecker;
	private DestroyerChecker destroyerChecker;

	public RuleExecutor(State s) {
		state = s;
		ranNumGen = new Random();
	}

	public void setTriggerChecker(TriggerChecker t) {
		triggerChecker = t;
	}

	public void setDestroyerChecker(DestroyerChecker d) {
		destroyerChecker = d;
	}

	public void update(JFrame gui, int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		updateProjAttsEffectRuleA(gui, updateInstructions, ruleName, action);
		quitDestroyObjectsRuleA(gui, updateInstructions, ruleName, action);
		fireDestroyObjectsRuleA(gui, updateInstructions, ruleName, action);
		getSickEffectRuleA(gui, updateInstructions, ruleName, action);
		getSickTrigRule(gui, updateInstructions, ruleName, action);
		breakEffectRuleA(gui, updateInstructions, ruleName, action);
		breakTrigRule(gui, updateInstructions, ruleName, action);
		integrateCodeEffectRuleFirst(gui, updateInstructions, ruleName, action);
		giveBonusEffectRuleA(gui, updateInstructions, ruleName, action);
		integrateCodeEffectRuleA(gui, updateInstructions, ruleName, action);
		correctCodeEffectRuleA(gui, updateInstructions, ruleName, action);
		createCodeEffectRuleFirst(gui, updateInstructions, ruleName, action);
		createCodeEffectRuleA(gui, updateInstructions, ruleName, action);
		reviewRequirementsEffectRuleB(gui, updateInstructions, ruleName, action);
		reviewRequirementsEffectRuleC(gui, updateInstructions, ruleName, action);
		changePayRateEffectRuleA(gui, updateInstructions, ruleName, action);
		reviewRequirementsEffectRuleA(gui, updateInstructions, ruleName, action);
		introduceNewRequirementsEffectRuleA(gui, updateInstructions, ruleName,
				action);
		createSystemTestPlanEffectRuleFirst(gui, updateInstructions, ruleName,
				action);
		createSystemTestPlanEffectRuleA(gui, updateInstructions, ruleName,
				action);
		systemTestEffectRuleFirst(gui, updateInstructions, ruleName, action);
		systemTestEffectRuleC(gui, updateInstructions, ruleName, action);
		systemTestEffectRuleA(gui, updateInstructions, ruleName, action);
		systemTestEffectRuleB(gui, updateInstructions, ruleName, action);
		reviewDesignEffectRuleB(gui, updateInstructions, ruleName, action);
		reviewDesignEffectRuleA(gui, updateInstructions, ruleName, action);
		reviewDesignEffectRuleC(gui, updateInstructions, ruleName, action);
		inspectCodeEffectRuleB(gui, updateInstructions, ruleName, action);
		inspectCodeEffectRuleA(gui, updateInstructions, ruleName, action);
		inspectCodeEffectRuleC(gui, updateInstructions, ruleName, action);
		reviewTestPlanEffectRuleB(gui, updateInstructions, ruleName, action);
		reviewTestPlanEffectRuleA(gui, updateInstructions, ruleName, action);
		reviewTestPlanEffectRuleC(gui, updateInstructions, ruleName, action);
		createDesignEffectRuleFirst(gui, updateInstructions, ruleName, action);
		createDesignEffectRuleA(gui, updateInstructions, ruleName, action);
		createRequirementsEffectRuleFirst(gui, updateInstructions, ruleName,
				action);
		createRequirementsEffectRuleA(gui, updateInstructions, ruleName, action);
		correctRequirementsEffectRuleA(gui, updateInstructions, ruleName,
				action);
		correctDesignEffectRuleA(gui, updateInstructions, ruleName, action);
		createCodeTrigRule(gui, updateInstructions, ruleName, action);
		correctTestPlanEffectRuleA(gui, updateInstructions, ruleName, action);
		calculateScore(gui, updateInstructions, ruleName, action);
		breakDestRule(gui, updateInstructions, ruleName, action);
		getSickDestRule(gui, updateInstructions, ruleName, action);
		purchaseToolEffectRuleA(gui, updateInstructions, ruleName, action);
		deactivateEmpsSuggReq(gui, updateInstructions, ruleName, action);
		setSuggestedRequirementsDone(gui, updateInstructions, ruleName, action);
		deactivateEmpsSuggDes(gui, updateInstructions, ruleName, action);
		setSuggestedDesignDone(gui, updateInstructions, ruleName, action);
		deactivateEmpsSuggImp(gui, updateInstructions, ruleName, action);
		setSuggestedImplDone(gui, updateInstructions, ruleName, action);
		deactivateEmpsSuggTest(gui, updateInstructions, ruleName, action);
		setSuggestedTestingDone(gui, updateInstructions, ruleName, action);
		((SimSEGUI) gui).update();
	}

	// UpdateProjAttsEffectRuleA rule (UpdateProjectAttributes Action):
	private void updateProjAttsEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<UpdateProjectAttributesAction> updateprojectattributesActs = state
				.getActionStateRepository()
				.getUpdateProjectAttributesActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < updateprojectattributesActs.size(); i++) {
				UpdateProjectAttributesAction updateprojectattributesAct = updateprojectattributesActs
						.elementAt(i);
				if ((updateprojectattributesAct.getAllProjs().size() >= 1)
						&& (updateprojectattributesAct.getAllEmps().size() >= 1)) {
					Vector<Project> projs = updateprojectattributesAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
							double allEmpSoftwareEngineerPayRate = 0;
							Vector allEmps = updateprojectattributesAct
									.getAllEmps();
							for (int k = 0; k < allEmps.size(); k++) {
								Object emp3 = allEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allEmpSoftwareEngineerPayRate += (double) (((SoftwareEngineer) emp3)
											.getPayRate());
								}
							}
							seproject
									.setMoneySpent((double) (((double) (seproject
											.getMoneySpent())) + allEmpSoftwareEngineerPayRate));
							seproject.setTimeUsed((int) (((double) (seproject
									.getTimeUsed())) + 1));
						}
					}
					Vector<Employee> emps = updateprojectattributesAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
				}
			}
		}
	}

	// QuitDestroyObjectsRuleA rule (Quit Action):
	private void quitDestroyObjectsRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<QuitAction> quitActs = state.getActionStateRepository()
				.getQuitActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("QuitDestroyObjectsRuleA"))) {
			for (int i = 0; i < quitActs.size(); i++) {
				QuitAction quitAct = (QuitAction) quitActs.elementAt(i);
				if (quitAct == action) {
					if ((quitAct.getAllQuitters().size() >= 1)) {
						Vector quitters = ((QuitAction) quitAct)
								.getAllQuitters();
						for (int j = 0; j < quitters.size(); j++) {
							Employee a = (Employee) quitters.elementAt(j);
							if (a instanceof SoftwareEngineer) {
								state.getEmployeeStateRepository()
										.getSoftwareEngineerStateRepository()
										.remove((SoftwareEngineer) a);
								state.getActionStateRepository()
										.removeFromAllActions(a);
								checkAllMins(gui);
								((SimSEGUI) gui).forceGUIUpdate();

							}
						}
					}
				}
			}
		}
	}

	// FireDestroyObjectsRuleA rule (Fire Action):
	private void fireDestroyObjectsRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<FireAction> fireActs = state.getActionStateRepository()
				.getFireActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("FireDestroyObjectsRuleA"))) {
			for (int i = 0; i < fireActs.size(); i++) {
				FireAction fireAct = (FireAction) fireActs.elementAt(i);
				if (fireAct == action) {
					if ((fireAct.getAllFiredPersons().size() >= 1)) {
						Vector firedpersons = ((FireAction) fireAct)
								.getAllFiredPersons();
						for (int j = 0; j < firedpersons.size(); j++) {
							Employee a = (Employee) firedpersons.elementAt(j);
							if (a instanceof SoftwareEngineer) {
								state.getEmployeeStateRepository()
										.getSoftwareEngineerStateRepository()
										.remove((SoftwareEngineer) a);
								state.getActionStateRepository()
										.removeFromAllActions(a);
								checkAllMins(gui);
								((SimSEGUI) gui).forceGUIUpdate();

							}
						}
					}
				}
			}
		}
	}

	// GetSickEffectRuleA rule (GetSick Action):
	private void getSickEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<GetSickAction> getsickActs = state.getActionStateRepository()
				.getGetSickActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < getsickActs.size(); i++) {
				GetSickAction getsickAct = getsickActs.elementAt(i);
				if ((getsickAct.getAllSickPersons().size() >= 1)) {
					Vector<Employee> sickpersons = getsickAct
							.getAllActiveSickPersons();
					for (int j = 0; j < sickpersons.size(); j++) {
						Employee sickperson2 = sickpersons.elementAt(j);
						if (sickperson2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) sickperson2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) + .1));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) + .05));
							softwareengineer
									.setHealth((double) (((double) (softwareengineer
											.getHealth())) + .05));
						}
					}
				}
			}
		}
	}

	// GetSickTrigRule rule (GetSick Action):
	private void getSickTrigRule(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<GetSickAction> getsickActs = state.getActionStateRepository()
				.getGetSickActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("GetSickTrigRule"))) {
			for (int i = 0; i < getsickActs.size(); i++) {
				GetSickAction getsickAct = getsickActs.elementAt(i);
				if (getsickAct == action) {
					if ((getsickAct.getAllSickPersons().size() >= 1)) {
						Vector<Employee> sickpersons = getsickAct
								.getAllActiveSickPersons();
						for (int j = 0; j < sickpersons.size(); j++) {
							Employee sickperson2 = sickpersons.elementAt(j);
							if (sickperson2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) sickperson2;
								Vector<simse.adts.actions.Action> otherActs = state
										.getActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < otherActs.size(); k++) {
									simse.adts.actions.Action tempAct = otherActs
											.elementAt(k);
									if (tempAct instanceof CreateRequirementsAction) {
										((CreateRequirementsAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof ReviewRequirementsAction) {
										((ReviewRequirementsAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CorrectRequirementsAction) {
										((CorrectRequirementsAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CreateDesignAction) {
										((CreateDesignAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof ReviewDesignAction) {
										((ReviewDesignAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CorrectDesignAction) {
										((CorrectDesignAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CreateCodeAction) {
										((CreateCodeAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof InspectCodeAction) {
										((InspectCodeAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CorrectCodeAction) {
										((CorrectCodeAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof IntegrateCodeAction) {
										((IntegrateCodeAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof SystemTestAction) {
										((SystemTestAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CreateSystemTestPlanAction) {
										((CreateSystemTestPlanAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof ReviewSystemTestPlanAction) {
										((ReviewSystemTestPlanAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof CorrectSystemTestPlanAction) {
										((CorrectSystemTestPlanAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof DeliverProductAction) {
										((DeliverProductAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof BreakAction) {
										((BreakAction) tempAct)
												.setBreakerInactive(softwareengineer);
									} else if (tempAct instanceof GetSickAction) {
										if (tempAct.equals(getsickAct) == false) {
											((GetSickAction) tempAct)
													.setSickPersonInactive(softwareengineer);
										}
									} else if (tempAct instanceof QuitAction) {
										((QuitAction) tempAct)
												.setQuitterInactive(softwareengineer);
									} else if (tempAct instanceof IntroduceNewRequirementsAction) {
										((IntroduceNewRequirementsAction) tempAct)
												.setEmpWOverheadTextInactive(softwareengineer);
									} else if (tempAct instanceof UpdateProjectAttributesAction) {
										((UpdateProjectAttributesAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof ChangePayRateAction) {
										((ChangePayRateAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof GiveBonusAction) {
										((GiveBonusAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof FireAction) {
										((FireAction) tempAct)
												.setFiredPersonInactive(softwareengineer);
									} else if (tempAct instanceof PurchaseToolAction) {
										((PurchaseToolAction) tempAct)
												.setEmpWhoseMenuClickedOnInactive(softwareengineer);
									} else if (tempAct instanceof SuggestedRequirementsPhaseDurationAction) {
										((SuggestedRequirementsPhaseDurationAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof SuggestedDesignPhaseDurationAction) {
										((SuggestedDesignPhaseDurationAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof SuggestedImplIntegrationPhaseDurationAction) {
										((SuggestedImplIntegrationPhaseDurationAction) tempAct)
												.setEmpInactive(softwareengineer);
									} else if (tempAct instanceof SuggestedTestingPhaseDurationAction) {
										((SuggestedTestingPhaseDurationAction) tempAct)
												.setEmpInactive(softwareengineer);
									}
								}
								softwareengineer.setHealth((double) (0));
							}
						}
					}
				}
			}
		}
	}

	// BreakEffectRuleA rule (Break Action):
	private void breakEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<BreakAction> breakActs = state.getActionStateRepository()
				.getBreakActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < breakActs.size(); i++) {
				BreakAction breakAct = breakActs.elementAt(i);
				if ((breakAct.getAllBreakers().size() >= 1)) {
					Vector<Employee> breakers = breakAct.getAllActiveBreakers();
					for (int j = 0; j < breakers.size(); j++) {
						Employee breaker2 = breakers.elementAt(j);
						if (breaker2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) breaker2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) + .1));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) + .05));
						}
					}
				}
			}
		}
	}

	// BreakTrigRule rule (Break Action):
	private void breakTrigRule(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<BreakAction> breakActs = state.getActionStateRepository()
				.getBreakActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("BreakTrigRule"))) {
			for (int i = 0; i < breakActs.size(); i++) {
				BreakAction breakAct = breakActs.elementAt(i);
				if (breakAct == action) {
					if ((breakAct.getAllBreakers().size() >= 1)) {
						Vector<Employee> breakers = breakAct
								.getAllActiveBreakers();
						for (int j = 0; j < breakers.size(); j++) {
							Employee breaker2 = breakers.elementAt(j);
							if (breaker2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) breaker2;
								Vector<CreateRequirementsAction> createrequirementsactionsDeactivate = state
										.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < createrequirementsactionsDeactivate
										.size(); k++) {
									CreateRequirementsAction tempAct = createrequirementsactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<ReviewRequirementsAction> reviewrequirementsactionsDeactivate = state
										.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < reviewrequirementsactionsDeactivate
										.size(); k++) {
									ReviewRequirementsAction tempAct = reviewrequirementsactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CorrectRequirementsAction> correctrequirementsactionsDeactivate = state
										.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < correctrequirementsactionsDeactivate
										.size(); k++) {
									CorrectRequirementsAction tempAct = correctrequirementsactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CreateDesignAction> createdesignactionsDeactivate = state
										.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < createdesignactionsDeactivate
										.size(); k++) {
									CreateDesignAction tempAct = createdesignactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<ReviewDesignAction> reviewdesignactionsDeactivate = state
										.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < reviewdesignactionsDeactivate
										.size(); k++) {
									ReviewDesignAction tempAct = reviewdesignactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CorrectDesignAction> correctdesignactionsDeactivate = state
										.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < correctdesignactionsDeactivate
										.size(); k++) {
									CorrectDesignAction tempAct = correctdesignactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CreateCodeAction> createcodeactionsDeactivate = state
										.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < createcodeactionsDeactivate
										.size(); k++) {
									CreateCodeAction tempAct = createcodeactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<InspectCodeAction> inspectcodeactionsDeactivate = state
										.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < inspectcodeactionsDeactivate
										.size(); k++) {
									InspectCodeAction tempAct = inspectcodeactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CorrectCodeAction> correctcodeactionsDeactivate = state
										.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < correctcodeactionsDeactivate
										.size(); k++) {
									CorrectCodeAction tempAct = correctcodeactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<IntegrateCodeAction> integratecodeactionsDeactivate = state
										.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < integratecodeactionsDeactivate
										.size(); k++) {
									IntegrateCodeAction tempAct = integratecodeactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<SystemTestAction> systemtestactionsDeactivate = state
										.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < systemtestactionsDeactivate
										.size(); k++) {
									SystemTestAction tempAct = systemtestactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CreateSystemTestPlanAction> createsystemtestplanactionsDeactivate = state
										.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < createsystemtestplanactionsDeactivate
										.size(); k++) {
									CreateSystemTestPlanAction tempAct = createsystemtestplanactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<ReviewSystemTestPlanAction> reviewsystemtestplanactionsDeactivate = state
										.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < reviewsystemtestplanactionsDeactivate
										.size(); k++) {
									ReviewSystemTestPlanAction tempAct = reviewsystemtestplanactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<CorrectSystemTestPlanAction> correctsystemtestplanactionsDeactivate = state
										.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < correctsystemtestplanactionsDeactivate
										.size(); k++) {
									CorrectSystemTestPlanAction tempAct = correctsystemtestplanactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<DeliverProductAction> deliverproductactionsDeactivate = state
										.getActionStateRepository()
										.getDeliverProductActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < deliverproductactionsDeactivate
										.size(); k++) {
									DeliverProductAction tempAct = deliverproductactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<GetSickAction> getsickactionsDeactivate = state
										.getActionStateRepository()
										.getGetSickActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < getsickactionsDeactivate
										.size(); k++) {
									GetSickAction tempAct = getsickactionsDeactivate
											.elementAt(k);
									tempAct.setSickPersonInactive(softwareengineer);
								}
								Vector<QuitAction> quitactionsDeactivate = state
										.getActionStateRepository()
										.getQuitActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < quitactionsDeactivate
										.size(); k++) {
									QuitAction tempAct = quitactionsDeactivate
											.elementAt(k);
									tempAct.setQuitterInactive(softwareengineer);
								}
								Vector<IntroduceNewRequirementsAction> introducenewrequirementsactionsDeactivate = state
										.getActionStateRepository()
										.getIntroduceNewRequirementsActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < introducenewrequirementsactionsDeactivate
										.size(); k++) {
									IntroduceNewRequirementsAction tempAct = introducenewrequirementsactionsDeactivate
											.elementAt(k);
									tempAct.setEmpWOverheadTextInactive(softwareengineer);
								}
								Vector<UpdateProjectAttributesAction> updateprojectattributesactionsDeactivate = state
										.getActionStateRepository()
										.getUpdateProjectAttributesActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < updateprojectattributesactionsDeactivate
										.size(); k++) {
									UpdateProjectAttributesAction tempAct = updateprojectattributesactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<ChangePayRateAction> changepayrateactionsDeactivate = state
										.getActionStateRepository()
										.getChangePayRateActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < changepayrateactionsDeactivate
										.size(); k++) {
									ChangePayRateAction tempAct = changepayrateactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<GiveBonusAction> givebonusactionsDeactivate = state
										.getActionStateRepository()
										.getGiveBonusActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < givebonusactionsDeactivate
										.size(); k++) {
									GiveBonusAction tempAct = givebonusactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
								Vector<FireAction> fireactionsDeactivate = state
										.getActionStateRepository()
										.getFireActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < fireactionsDeactivate
										.size(); k++) {
									FireAction tempAct = fireactionsDeactivate
											.elementAt(k);
									tempAct.setFiredPersonInactive(softwareengineer);
								}
								Vector<PurchaseToolAction> purchasetoolactionsDeactivate = state
										.getActionStateRepository()
										.getPurchaseToolActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < purchasetoolactionsDeactivate
										.size(); k++) {
									PurchaseToolAction tempAct = purchasetoolactionsDeactivate
											.elementAt(k);
									tempAct.setEmpWhoseMenuClickedOnInactive(softwareengineer);
								}
								softwareengineer.setOnBreak(true);
							}
						}
					}
				}
			}
		}
	}

	// IntegrateCodeEffectRuleFirst rule (IntegrateCode Action):
	private void integrateCodeEffectRuleFirst(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<IntegrateCodeAction> integratecodeActs = state
				.getActionStateRepository()
				.getIntegrateCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < integratecodeActs.size(); i++) {
				IntegrateCodeAction integratecodeAct = integratecodeActs
						.elementAt(i);
				if ((integratecodeAct.getAllEmps().size() >= 1)
						&& (integratecodeAct.getAllCodeDocs().size() >= 1)
						&& (integratecodeAct.getAllProjs().size() >= 1)
						&& (integratecodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (integratecodeAct.getAllAssociatedDesignDocs()
								.size() >= 1)
						&& (integratecodeAct.getAllDevelopmentEnvironments()
								.size() >= 0)) {
					Vector<Employee> emps = integratecodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> codedocs = integratecodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							double allAssociatedDesignDocDesignDocumentPercentComplete = 0;
							Vector allAssociatedDesignDocs = integratecodeAct
									.getAllAssociatedDesignDocs();
							for (int k = 0; k < allAssociatedDesignDocs.size(); k++) {
								Object associateddesigndoc3 = allAssociatedDesignDocs
										.elementAt(k);
								if (associateddesigndoc3 instanceof DesignDocument) {
									allAssociatedDesignDocDesignDocumentPercentComplete += (double) (((DesignDocument) associateddesigndoc3)
											.getPercentComplete());
								}
							}
							code.setPcntIntegratedDiffDesDoc((int) ((((allAssociatedDesignDocDesignDocumentPercentComplete - ((double) (code
									.getPercentIntegrated()))) / 100) + .001) * 100000));
						}
					}
					Vector<Project> projs = integratecodeAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = integratecodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = integratecodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
					Vector<Tool> developmentenvironments = integratecodeAct
							.getAllActiveDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool developmentenvironment2 = developmentenvironments
								.elementAt(j);
						if (developmentenvironment2 instanceof IDE) {
							IDE ide = (IDE) developmentenvironment2;
						}
					}
				}
			}
		}
	}

	// GiveBonusEffectRuleA rule (GiveBonus Action):
	private void giveBonusEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<GiveBonusAction> givebonusActs = state
				.getActionStateRepository().getGiveBonusActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("GiveBonusEffectRuleA"))) {
			for (int i = 0; i < givebonusActs.size(); i++) {
				GiveBonusAction givebonusAct = givebonusActs.elementAt(i);
				if (givebonusAct == action) {
					if ((givebonusAct.getAllEmps().size() >= 1)
							&& (givebonusAct.getAllProjectWithBudgets().size() >= 1)) {
						double inputBonusAmount = 0;
						boolean gotValidInput0 = false;
						boolean cancel = false;
						if (!cancel) {
							while (!gotValidInput0) {
								String response = JOptionPane
										.showInputDialog(
												null,
												"Please enter bonus amount: (Double > 0.0)",
												"Input",
												JOptionPane.QUESTION_MESSAGE);
								if (response != null) {
									try {
										Double temp = new Double(response);
										if (temp.doubleValue() > 0.0) {
											inputBonusAmount = (double) (temp
													.doubleValue());
											gotValidInput0 = true;
										} else {
											JOptionPane
													.showMessageDialog(
															null,
															"Invalid Input -- Please try again!",
															"Invalid Input",
															JOptionPane.WARNING_MESSAGE);
										}
									} catch (NumberFormatException e) {
										JOptionPane
												.showMessageDialog(
														null,
														"Invalid Input -- Please try again!",
														"Invalid Input",
														JOptionPane.WARNING_MESSAGE);
									}
								} else // action cancelled
								{
									state.getActionStateRepository()
											.getGiveBonusActionStateRepository()
											.remove(givebonusAct);
									cancel = true;
									break;
								}
							}
						}
						if (gotValidInput0) {
							Vector<Employee> emps = givebonusAct
									.getAllActiveEmps();
							for (int j = 0; j < emps.size(); j++) {
								Employee emp2 = emps.elementAt(j);
								if (emp2 instanceof SoftwareEngineer) {
									SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
									softwareengineer
											.setEnergy((double) (((double) (softwareengineer
													.getEnergy())) + (inputBonusAmount / (((double) (softwareengineer
													.getPayRate())) * 480 / 2))));
									softwareengineer
											.setMood((double) (((double) (softwareengineer
													.getMood())) + (inputBonusAmount / (((double) (softwareengineer
													.getPayRate())) * 240 / 2))));
									softwareengineer
											.setProductivityInRequirements((double) (((double) (softwareengineer
													.getProductivityInRequirements())) + (.75 * (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10))));
									softwareengineer
											.setProductivityInDesign((double) (((double) (softwareengineer
													.getProductivityInDesign())) + (.75 * (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10))));
									softwareengineer
											.setProductivityInCoding((double) (((double) (softwareengineer
													.getProductivityInCoding())) + (.75 * (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10))));
									softwareengineer
											.setErrorRateInRequirements((double) (((double) (softwareengineer
													.getErrorRateInRequirements())) - (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10)));
									softwareengineer
											.setErrorRateInDesign((double) (((double) (softwareengineer
													.getErrorRateInDesign())) - (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10)));
									softwareengineer
											.setErrorRateInCoding((double) (((double) (softwareengineer
													.getErrorRateInCoding())) - (inputBonusAmount
													/ ((double) (softwareengineer
															.getPayRate())) * 10)));
								}
							}
							Vector<Project> projectwithbudgets = givebonusAct
									.getAllActiveProjectWithBudgets();
							for (int j = 0; j < projectwithbudgets.size(); j++) {
								Project projectwithbudget2 = projectwithbudgets
										.elementAt(j);
								if (projectwithbudget2 instanceof SEProject) {
									SEProject seproject = (SEProject) projectwithbudget2;
									seproject
											.setMoneySpent((double) (((double) (seproject
													.getMoneySpent())) + inputBonusAmount));
								}
							}
						}
					}
				}
			}
		}
	}

	// IntegrateCodeEffectRuleA rule (IntegrateCode Action):
	private void integrateCodeEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<IntegrateCodeAction> integratecodeActs = state
				.getActionStateRepository()
				.getIntegrateCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < integratecodeActs.size(); i++) {
				IntegrateCodeAction integratecodeAct = integratecodeActs
						.elementAt(i);
				if ((integratecodeAct.getAllEmps().size() >= 1)
						&& (integratecodeAct.getAllCodeDocs().size() >= 1)
						&& (integratecodeAct.getAllProjs().size() >= 1)
						&& (integratecodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (integratecodeAct.getAllAssociatedDesignDocs()
								.size() >= 1)
						&& (integratecodeAct.getAllDevelopmentEnvironments()
								.size() >= 0)) {
					Vector<Employee> emps = integratecodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInCoding((double) ((((double) (softwareengineer
											.getProductivityInCodingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInCoding((double) ((((double) (softwareengineer
											.getErrorRateInCodingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> codedocs = integratecodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setPercentErroneous((double) ((((double) (code
									.getNumKnownErrors())) + ((double) (code
									.getNumUnknownErrors())))
									/ (((double) (code.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerProductivityInCoding = 0;
							Vector allActiveEmps = integratecodeAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInCoding += (double) (((SoftwareEngineer) emp3)
											.getProductivityInCoding());
								}
							}
							double numEmp = (double) (integratecodeAct
									.getAllEmps().size());
							double allActiveAssociatedDesignDocDesignDocumentPercentErroneous = 0;
							Vector allActiveAssociatedDesignDocs = integratecodeAct
									.getAllActiveAssociatedDesignDocs();
							for (int k = 0; k < allActiveAssociatedDesignDocs
									.size(); k++) {
								Object associateddesigndoc3 = allActiveAssociatedDesignDocs
										.elementAt(k);
								if (associateddesigndoc3 instanceof DesignDocument) {
									allActiveAssociatedDesignDocDesignDocumentPercentErroneous += (double) (((DesignDocument) associateddesigndoc3)
											.getPercentErroneous());
								}
							}
							code.setAmountIntegrated((double) (((double) (code
									.getAmountIntegrated())) + ((allActiveEmpSoftwareEngineerProductivityInCoding * 10)
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									/ ((double) (code.getNumAuthors()))
									* (1 + (2 * ((double) (code
											.getPcntIntegratedDiffDesDoc())))) * (1 - (allActiveAssociatedDesignDocDesignDocumentPercentErroneous / 100)))));
							double allActiveEmpSoftwareEngineerErrorRateInCoding = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInCoding += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInCoding());
								}
							}
							code.setNumUnknownErrors((double) (((double) (code
									.getNumUnknownErrors())) + (allActiveEmpSoftwareEngineerErrorRateInCoding
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + (1 - ((double) (code
											.getPcntIntegratedDiffDesDoc())))) * 1.5)));
							code.setPercentIntegrated((double) (((double) (code
									.getAmountIntegrated()))
									/ (((double) (code.getSize())) + .1) * 100));
						}
					}
					Vector<Project> projs = integratecodeAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = integratecodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = integratecodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
					Vector<Tool> developmentenvironments = integratecodeAct
							.getAllActiveDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool developmentenvironment2 = developmentenvironments
								.elementAt(j);
						if (developmentenvironment2 instanceof IDE) {
							IDE ide = (IDE) developmentenvironment2;
						}
					}
				}
			}
		}
	}

	// CorrectCodeEffectRuleA rule (CorrectCode Action):
	private void correctCodeEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CorrectCodeAction> correctcodeActs = state
				.getActionStateRepository()
				.getCorrectCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < correctcodeActs.size(); i++) {
				CorrectCodeAction correctcodeAct = correctcodeActs.elementAt(i);
				if ((correctcodeAct.getAllEmps().size() >= 1)
						&& (correctcodeAct.getAllCodeDocs().size() >= 1)
						&& (correctcodeAct.getAllProjs().size() >= 1)
						&& (correctcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (correctcodeAct.getAllAssociatedDesignDocs().size() >= 1)
						&& (correctcodeAct.getAllDevelopmentEnvironments()
								.size() >= 0)) {
					Vector<Employee> emps = correctcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInCoding((double) ((((double) (softwareengineer
											.getProductivityInCodingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInCoding((double) ((((double) (softwareengineer
											.getErrorRateInCodingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> codedocs = correctcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setPercentErroneous((double) ((((double) (code
									.getNumKnownErrors())) + ((double) (code
									.getNumUnknownErrors())))
									/ (((double) (code.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInCoding = 0;
							Vector allActiveEmps = correctcodeAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInCoding += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInCoding());
								}
							}
							double numEmp = (double) (correctcodeAct
									.getAllEmps().size());
							double allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor = 0;
							Vector allActiveDevelopmentEnvironments = correctcodeAct
									.getAllActiveDevelopmentEnvironments();
							for (int k = 0; k < allActiveDevelopmentEnvironments
									.size(); k++) {
								Object developmentenvironment3 = allActiveDevelopmentEnvironments
										.elementAt(k);
								if (developmentenvironment3 instanceof IDE) {
									allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor += (double) (((IDE) developmentenvironment3)
											.getErrorRateDecreaseFactor());
								}
							}
							code.setNumUnknownErrors((double) (((double) (code
									.getNumUnknownErrors())) + ((.2 * allActiveEmpSoftwareEngineerErrorRateInCoding)
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2))) * (1 - allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor))));
							double allActiveEmpSoftwareEngineerProductivityInCoding = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInCoding += (double) (((SoftwareEngineer) emp3)
											.getProductivityInCoding());
								}
							}
							double allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveDevelopmentEnvironments
									.size(); k++) {
								Object developmentenvironment3 = allActiveDevelopmentEnvironments
										.elementAt(k);
								if (developmentenvironment3 instanceof IDE) {
									allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor += (double) (((IDE) developmentenvironment3)
											.getProductivityIncreaseFactor());
								}
							}
							code.setNumKnownErrors((double) (((double) (code
									.getNumKnownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInCoding)
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2))) * (1 + allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor))));
						}
					}
					Vector<Project> projs = correctcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = correctcodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
					Vector<Tool> developmentenvironments = correctcodeAct
							.getAllActiveDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool developmentenvironment2 = developmentenvironments
								.elementAt(j);
						if (developmentenvironment2 instanceof IDE) {
							IDE ide = (IDE) developmentenvironment2;
						}
					}
				}
			}
		}
	}

	// CreateCodeEffectRuleFirst rule (CreateCode Action):
	private void createCodeEffectRuleFirst(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CreateCodeAction> createcodeActs = state
				.getActionStateRepository()
				.getCreateCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createcodeActs.size(); i++) {
				CreateCodeAction createcodeAct = createcodeActs.elementAt(i);
				if ((createcodeAct.getAllEmps().size() >= 1)
						&& (createcodeAct.getAllCodeDocs().size() >= 1)
						&& (createcodeAct.getAllProjs().size() >= 1)
						&& (createcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (createcodeAct.getAllAssociatedDesignDocuments()
								.size() >= 1)
						&& (createcodeAct.getAllDevelopmentEnvironments()
								.size() >= 0)
						&& (createcodeAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)) {
					Vector<Employee> emps = createcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> codedocs = createcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							double allAssociatedRequirementsDocRequirementsDocumentPercentComplete = 0;
							Vector allAssociatedRequirementsDocs = createcodeAct
									.getAllAssociatedRequirementsDocs();
							for (int k = 0; k < allAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allAssociatedRequirementsDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentComplete());
								}
							}
							code.setCompletenessDiffReqDoc((int) ((((allAssociatedRequirementsDocRequirementsDocumentPercentComplete - ((double) (code
									.getPercentComplete()))) / 100) + .001) * 100000));
							double allAssociatedDesignDocumentDesignDocumentPercentComplete = 0;
							Vector allAssociatedDesignDocuments = createcodeAct
									.getAllAssociatedDesignDocuments();
							for (int k = 0; k < allAssociatedDesignDocuments
									.size(); k++) {
								Object associateddesigndocument3 = allAssociatedDesignDocuments
										.elementAt(k);
								if (associateddesigndocument3 instanceof DesignDocument) {
									allAssociatedDesignDocumentDesignDocumentPercentComplete += (double) (((DesignDocument) associateddesigndocument3)
											.getPercentComplete());
								}
							}
							code.setCompletenessDiffDesDoc((int) ((((allAssociatedDesignDocumentDesignDocumentPercentComplete - ((double) (code
									.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Project> projs = createcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocuments = createcodeAct
							.getAllActiveAssociatedDesignDocuments();
					for (int j = 0; j < associateddesigndocuments.size(); j++) {
						Artifact associateddesigndocument2 = associateddesigndocuments
								.elementAt(j);
						if (associateddesigndocument2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndocument2;
						}
					}
					Vector<Tool> developmentenvironments = createcodeAct
							.getAllActiveDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool developmentenvironment2 = developmentenvironments
								.elementAt(j);
						if (developmentenvironment2 instanceof IDE) {
							IDE ide = (IDE) developmentenvironment2;
						}
					}
					Vector<Artifact> associatedsystemtestplans = createcodeAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
				}
			}
		}
	}

	// CreateCodeEffectRuleA rule (CreateCode Action):
	private void createCodeEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CreateCodeAction> createcodeActs = state
				.getActionStateRepository()
				.getCreateCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createcodeActs.size(); i++) {
				CreateCodeAction createcodeAct = createcodeActs.elementAt(i);
				if ((createcodeAct.getAllEmps().size() >= 1)
						&& (createcodeAct.getAllCodeDocs().size() >= 1)
						&& (createcodeAct.getAllProjs().size() >= 1)
						&& (createcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (createcodeAct.getAllAssociatedDesignDocuments()
								.size() >= 1)
						&& (createcodeAct.getAllDevelopmentEnvironments()
								.size() >= 0)
						&& (createcodeAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)) {
					Vector<Employee> emps = createcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInCoding((double) ((((double) (softwareengineer
											.getProductivityInCodingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInCoding((double) ((((double) (softwareengineer
											.getErrorRateInCodingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> codedocs = createcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setPercentErroneous((double) ((((double) (code
									.getNumKnownErrors())) + ((double) (code
									.getNumUnknownErrors())))
									/ (((double) (code.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInCoding = 0;
							Vector allActiveEmps = createcodeAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInCoding += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInCoding());
								}
							}
							double numEmp = (double) (createcodeAct
									.getAllEmps().size());
							double allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous = 0;
							Vector allActiveAssociatedRequirementsDocs = createcodeAct
									.getAllActiveAssociatedRequirementsDocs();
							for (int k = 0; k < allActiveAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allActiveAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentErroneous());
								}
							}
							double allActiveAssociatedDesignDocumentDesignDocumentPercentErroneous = 0;
							Vector allActiveAssociatedDesignDocuments = createcodeAct
									.getAllActiveAssociatedDesignDocuments();
							for (int k = 0; k < allActiveAssociatedDesignDocuments
									.size(); k++) {
								Object associateddesigndocument3 = allActiveAssociatedDesignDocuments
										.elementAt(k);
								if (associateddesigndocument3 instanceof DesignDocument) {
									allActiveAssociatedDesignDocumentDesignDocumentPercentErroneous += (double) (((DesignDocument) associateddesigndocument3)
											.getPercentErroneous());
								}
							}
							double allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor = 0;
							Vector allActiveDevelopmentEnvironments = createcodeAct
									.getAllActiveDevelopmentEnvironments();
							for (int k = 0; k < allActiveDevelopmentEnvironments
									.size(); k++) {
								Object developmentenvironment3 = allActiveDevelopmentEnvironments
										.elementAt(k);
								if (developmentenvironment3 instanceof IDE) {
									allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor += (double) (((IDE) developmentenvironment3)
											.getErrorRateDecreaseFactor());
								}
							}
							code.setNumUnknownErrors((double) (((double) (code
									.getNumUnknownErrors())) + (allActiveEmpSoftwareEngineerErrorRateInCoding
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + ((allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous + allActiveAssociatedDesignDocumentDesignDocumentPercentErroneous) / 100 * 20))
									* (1 + (2 - ((.5 * ((double) (code
											.getCompletenessDiffReqDoc()))) + (2 * ((double) (code
											.getCompletenessDiffDesDoc())))))) * (1 - allActiveDevelopmentEnvironmentIDEErrorRateDecreaseFactor))));
							code.setPercentIntegrated((double) (((double) (code
									.getAmountIntegrated()))
									/ (((double) (code.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerProductivityInCoding = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInCoding += (double) (((SoftwareEngineer) emp3)
											.getProductivityInCoding());
								}
							}
							double allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveDevelopmentEnvironments
									.size(); k++) {
								Object developmentenvironment3 = allActiveDevelopmentEnvironments
										.elementAt(k);
								if (developmentenvironment3 instanceof IDE) {
									allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor += (double) (((IDE) developmentenvironment3)
											.getProductivityIncreaseFactor());
								}
							}
							code.setSize((double) (((double) (code.getSize())) + (allActiveEmpSoftwareEngineerProductivityInCoding
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + (((double) (code
											.getCompletenessDiffDesDoc())) + (.5 * ((double) (code
											.getCompletenessDiffReqDoc()))))) * (1 + allActiveDevelopmentEnvironmentIDEProductivityIncreaseFactor))));
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = createcodeAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							code.setPercentComplete((double) (((double) (code
									.getSize()))
									/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
					Vector<Project> projs = createcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocuments = createcodeAct
							.getAllActiveAssociatedDesignDocuments();
					for (int j = 0; j < associateddesigndocuments.size(); j++) {
						Artifact associateddesigndocument2 = associateddesigndocuments
								.elementAt(j);
						if (associateddesigndocument2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndocument2;
						}
					}
					Vector<Tool> developmentenvironments = createcodeAct
							.getAllActiveDevelopmentEnvironments();
					for (int j = 0; j < developmentenvironments.size(); j++) {
						Tool developmentenvironment2 = developmentenvironments
								.elementAt(j);
						if (developmentenvironment2 instanceof IDE) {
							IDE ide = (IDE) developmentenvironment2;
						}
					}
					Vector<Artifact> associatedsystemtestplans = createcodeAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
				}
			}
		}
	}

	// ReviewRequirementsEffectRuleB rule (ReviewRequirements Action):
	private void reviewRequirementsEffectRuleB(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<ReviewRequirementsAction> reviewrequirementsActs = state
				.getActionStateRepository()
				.getReviewRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewrequirementsActs.size(); i++) {
				ReviewRequirementsAction reviewrequirementsAct = reviewrequirementsActs
						.elementAt(i);
				if ((reviewrequirementsAct.getAllEmps().size() >= 1)
						&& (reviewrequirementsAct.getAllRequirementsDocs()
								.size() >= 1)
						&& (reviewrequirementsAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> requirementsdocs = reviewrequirementsAct
							.getAllActiveRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact requirementsdoc2 = requirementsdocs
								.elementAt(j);
						if (requirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) requirementsdoc2;
							requirementsdocument
									.setNumUnknownTemp((double) (((double) (requirementsdocument
											.getNumUnknownErrors()))));
						}
					}
					Vector<Project> projs = reviewrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// ReviewRequirementsEffectRuleC rule (ReviewRequirements Action):
	private void reviewRequirementsEffectRuleC(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<ReviewRequirementsAction> reviewrequirementsActs = state
				.getActionStateRepository()
				.getReviewRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewrequirementsActs.size(); i++) {
				ReviewRequirementsAction reviewrequirementsAct = reviewrequirementsActs
						.elementAt(i);
				if ((reviewrequirementsAct.getAllEmps().size() >= 1)
						&& (reviewrequirementsAct.getAllRequirementsDocs()
								.size() >= 1)
						&& (reviewrequirementsAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> requirementsdocs = reviewrequirementsAct
							.getAllActiveRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact requirementsdoc2 = requirementsdocs
								.elementAt(j);
						if (requirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) requirementsdoc2;
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							Vector allActiveEmps = reviewrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double numEmp = (double) (reviewrequirementsAct
									.getAllEmps().size());
							requirementsdocument
									.setNumUnknownErrors((double) (((double) (requirementsdocument
											.getNumUnknownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInRequirements) * (1 - (.01 * (numEmp
											* (numEmp - 1) / 2))))));
						}
					}
					Vector<Project> projs = reviewrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// ChangePayRateEffectRuleA rule (ChangePayRate Action):
	private void changePayRateEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ChangePayRateAction> changepayrateActs = state
				.getActionStateRepository()
				.getChangePayRateActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("ChangePayRateEffectRuleA"))) {
			for (int i = 0; i < changepayrateActs.size(); i++) {
				ChangePayRateAction changepayrateAct = changepayrateActs
						.elementAt(i);
				if (changepayrateAct == action) {
					if ((changepayrateAct.getAllEmps().size() >= 1)) {
						double inputNewPayRate = 0;
						boolean gotValidInput0 = false;
						boolean cancel = false;
						if (!cancel) {
							while (!gotValidInput0) {
								String response = JOptionPane
										.showInputDialog(
												null,
												"Please enter the new pay rate: (Double >= 0.0)",
												"Input",
												JOptionPane.QUESTION_MESSAGE);
								if (response != null) {
									try {
										Double temp = new Double(response);
										if (temp.doubleValue() >= 0.0) {
											inputNewPayRate = (double) (temp
													.doubleValue());
											gotValidInput0 = true;
										} else {
											JOptionPane
													.showMessageDialog(
															null,
															"Invalid Input -- Please try again!",
															"Invalid Input",
															JOptionPane.WARNING_MESSAGE);
										}
									} catch (NumberFormatException e) {
										JOptionPane
												.showMessageDialog(
														null,
														"Invalid Input -- Please try again!",
														"Invalid Input",
														JOptionPane.WARNING_MESSAGE);
									}
								} else // action cancelled
								{
									state.getActionStateRepository()
											.getChangePayRateActionStateRepository()
											.remove(changepayrateAct);
									cancel = true;
									break;
								}
							}
						}
						if (gotValidInput0) {
							Vector<Employee> emps = changepayrateAct
									.getAllActiveEmps();
							for (int j = 0; j < emps.size(); j++) {
								Employee emp2 = emps.elementAt(j);
								if (emp2 instanceof SoftwareEngineer) {
									SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
									softwareengineer
											.setProductivityInTestingUnadjusted((double) (((double) (softwareengineer
													.getProductivityInTestingUnadjusted())) + ((((double) (softwareengineer
													.getProductivityInTestingUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setErrorRateInTestingUnadjusted((double) (((double) (softwareengineer
													.getErrorRateInTestingUnadjusted())) - ((((double) (softwareengineer
													.getErrorRateInTestingUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setProductivityInRequirementsUnadjusted((double) (((double) (softwareengineer
													.getProductivityInRequirementsUnadjusted())) + ((((double) (softwareengineer
													.getProductivityInRequirementsUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setProductivityInDesignUnadjusted((double) (((double) (softwareengineer
													.getProductivityInDesignUnadjusted())) + ((((double) (softwareengineer
													.getProductivityInDesignUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setProductivityInCodingUnadjusted((double) (((double) (softwareengineer
													.getProductivityInCodingUnadjusted())) + ((((double) (softwareengineer
													.getProductivityInCodingUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setErrorRateInRequirementsUnadjusted((double) (((double) (softwareengineer
													.getErrorRateInRequirementsUnadjusted())) - ((((double) (softwareengineer
													.getErrorRateInRequirementsUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setErrorRateInDesignUnadjusted((double) (((double) (softwareengineer
													.getErrorRateInDesignUnadjusted())) - ((((double) (softwareengineer
													.getErrorRateInDesignUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setErrorRateInCodingUnadjusted((double) (((double) (softwareengineer
													.getErrorRateInCodingUnadjusted())) - ((((double) (softwareengineer
													.getErrorRateInCodingUnadjusted())) * ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))) / 2)));
									softwareengineer
											.setEnergy((double) (((double) (softwareengineer
													.getEnergy())) + (((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate()))) * 2)));
									softwareengineer
											.setMood((double) (((double) (softwareengineer
													.getMood())) + ((inputNewPayRate - ((double) (softwareengineer
													.getPayRate()))) / ((double) (softwareengineer
													.getPayRate())))));
									softwareengineer
											.setPayRate((double) (inputNewPayRate));
								}
							}
						}
					}
				}
			}
		}
	}

	// ReviewRequirementsEffectRuleA rule (ReviewRequirements Action):
	private void reviewRequirementsEffectRuleA(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<ReviewRequirementsAction> reviewrequirementsActs = state
				.getActionStateRepository()
				.getReviewRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewrequirementsActs.size(); i++) {
				ReviewRequirementsAction reviewrequirementsAct = reviewrequirementsActs
						.elementAt(i);
				if ((reviewrequirementsAct.getAllEmps().size() >= 1)
						&& (reviewrequirementsAct.getAllRequirementsDocs()
								.size() >= 1)
						&& (reviewrequirementsAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInRequirements((double) ((((double) (softwareengineer
											.getProductivityInRequirementsUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInRequirements((double) ((((double) (softwareengineer
											.getErrorRateInRequirementsUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> requirementsdocs = reviewrequirementsAct
							.getAllActiveRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact requirementsdoc2 = requirementsdocs
								.elementAt(j);
						if (requirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) requirementsdoc2;
							requirementsdocument
									.setPercentErroneous((double) ((((double) (requirementsdocument
											.getNumKnownErrors())) + ((double) (requirementsdocument
											.getNumUnknownErrors())))
											/ (((double) (requirementsdocument
													.getSize())) + .1) * 100));
							requirementsdocument
									.setNumKnownErrors((double) (((double) (requirementsdocument
											.getNumKnownErrors())) + (((double) (requirementsdocument
											.getNumUnknownTemp())) - ((double) (requirementsdocument
											.getNumUnknownErrors())))));
						}
					}
					Vector<Project> projs = reviewrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// IntroduceNewRequirementsEffectRuleA rule (IntroduceNewRequirements
	// Action):
	private void introduceNewRequirementsEffectRuleA(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<IntroduceNewRequirementsAction> introducenewrequirementsActs = state
				.getActionStateRepository()
				.getIntroduceNewRequirementsActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < introducenewrequirementsActs.size(); i++) {
				IntroduceNewRequirementsAction introducenewrequirementsAct = introducenewrequirementsActs
						.elementAt(i);
				if ((introducenewrequirementsAct.getAllCusts().size() >= 1)
						&& (introducenewrequirementsAct
								.getAllAssociatedRequirementsDocuments().size() >= 1)
						&& (introducenewrequirementsAct.getAllProjs().size() >= 1)
						&& (introducenewrequirementsAct
								.getAllEmpWOverheadTexts().size() >= 1)
						&& (introducenewrequirementsAct.getAllAssociatedCodes()
								.size() >= 1)
						&& (introducenewrequirementsAct
								.getAllAssociatedDesignDocuments().size() >= 1)
						&& (introducenewrequirementsAct
								.getAllAssociatedSystemTestPlans().size() >= 1)) {
					Vector<Customer> custs = introducenewrequirementsAct
							.getAllActiveCusts();
					for (int j = 0; j < custs.size(); j++) {
						Customer cust2 = custs.elementAt(j);
						if (cust2 instanceof ACustomer) {
							ACustomer acustomer = (ACustomer) cust2;
						}
					}
					Vector<Artifact> associatedrequirementsdocuments = introducenewrequirementsAct
							.getAllActiveAssociatedRequirementsDocuments();
					for (int j = 0; j < associatedrequirementsdocuments.size(); j++) {
						Artifact associatedrequirementsdocument2 = associatedrequirementsdocuments
								.elementAt(j);
						if (associatedrequirementsdocument2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdocument2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = introducenewrequirementsAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							requirementsdocument
									.setPercentComplete((double) (((double) (requirementsdocument
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
					Vector<Project> projs = introducenewrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
							seproject
									.setRequiredSizeOfCode((int) (((double) (seproject
											.getRequiredSizeOfCode())) + ((double) ((ranNumGen
											.nextInt(5 - 1 + 1) + 1)))));
							seproject.setBudget((double) (((double) (seproject
									.getBudget())) + ((double) ((ranNumGen
									.nextInt(1000 - 0 + 1) + 0)))));
							seproject
									.setAllottedTime((int) (((double) (seproject
											.getAllottedTime())) + ((double) ((ranNumGen
											.nextInt(15 - 0 + 1) + 0)))));
						}
					}
					Vector<Employee> empwoverheadtexts = introducenewrequirementsAct
							.getAllActiveEmpWOverheadTexts();
					for (int j = 0; j < empwoverheadtexts.size(); j++) {
						Employee empwoverheadtext2 = empwoverheadtexts
								.elementAt(j);
						if (empwoverheadtext2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) empwoverheadtext2;
						}
					}
					Vector<Artifact> associatedcodes = introducenewrequirementsAct
							.getAllActiveAssociatedCodes();
					for (int j = 0; j < associatedcodes.size(); j++) {
						Artifact associatedcode2 = associatedcodes.elementAt(j);
						if (associatedcode2 instanceof Code) {
							Code code = (Code) associatedcode2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = introducenewrequirementsAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							code.setPercentComplete((double) (((double) (code
									.getSize()))
									/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
					Vector<Artifact> associateddesigndocuments = introducenewrequirementsAct
							.getAllActiveAssociatedDesignDocuments();
					for (int j = 0; j < associateddesigndocuments.size(); j++) {
						Artifact associateddesigndocument2 = associateddesigndocuments
								.elementAt(j);
						if (associateddesigndocument2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndocument2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = introducenewrequirementsAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							designdocument
									.setPercentComplete((double) (((double) (designdocument
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
					Vector<Artifact> associatedsystemtestplans = introducenewrequirementsAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = introducenewrequirementsAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							systemtestplan
									.setPercentComplete((double) (((double) (systemtestplan
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
				}
			}
		}
	}

	// CreateSystemTestPlanEffectRuleFirst rule (CreateSystemTestPlan Action):
	private void createSystemTestPlanEffectRuleFirst(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CreateSystemTestPlanAction> createsystemtestplanActs = state
				.getActionStateRepository()
				.getCreateSystemTestPlanActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createsystemtestplanActs.size(); i++) {
				CreateSystemTestPlanAction createsystemtestplanAct = createsystemtestplanActs
						.elementAt(i);
				if ((createsystemtestplanAct.getAllEmps().size() >= 1)
						&& (createsystemtestplanAct.getAllAssociatedCodeDocs()
								.size() >= 1)
						&& (createsystemtestplanAct.getAllProjs().size() >= 1)
						&& (createsystemtestplanAct.getAllSystemTestPlanDocs()
								.size() >= 1)
						&& (createsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (createsystemtestplanAct.getAllTestingTools().size() >= 0)) {
					Vector<Employee> emps = createsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> associatedcodedocs = createsystemtestplanAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
						}
					}
					Vector<Project> projs = createsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> systemtestplandocs = createsystemtestplanAct
							.getAllActiveSystemTestPlanDocs();
					for (int j = 0; j < systemtestplandocs.size(); j++) {
						Artifact systemtestplandoc2 = systemtestplandocs
								.elementAt(j);
						if (systemtestplandoc2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) systemtestplandoc2;
							double allAssociatedRequirementsDocRequirementsDocumentPercentComplete = 0;
							Vector allAssociatedRequirementsDocs = createsystemtestplanAct
									.getAllAssociatedRequirementsDocs();
							for (int k = 0; k < allAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allAssociatedRequirementsDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentComplete());
								}
							}
							systemtestplan
									.setCompletnessDiffReqDoc((int) ((((allAssociatedRequirementsDocRequirementsDocumentPercentComplete - ((double) (systemtestplan
											.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Tool> testingtools = createsystemtestplanAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// CreateSystemTestPlanEffectRuleA rule (CreateSystemTestPlan Action):
	private void createSystemTestPlanEffectRuleA(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CreateSystemTestPlanAction> createsystemtestplanActs = state
				.getActionStateRepository()
				.getCreateSystemTestPlanActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createsystemtestplanActs.size(); i++) {
				CreateSystemTestPlanAction createsystemtestplanAct = createsystemtestplanActs
						.elementAt(i);
				if ((createsystemtestplanAct.getAllEmps().size() >= 1)
						&& (createsystemtestplanAct.getAllAssociatedCodeDocs()
								.size() >= 1)
						&& (createsystemtestplanAct.getAllProjs().size() >= 1)
						&& (createsystemtestplanAct.getAllSystemTestPlanDocs()
								.size() >= 1)
						&& (createsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (createsystemtestplanAct.getAllTestingTools().size() >= 0)) {
					Vector<Employee> emps = createsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInTesting((double) ((((double) (softwareengineer
											.getProductivityInTestingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInTesting((double) ((((double) (softwareengineer
											.getErrorRateInTestingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
						}
					}
					Vector<Artifact> associatedcodedocs = createsystemtestplanAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
						}
					}
					Vector<Project> projs = createsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> systemtestplandocs = createsystemtestplanAct
							.getAllActiveSystemTestPlanDocs();
					for (int j = 0; j < systemtestplandocs.size(); j++) {
						Artifact systemtestplandoc2 = systemtestplandocs
								.elementAt(j);
						if (systemtestplandoc2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) systemtestplandoc2;
							double allAssociatedRequirementsDocRequirementsDocumentPercentComplete = 0;
							Vector allAssociatedRequirementsDocs = createsystemtestplanAct
									.getAllAssociatedRequirementsDocs();
							for (int k = 0; k < allAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allAssociatedRequirementsDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentComplete());
								}
							}
							systemtestplan
									.setCompletnessDiffReqDoc((int) ((((allAssociatedRequirementsDocRequirementsDocumentPercentComplete - ((double) (systemtestplan
											.getPercentComplete()))) / 100) + .001) * 100000));
							systemtestplan
									.setPercentErroneous((double) ((((double) (systemtestplan
											.getNumKnownErrors())) + ((double) (systemtestplan
											.getNumUnknownErrors())))
											/ (((double) (systemtestplan
													.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInTesting = 0;
							Vector allActiveEmps = createsystemtestplanAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInTesting += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInTesting());
								}
							}
							double numEmp = (double) (createsystemtestplanAct
									.getAllEmps().size());
							double allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous = 0;
							Vector allActiveAssociatedRequirementsDocs = createsystemtestplanAct
									.getAllActiveAssociatedRequirementsDocs();
							for (int k = 0; k < allActiveAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allActiveAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentErroneous());
								}
							}
							double allActiveAssociatedRequirementsDocRequirementsDocumentPercentComplete = 0;
							for (int k = 0; k < allActiveAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allActiveAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allActiveAssociatedRequirementsDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentComplete());
								}
							}
							double allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor = 0;
							Vector allActiveTestingTools = createsystemtestplanAct
									.getAllActiveTestingTools();
							for (int k = 0; k < allActiveTestingTools.size(); k++) {
								Object testingtool3 = allActiveTestingTools
										.elementAt(k);
								if (testingtool3 instanceof AutomatedTestingTool) {
									allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor += (double) (((AutomatedTestingTool) testingtool3)
											.getErrorRateDecreaseFactor());
								}
							}
							systemtestplan
									.setNumUnknownErrors((double) (((double) (systemtestplan
											.getNumUnknownErrors())) + (allActiveEmpSoftwareEngineerErrorRateInTesting
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + (allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous / 100 * 20))
											* (1 + (1 - allActiveAssociatedRequirementsDocRequirementsDocumentPercentComplete / 100 / 2))
											* (1 - allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor) * 2)));
							double allActiveEmpSoftwareEngineerProductivityInTesting = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInTesting += (double) (((SoftwareEngineer) emp3)
											.getProductivityInTesting());
								}
							}
							double allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveTestingTools.size(); k++) {
								Object testingtool3 = allActiveTestingTools
										.elementAt(k);
								if (testingtool3 instanceof AutomatedTestingTool) {
									allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor += (double) (((AutomatedTestingTool) testingtool3)
											.getProductivityIncreaseFactor());
								}
							}
							systemtestplan
									.setSize((double) (((double) (systemtestplan
											.getSize())) + ((allActiveEmpSoftwareEngineerProductivityInTesting
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + (2 * allActiveAssociatedRequirementsDocRequirementsDocumentPercentComplete / 100)) * (1 + allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor)) * 2)));
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = createsystemtestplanAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							systemtestplan
									.setPercentComplete((double) (((double) (systemtestplan
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Tool> testingtools = createsystemtestplanAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// SystemTestEffectRuleFirst rule (SystemTest Action):
	private void systemTestEffectRuleFirst(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SystemTestAction> systemtestActs = state
				.getActionStateRepository()
				.getSystemTestActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < systemtestActs.size(); i++) {
				SystemTestAction systemtestAct = systemtestActs.elementAt(i);
				if ((systemtestAct.getAllCodeDocs().size() >= 1)
						&& (systemtestAct.getAllProjs().size() >= 1)
						&& (systemtestAct.getAllEmps().size() >= 1)
						&& (systemtestAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)
						&& (systemtestAct.getAllTestingTools().size() >= 0)) {
					Vector<Artifact> codedocs = systemtestAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							double allAssociatedSystemTestPlanSystemTestPlanPercentComplete = 0;
							Vector allAssociatedSystemTestPlans = systemtestAct
									.getAllAssociatedSystemTestPlans();
							for (int k = 0; k < allAssociatedSystemTestPlans
									.size(); k++) {
								Object associatedsystemtestplan3 = allAssociatedSystemTestPlans
										.elementAt(k);
								if (associatedsystemtestplan3 instanceof SystemTestPlan) {
									allAssociatedSystemTestPlanSystemTestPlanPercentComplete += (double) (((SystemTestPlan) associatedsystemtestplan3)
											.getPercentComplete());
								}
							}
							code.setCompletenessDiffTestPlan((int) ((((allAssociatedSystemTestPlanSystemTestPlanPercentComplete - ((double) (code
									.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Project> projs = systemtestAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Employee> emps = systemtestAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> associatedsystemtestplans = systemtestAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
					Vector<Tool> testingtools = systemtestAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// SystemTestEffectRuleC rule (SystemTest Action):
	private void systemTestEffectRuleC(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SystemTestAction> systemtestActs = state
				.getActionStateRepository()
				.getSystemTestActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < systemtestActs.size(); i++) {
				SystemTestAction systemtestAct = systemtestActs.elementAt(i);
				if ((systemtestAct.getAllCodeDocs().size() >= 1)
						&& (systemtestAct.getAllProjs().size() >= 1)
						&& (systemtestAct.getAllEmps().size() >= 1)
						&& (systemtestAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)
						&& (systemtestAct.getAllTestingTools().size() >= 0)) {
					Vector<Artifact> codedocs = systemtestAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setNumUnknownTemp((double) (((double) (code
									.getNumUnknownErrors()))));
						}
					}
					Vector<Project> projs = systemtestAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Employee> emps = systemtestAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> associatedsystemtestplans = systemtestAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
					Vector<Tool> testingtools = systemtestAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// SystemTestEffectRuleA rule (SystemTest Action):
	private void systemTestEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SystemTestAction> systemtestActs = state
				.getActionStateRepository()
				.getSystemTestActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < systemtestActs.size(); i++) {
				SystemTestAction systemtestAct = systemtestActs.elementAt(i);
				if ((systemtestAct.getAllCodeDocs().size() >= 1)
						&& (systemtestAct.getAllProjs().size() >= 1)
						&& (systemtestAct.getAllEmps().size() >= 1)
						&& (systemtestAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)
						&& (systemtestAct.getAllTestingTools().size() >= 0)) {
					Vector<Artifact> codedocs = systemtestAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							double allActiveEmpSoftwareEngineerProductivityInTesting = 0;
							Vector allActiveEmps = systemtestAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInTesting += (double) (((SoftwareEngineer) emp3)
											.getProductivityInTesting());
								}
							}
							double numEmp = (double) (systemtestAct
									.getAllEmps().size());
							double allActiveAssociatedSystemTestPlanSystemTestPlanPercentErroneous = 0;
							Vector allActiveAssociatedSystemTestPlans = systemtestAct
									.getAllActiveAssociatedSystemTestPlans();
							for (int k = 0; k < allActiveAssociatedSystemTestPlans
									.size(); k++) {
								Object associatedsystemtestplan3 = allActiveAssociatedSystemTestPlans
										.elementAt(k);
								if (associatedsystemtestplan3 instanceof SystemTestPlan) {
									allActiveAssociatedSystemTestPlanSystemTestPlanPercentErroneous += (double) (((SystemTestPlan) associatedsystemtestplan3)
											.getPercentErroneous());
								}
							}
							double allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor = 0;
							Vector allActiveTestingTools = systemtestAct
									.getAllActiveTestingTools();
							for (int k = 0; k < allActiveTestingTools.size(); k++) {
								Object testingtool3 = allActiveTestingTools
										.elementAt(k);
								if (testingtool3 instanceof AutomatedTestingTool) {
									allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor += (double) (((AutomatedTestingTool) testingtool3)
											.getProductivityIncreaseFactor());
								}
							}
							code.setNumUnknownErrors((double) (((double) (code
									.getNumUnknownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInTesting)
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + ((double) (code
											.getCompletenessDiffTestPlan())))
									* (1 - (allActiveAssociatedSystemTestPlanSystemTestPlanPercentErroneous / 100)) * (1 + allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor))));
						}
					}
					Vector<Project> projs = systemtestAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Employee> emps = systemtestAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInTesting((double) ((((double) (softwareengineer
											.getProductivityInTestingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInTesting((double) ((((double) (softwareengineer
											.getErrorRateInTestingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
						}
					}
					Vector<Artifact> associatedsystemtestplans = systemtestAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
					Vector<Tool> testingtools = systemtestAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// SystemTestEffectRuleB rule (SystemTest Action):
	private void systemTestEffectRuleB(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SystemTestAction> systemtestActs = state
				.getActionStateRepository()
				.getSystemTestActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < systemtestActs.size(); i++) {
				SystemTestAction systemtestAct = systemtestActs.elementAt(i);
				if ((systemtestAct.getAllCodeDocs().size() >= 1)
						&& (systemtestAct.getAllProjs().size() >= 1)
						&& (systemtestAct.getAllEmps().size() >= 1)
						&& (systemtestAct.getAllAssociatedSystemTestPlans()
								.size() >= 1)
						&& (systemtestAct.getAllTestingTools().size() >= 0)) {
					Vector<Artifact> codedocs = systemtestAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setPercentErroneous((double) ((((double) (code
									.getNumKnownErrors())) + ((double) (code
									.getNumUnknownErrors())))
									/ (((double) (code.getSize())) + .1) * 100));
							code.setNumKnownErrors((double) (((double) (code
									.getNumKnownErrors())) + (((double) (code
									.getNumUnknownTemp())) - ((double) (code
									.getNumUnknownErrors())))));
						}
					}
					Vector<Project> projs = systemtestAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Employee> emps = systemtestAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> associatedsystemtestplans = systemtestAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
						}
					}
					Vector<Tool> testingtools = systemtestAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// ReviewDesignEffectRuleB rule (ReviewDesign Action):
	private void reviewDesignEffectRuleB(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewDesignAction> reviewdesignActs = state
				.getActionStateRepository()
				.getReviewDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewdesignActs.size(); i++) {
				ReviewDesignAction reviewdesignAct = reviewdesignActs
						.elementAt(i);
				if ((reviewdesignAct.getAllEmps().size() >= 1)
						&& (reviewdesignAct.getAllDesignDocs().size() >= 1)
						&& (reviewdesignAct.getAllProjs().size() >= 1)
						&& (reviewdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)) {
					Vector<Employee> emps = reviewdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> designdocs = reviewdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							designdocument
									.setNumUnknownTemp((double) (((double) (designdocument
											.getNumUnknownErrors()))));
						}
					}
					Vector<Project> projs = reviewdesignAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
				}
			}
		}
	}

	// ReviewDesignEffectRuleA rule (ReviewDesign Action):
	private void reviewDesignEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewDesignAction> reviewdesignActs = state
				.getActionStateRepository()
				.getReviewDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewdesignActs.size(); i++) {
				ReviewDesignAction reviewdesignAct = reviewdesignActs
						.elementAt(i);
				if ((reviewdesignAct.getAllEmps().size() >= 1)
						&& (reviewdesignAct.getAllDesignDocs().size() >= 1)
						&& (reviewdesignAct.getAllProjs().size() >= 1)
						&& (reviewdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)) {
					Vector<Employee> emps = reviewdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInDesign((double) ((((double) (softwareengineer
											.getProductivityInDesignUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInDesign((double) ((((double) (softwareengineer
											.getErrorRateInDesignUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> designdocs = reviewdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							double allActiveEmpSoftwareEngineerProductivityInDesign = 0;
							Vector allActiveEmps = reviewdesignAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInDesign += (double) (((SoftwareEngineer) emp3)
											.getProductivityInDesign());
								}
							}
							double numEmp = (double) (reviewdesignAct
									.getAllEmps().size());
							designdocument
									.setNumUnknownErrors((double) (((double) (designdocument
											.getNumUnknownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInDesign) * (1 - (.01 * (numEmp
											* (numEmp - 1) / 2))))));
						}
					}
					Vector<Project> projs = reviewdesignAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
				}
			}
		}
	}

	// ReviewDesignEffectRuleC rule (ReviewDesign Action):
	private void reviewDesignEffectRuleC(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewDesignAction> reviewdesignActs = state
				.getActionStateRepository()
				.getReviewDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewdesignActs.size(); i++) {
				ReviewDesignAction reviewdesignAct = reviewdesignActs
						.elementAt(i);
				if ((reviewdesignAct.getAllEmps().size() >= 1)
						&& (reviewdesignAct.getAllDesignDocs().size() >= 1)
						&& (reviewdesignAct.getAllProjs().size() >= 1)
						&& (reviewdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)) {
					Vector<Employee> emps = reviewdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> designdocs = reviewdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							designdocument
									.setNumKnownErrors((double) (((double) (designdocument
											.getNumKnownErrors())) + (((double) (designdocument
											.getNumUnknownTemp())) - ((double) (designdocument
											.getNumUnknownErrors())))));
							designdocument
									.setPercentErroneous((double) ((((double) (designdocument
											.getNumKnownErrors())) + ((double) (designdocument
											.getNumUnknownErrors())))
											/ (((double) (designdocument
													.getSize())) + .1) * 100));
						}
					}
					Vector<Project> projs = reviewdesignAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
				}
			}
		}
	}

	// InspectCodeEffectRuleB rule (InspectCode Action):
	private void inspectCodeEffectRuleB(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<InspectCodeAction> inspectcodeActs = state
				.getActionStateRepository()
				.getInspectCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < inspectcodeActs.size(); i++) {
				InspectCodeAction inspectcodeAct = inspectcodeActs.elementAt(i);
				if ((inspectcodeAct.getAllEmps().size() >= 3)
						&& (inspectcodeAct.getAllCodeDocs().size() >= 1)
						&& (inspectcodeAct.getAllProjs().size() >= 1)
						&& (inspectcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (inspectcodeAct.getAllAssociatedDesignDocs().size() >= 1)) {
					Vector<Employee> emps = inspectcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> codedocs = inspectcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setNumUnknownTemp((double) (((double) (code
									.getNumUnknownErrors()))));
						}
					}
					Vector<Project> projs = inspectcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = inspectcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = inspectcodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
				}
			}
		}
	}

	// InspectCodeEffectRuleA rule (InspectCode Action):
	private void inspectCodeEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<InspectCodeAction> inspectcodeActs = state
				.getActionStateRepository()
				.getInspectCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < inspectcodeActs.size(); i++) {
				InspectCodeAction inspectcodeAct = inspectcodeActs.elementAt(i);
				if ((inspectcodeAct.getAllEmps().size() >= 3)
						&& (inspectcodeAct.getAllCodeDocs().size() >= 1)
						&& (inspectcodeAct.getAllProjs().size() >= 1)
						&& (inspectcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (inspectcodeAct.getAllAssociatedDesignDocs().size() >= 1)) {
					Vector<Employee> emps = inspectcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInCoding((double) ((((double) (softwareengineer
											.getProductivityInCodingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInCoding((double) ((((double) (softwareengineer
											.getErrorRateInCodingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> codedocs = inspectcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							double allActiveEmpSoftwareEngineerProductivityInCoding = 0;
							Vector allActiveEmps = inspectcodeAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInCoding += (double) (((SoftwareEngineer) emp3)
											.getProductivityInCoding());
								}
							}
							double numEmp = (double) (inspectcodeAct
									.getAllEmps().size());
							code.setNumUnknownErrors((double) (((double) (code
									.getNumUnknownErrors())) - (((.5 * allActiveEmpSoftwareEngineerProductivityInCoding) * (1 - (.01 * (numEmp
									* (numEmp - 1) / 2)))) * (1 - (((double) (code
									.getPercentIntegrated())) / 100)))));
						}
					}
					Vector<Project> projs = inspectcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = inspectcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = inspectcodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
				}
			}
		}
	}

	// InspectCodeEffectRuleC rule (InspectCode Action):
	private void inspectCodeEffectRuleC(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<InspectCodeAction> inspectcodeActs = state
				.getActionStateRepository()
				.getInspectCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < inspectcodeActs.size(); i++) {
				InspectCodeAction inspectcodeAct = inspectcodeActs.elementAt(i);
				if ((inspectcodeAct.getAllEmps().size() >= 3)
						&& (inspectcodeAct.getAllCodeDocs().size() >= 1)
						&& (inspectcodeAct.getAllProjs().size() >= 1)
						&& (inspectcodeAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (inspectcodeAct.getAllAssociatedDesignDocs().size() >= 1)) {
					Vector<Employee> emps = inspectcodeAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> codedocs = inspectcodeAct
							.getAllActiveCodeDocs();
					for (int j = 0; j < codedocs.size(); j++) {
						Artifact codedoc2 = codedocs.elementAt(j);
						if (codedoc2 instanceof Code) {
							Code code = (Code) codedoc2;
							code.setNumKnownErrors((double) (((double) (code
									.getNumKnownErrors())) + (((double) (code
									.getNumUnknownTemp())) - ((double) (code
									.getNumUnknownErrors())))));
							code.setPercentErroneous((double) ((((double) (code
									.getNumKnownErrors())) + ((double) (code
									.getNumUnknownErrors())))
									/ (((double) (code.getSize())) + .1) * 100));
						}
					}
					Vector<Project> projs = inspectcodeAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = inspectcodeAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Artifact> associateddesigndocs = inspectcodeAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
						}
					}
				}
			}
		}
	}

	// ReviewTestPlanEffectRuleB rule (ReviewSystemTestPlan Action):
	private void reviewTestPlanEffectRuleB(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewSystemTestPlanAction> reviewsystemtestplanActs = state
				.getActionStateRepository()
				.getReviewSystemTestPlanActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewsystemtestplanActs.size(); i++) {
				ReviewSystemTestPlanAction reviewsystemtestplanAct = reviewsystemtestplanActs
						.elementAt(i);
				if ((reviewsystemtestplanAct.getAllEmps().size() >= 1)
						&& (reviewsystemtestplanAct.getAllTestPlans().size() >= 1)
						&& (reviewsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (reviewsystemtestplanAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> testplans = reviewsystemtestplanAct
							.getAllActiveTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact testplan2 = testplans.elementAt(j);
						if (testplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) testplan2;
							systemtestplan
									.setNumUnknownTemp((double) (((double) (systemtestplan
											.getNumUnknownErrors()))));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Project> projs = reviewsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// ReviewTestPlanEffectRuleA rule (ReviewSystemTestPlan Action):
	private void reviewTestPlanEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewSystemTestPlanAction> reviewsystemtestplanActs = state
				.getActionStateRepository()
				.getReviewSystemTestPlanActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewsystemtestplanActs.size(); i++) {
				ReviewSystemTestPlanAction reviewsystemtestplanAct = reviewsystemtestplanActs
						.elementAt(i);
				if ((reviewsystemtestplanAct.getAllEmps().size() >= 1)
						&& (reviewsystemtestplanAct.getAllTestPlans().size() >= 1)
						&& (reviewsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (reviewsystemtestplanAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInTesting((double) ((((double) (softwareengineer
											.getProductivityInTestingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInTesting((double) ((((double) (softwareengineer
											.getErrorRateInTestingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> testplans = reviewsystemtestplanAct
							.getAllActiveTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact testplan2 = testplans.elementAt(j);
						if (testplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) testplan2;
							double allActiveEmpSoftwareEngineerProductivityInTesting = 0;
							Vector allActiveEmps = reviewsystemtestplanAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInTesting += (double) (((SoftwareEngineer) emp3)
											.getProductivityInTesting());
								}
							}
							double numEmp = (double) (reviewsystemtestplanAct
									.getAllEmps().size());
							systemtestplan
									.setNumUnknownErrors((double) (((double) (systemtestplan
											.getNumUnknownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInTesting) * (1 - (.01 * (numEmp
											* (numEmp - 1) / 2))))));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Project> projs = reviewsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// ReviewTestPlanEffectRuleC rule (ReviewSystemTestPlan Action):
	private void reviewTestPlanEffectRuleC(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<ReviewSystemTestPlanAction> reviewsystemtestplanActs = state
				.getActionStateRepository()
				.getReviewSystemTestPlanActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < reviewsystemtestplanActs.size(); i++) {
				ReviewSystemTestPlanAction reviewsystemtestplanAct = reviewsystemtestplanActs
						.elementAt(i);
				if ((reviewsystemtestplanAct.getAllEmps().size() >= 1)
						&& (reviewsystemtestplanAct.getAllTestPlans().size() >= 1)
						&& (reviewsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (reviewsystemtestplanAct.getAllProjs().size() >= 1)) {
					Vector<Employee> emps = reviewsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> testplans = reviewsystemtestplanAct
							.getAllActiveTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact testplan2 = testplans.elementAt(j);
						if (testplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) testplan2;
							systemtestplan
									.setNumKnownErrors((double) (((double) (systemtestplan
											.getNumKnownErrors())) + (((double) (systemtestplan
											.getNumUnknownTemp())) - ((double) (systemtestplan
											.getNumUnknownErrors())))));
							systemtestplan
									.setPercentErroneous((double) ((((double) (systemtestplan
											.getNumKnownErrors())) + ((double) (systemtestplan
											.getNumUnknownErrors())))
											/ (((double) (systemtestplan
													.getSize())) + .1) * 100));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = reviewsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Project> projs = reviewsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
				}
			}
		}
	}

	// CreateDesignEffectRuleFirst rule (CreateDesign Action):
	private void createDesignEffectRuleFirst(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CreateDesignAction> createdesignActs = state
				.getActionStateRepository()
				.getCreateDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createdesignActs.size(); i++) {
				CreateDesignAction createdesignAct = createdesignActs
						.elementAt(i);
				if ((createdesignAct.getAllEmps().size() >= 1)
						&& (createdesignAct.getAllDesignDocs().size() >= 1)
						&& (createdesignAct.getAllProjs().size() >= 1)
						&& (createdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (createdesignAct.getAllDesignEnvironments().size() >= 0)
						&& (createdesignAct.getAllAssociatedCodeDocs().size() >= 1)) {
					Vector<Employee> emps = createdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> designdocs = createdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							double allAssociatedRequirementsDocRequirementsDocumentPercentComplete = 0;
							Vector allAssociatedRequirementsDocs = createdesignAct
									.getAllAssociatedRequirementsDocs();
							for (int k = 0; k < allAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allAssociatedRequirementsDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentComplete());
								}
							}
							designdocument
									.setCompletenessDiffReqDoc((int) ((((allAssociatedRequirementsDocRequirementsDocumentPercentComplete - ((double) (designdocument
											.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Project> projs = createdesignAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Tool> designenvironments = createdesignAct
							.getAllActiveDesignEnvironments();
					for (int j = 0; j < designenvironments.size(); j++) {
						Tool designenvironment2 = designenvironments
								.elementAt(j);
						if (designenvironment2 instanceof DesignEnvironment) {
							DesignEnvironment designenvironment = (DesignEnvironment) designenvironment2;
						}
					}
					Vector<Artifact> associatedcodedocs = createdesignAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
							double allDesignDocDesignDocumentPercentComplete = 0;
							Vector allDesignDocs = createdesignAct
									.getAllDesignDocs();
							for (int k = 0; k < allDesignDocs.size(); k++) {
								Object designdoc3 = allDesignDocs.elementAt(k);
								if (designdoc3 instanceof DesignDocument) {
									allDesignDocDesignDocumentPercentComplete += (double) (((DesignDocument) designdoc3)
											.getPercentComplete());
								}
							}
							code.setCompletenessDiffDesDoc((int) ((((allDesignDocDesignDocumentPercentComplete - ((double) (code
									.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
				}
			}
		}
	}

	// CreateDesignEffectRuleA rule (CreateDesign Action):
	private void createDesignEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CreateDesignAction> createdesignActs = state
				.getActionStateRepository()
				.getCreateDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createdesignActs.size(); i++) {
				CreateDesignAction createdesignAct = createdesignActs
						.elementAt(i);
				if ((createdesignAct.getAllEmps().size() >= 1)
						&& (createdesignAct.getAllDesignDocs().size() >= 1)
						&& (createdesignAct.getAllProjs().size() >= 1)
						&& (createdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (createdesignAct.getAllDesignEnvironments().size() >= 0)
						&& (createdesignAct.getAllAssociatedCodeDocs().size() >= 1)) {
					Vector<Employee> emps = createdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInDesign((double) ((((double) (softwareengineer
											.getProductivityInDesignUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInDesign((double) ((((double) (softwareengineer
											.getErrorRateInDesignUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> designdocs = createdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = createdesignAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							designdocument
									.setPercentComplete((double) (((double) (designdocument
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
							designdocument
									.setPercentErroneous((double) ((((double) (designdocument
											.getNumKnownErrors())) + ((double) (designdocument
											.getNumUnknownErrors())))
											/ (((double) (designdocument
													.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInDesign = 0;
							Vector allActiveEmps = createdesignAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInDesign += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInDesign());
								}
							}
							double numEmp = (double) (createdesignAct
									.getAllEmps().size());
							double allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous = 0;
							Vector allActiveAssociatedRequirementsDocs = createdesignAct
									.getAllActiveAssociatedRequirementsDocs();
							for (int k = 0; k < allActiveAssociatedRequirementsDocs
									.size(); k++) {
								Object associatedrequirementsdoc3 = allActiveAssociatedRequirementsDocs
										.elementAt(k);
								if (associatedrequirementsdoc3 instanceof RequirementsDocument) {
									allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous += (double) (((RequirementsDocument) associatedrequirementsdoc3)
											.getPercentErroneous());
								}
							}
							double allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor = 0;
							Vector allActiveDesignEnvironments = createdesignAct
									.getAllActiveDesignEnvironments();
							for (int k = 0; k < allActiveDesignEnvironments
									.size(); k++) {
								Object designenvironment3 = allActiveDesignEnvironments
										.elementAt(k);
								if (designenvironment3 instanceof DesignEnvironment) {
									allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor += (double) (((DesignEnvironment) designenvironment3)
											.getErrorRateDecreaseFactor());
								}
							}
							designdocument
									.setNumUnknownErrors((double) (((double) (designdocument
											.getNumUnknownErrors())) + (allActiveEmpSoftwareEngineerErrorRateInDesign
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + (allActiveAssociatedRequirementsDocRequirementsDocumentPercentErroneous / 100 * 20))
											* (1 + (1 - ((double) (designdocument
													.getCompletenessDiffReqDoc())))) * (1 - allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor))));
							double allActiveEmpSoftwareEngineerProductivityInDesign = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInDesign += (double) (((SoftwareEngineer) emp3)
											.getProductivityInDesign());
								}
							}
							double allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveDesignEnvironments
									.size(); k++) {
								Object designenvironment3 = allActiveDesignEnvironments
										.elementAt(k);
								if (designenvironment3 instanceof DesignEnvironment) {
									allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor += (double) (((DesignEnvironment) designenvironment3)
											.getProductivityIncreaseFactor());
								}
							}
							designdocument
									.setSize((double) (((double) (designdocument
											.getSize())) + ((allActiveEmpSoftwareEngineerProductivityInDesign
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + ((double) (designdocument
													.getCompletenessDiffReqDoc()))) * (1 + allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor)))));
						}
					}
					Vector<Project> projs = createdesignAct.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = createdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Tool> designenvironments = createdesignAct
							.getAllActiveDesignEnvironments();
					for (int j = 0; j < designenvironments.size(); j++) {
						Tool designenvironment2 = designenvironments
								.elementAt(j);
						if (designenvironment2 instanceof DesignEnvironment) {
							DesignEnvironment designenvironment = (DesignEnvironment) designenvironment2;
						}
					}
					Vector<Artifact> associatedcodedocs = createdesignAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
							double allActiveEmpSoftwareEngineerProductivityInDesign = 0;
							Vector allActiveEmps = createdesignAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInDesign += (double) (((SoftwareEngineer) emp3)
											.getProductivityInDesign());
								}
							}
							double numEmp = (double) (createdesignAct
									.getAllEmps().size());
							double allActiveDesignDocDesignDocumentCompletenessDiffReqDoc = 0;
							Vector allActiveDesignDocs = createdesignAct
									.getAllActiveDesignDocs();
							for (int k = 0; k < allActiveDesignDocs.size(); k++) {
								Object designdoc3 = allActiveDesignDocs
										.elementAt(k);
								if (designdoc3 instanceof DesignDocument) {
									allActiveDesignDocDesignDocumentCompletenessDiffReqDoc += (double) (((DesignDocument) designdoc3)
											.getCompletenessDiffReqDoc());
								}
							}
							double allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor = 0;
							Vector allActiveDesignEnvironments = createdesignAct
									.getAllActiveDesignEnvironments();
							for (int k = 0; k < allActiveDesignEnvironments
									.size(); k++) {
								Object designenvironment3 = allActiveDesignEnvironments
										.elementAt(k);
								if (designenvironment3 instanceof DesignEnvironment) {
									allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor += (double) (((DesignEnvironment) designenvironment3)
											.getProductivityIncreaseFactor());
								}
							}
							code.setNumKnownErrors((double) (((double) (code
									.getNumKnownErrors())) + ((1 - ((double) (code
									.getCompletenessDiffDesDoc()))) * (allActiveEmpSoftwareEngineerProductivityInDesign
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + allActiveDesignDocDesignDocumentCompletenessDiffReqDoc) * (1 + allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor)))));
						}
					}
				}
			}
		}
	}

	// CreateRequirementsEffectRuleFirst rule (CreateRequirements Action):
	private void createRequirementsEffectRuleFirst(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CreateRequirementsAction> createrequirementsActs = state
				.getActionStateRepository()
				.getCreateRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createrequirementsActs.size(); i++) {
				CreateRequirementsAction createrequirementsAct = createrequirementsActs
						.elementAt(i);
				if ((createrequirementsAct.getAllEmps().size() >= 1)
						&& (createrequirementsAct.getAllReqDocs().size() >= 1)
						&& (createrequirementsAct.getAllProjs().size() >= 1)
						&& (createrequirementsAct
								.getAllRequirementsCaptureTools().size() >= 0)
						&& (createrequirementsAct.getAllAssociatedCodeDocs()
								.size() >= 1)
						&& (createrequirementsAct.getAllAssociatedDesignDocs()
								.size() >= 1)
						&& (createrequirementsAct
								.getAllAssociatedSystemTestPlans().size() >= 1)) {
					Vector<Employee> emps = createrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
						}
					}
					Vector<Artifact> reqdocs = createrequirementsAct
							.getAllActiveReqDocs();
					for (int j = 0; j < reqdocs.size(); j++) {
						Artifact reqdoc2 = reqdocs.elementAt(j);
						if (reqdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) reqdoc2;
						}
					}
					Vector<Project> projs = createrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Tool> requirementscapturetools = createrequirementsAct
							.getAllActiveRequirementsCaptureTools();
					for (int j = 0; j < requirementscapturetools.size(); j++) {
						Tool requirementscapturetool2 = requirementscapturetools
								.elementAt(j);
						if (requirementscapturetool2 instanceof RequirementsCaptureTool) {
							RequirementsCaptureTool requirementscapturetool = (RequirementsCaptureTool) requirementscapturetool2;
						}
					}
					Vector<Artifact> associatedcodedocs = createrequirementsAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
							double allReqDocRequirementsDocumentPercentComplete = 0;
							Vector allReqDocs = createrequirementsAct
									.getAllReqDocs();
							for (int k = 0; k < allReqDocs.size(); k++) {
								Object reqdoc3 = allReqDocs.elementAt(k);
								if (reqdoc3 instanceof RequirementsDocument) {
									allReqDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) reqdoc3)
											.getPercentComplete());
								}
							}
							code.setCompletenessDiffReqDoc((int) ((((allReqDocRequirementsDocumentPercentComplete - ((double) (code
									.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Artifact> associateddesigndocs = createrequirementsAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
							double allReqDocRequirementsDocumentPercentComplete = 0;
							Vector allReqDocs = createrequirementsAct
									.getAllReqDocs();
							for (int k = 0; k < allReqDocs.size(); k++) {
								Object reqdoc3 = allReqDocs.elementAt(k);
								if (reqdoc3 instanceof RequirementsDocument) {
									allReqDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) reqdoc3)
											.getPercentComplete());
								}
							}
							designdocument
									.setCompletenessDiffReqDoc((int) ((((allReqDocRequirementsDocumentPercentComplete - ((double) (designdocument
											.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
					Vector<Artifact> associatedsystemtestplans = createrequirementsAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
							double allReqDocRequirementsDocumentPercentComplete = 0;
							Vector allReqDocs = createrequirementsAct
									.getAllReqDocs();
							for (int k = 0; k < allReqDocs.size(); k++) {
								Object reqdoc3 = allReqDocs.elementAt(k);
								if (reqdoc3 instanceof RequirementsDocument) {
									allReqDocRequirementsDocumentPercentComplete += (double) (((RequirementsDocument) reqdoc3)
											.getPercentComplete());
								}
							}
							systemtestplan
									.setCompletnessDiffReqDoc((int) ((((allReqDocRequirementsDocumentPercentComplete - ((double) (systemtestplan
											.getPercentComplete()))) / 100) + .001) * 100000));
						}
					}
				}
			}
		}
	}

	// CreateRequirementsEffectRuleA rule (CreateRequirements Action):
	private void createRequirementsEffectRuleA(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CreateRequirementsAction> createrequirementsActs = state
				.getActionStateRepository()
				.getCreateRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < createrequirementsActs.size(); i++) {
				CreateRequirementsAction createrequirementsAct = createrequirementsActs
						.elementAt(i);
				if ((createrequirementsAct.getAllEmps().size() >= 1)
						&& (createrequirementsAct.getAllReqDocs().size() >= 1)
						&& (createrequirementsAct.getAllProjs().size() >= 1)
						&& (createrequirementsAct
								.getAllRequirementsCaptureTools().size() >= 0)
						&& (createrequirementsAct.getAllAssociatedCodeDocs()
								.size() >= 1)
						&& (createrequirementsAct.getAllAssociatedDesignDocs()
								.size() >= 1)
						&& (createrequirementsAct
								.getAllAssociatedSystemTestPlans().size() >= 1)) {
					Vector<Employee> emps = createrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInRequirements((double) ((((double) (softwareengineer
											.getProductivityInRequirementsUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInRequirements((double) ((((double) (softwareengineer
											.getErrorRateInRequirementsUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> reqdocs = createrequirementsAct
							.getAllActiveReqDocs();
					for (int j = 0; j < reqdocs.size(); j++) {
						Artifact reqdoc2 = reqdocs.elementAt(j);
						if (reqdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) reqdoc2;
							double allActiveProjSEProjectRequiredSizeOfCode = 0;
							Vector allActiveProjs = createrequirementsAct
									.getAllActiveProjs();
							for (int k = 0; k < allActiveProjs.size(); k++) {
								Object proj3 = allActiveProjs.elementAt(k);
								if (proj3 instanceof SEProject) {
									allActiveProjSEProjectRequiredSizeOfCode += (double) (((SEProject) proj3)
											.getRequiredSizeOfCode());
								}
							}
							requirementsdocument
									.setPercentComplete((double) (((double) (requirementsdocument
											.getSize()))
											/ allActiveProjSEProjectRequiredSizeOfCode * 100));
							requirementsdocument
									.setPercentErroneous((double) ((((double) (requirementsdocument
											.getNumKnownErrors())) + ((double) (requirementsdocument
											.getNumUnknownErrors())))
											/ (((double) (requirementsdocument
													.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInRequirements = 0;
							Vector allActiveEmps = createrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInRequirements += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInRequirements());
								}
							}
							double numEmp = (double) (createrequirementsAct
									.getAllEmps().size());
							double allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor = 0;
							Vector allActiveRequirementsCaptureTools = createrequirementsAct
									.getAllActiveRequirementsCaptureTools();
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getErrorRateDecreaseFactor());
								}
							}
							requirementsdocument
									.setNumUnknownErrors((double) (((double) (requirementsdocument
											.getNumUnknownErrors())) + ((allActiveEmpSoftwareEngineerErrorRateInRequirements
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 - allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor) * 2))));
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getProductivityIncreaseFactor());
								}
							}
							requirementsdocument
									.setSize((double) (((double) (requirementsdocument
											.getSize())) + ((allActiveEmpSoftwareEngineerProductivityInRequirements
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor) * 2))));
						}
					}
					Vector<Project> projs = createrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Tool> requirementscapturetools = createrequirementsAct
							.getAllActiveRequirementsCaptureTools();
					for (int j = 0; j < requirementscapturetools.size(); j++) {
						Tool requirementscapturetool2 = requirementscapturetools
								.elementAt(j);
						if (requirementscapturetool2 instanceof RequirementsCaptureTool) {
							RequirementsCaptureTool requirementscapturetool = (RequirementsCaptureTool) requirementscapturetool2;
						}
					}
					Vector<Artifact> associatedcodedocs = createrequirementsAct
							.getAllActiveAssociatedCodeDocs();
					for (int j = 0; j < associatedcodedocs.size(); j++) {
						Artifact associatedcodedoc2 = associatedcodedocs
								.elementAt(j);
						if (associatedcodedoc2 instanceof Code) {
							Code code = (Code) associatedcodedoc2;
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							Vector allActiveEmps = createrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double numEmp = (double) (createrequirementsAct
									.getAllEmps().size());
							double allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor = 0;
							Vector allActiveRequirementsCaptureTools = createrequirementsAct
									.getAllActiveRequirementsCaptureTools();
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getProductivityIncreaseFactor());
								}
							}
							code.setNumKnownErrors((double) (((double) (code
									.getNumKnownErrors())) + ((1 - ((double) (code
									.getCompletenessDiffReqDoc()))) * (allActiveEmpSoftwareEngineerProductivityInRequirements
									* (1 - (.01 * (numEmp * (numEmp - 1) / 2)))
									* (1 + allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor) * 2))));
						}
					}
					Vector<Artifact> associateddesigndocs = createrequirementsAct
							.getAllActiveAssociatedDesignDocs();
					for (int j = 0; j < associateddesigndocs.size(); j++) {
						Artifact associateddesigndoc2 = associateddesigndocs
								.elementAt(j);
						if (associateddesigndoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) associateddesigndoc2;
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							Vector allActiveEmps = createrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double numEmp = (double) (createrequirementsAct
									.getAllEmps().size());
							double allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor = 0;
							Vector allActiveRequirementsCaptureTools = createrequirementsAct
									.getAllActiveRequirementsCaptureTools();
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getProductivityIncreaseFactor());
								}
							}
							designdocument
									.setNumKnownErrors((double) (((double) (designdocument
											.getNumKnownErrors())) + ((1 - ((double) (designdocument
											.getCompletenessDiffReqDoc()))) * (allActiveEmpSoftwareEngineerProductivityInRequirements
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor) * 2))));
						}
					}
					Vector<Artifact> associatedsystemtestplans = createrequirementsAct
							.getAllActiveAssociatedSystemTestPlans();
					for (int j = 0; j < associatedsystemtestplans.size(); j++) {
						Artifact associatedsystemtestplan2 = associatedsystemtestplans
								.elementAt(j);
						if (associatedsystemtestplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							Vector allActiveEmps = createrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double numEmp = (double) (createrequirementsAct
									.getAllEmps().size());
							double allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor = 0;
							Vector allActiveRequirementsCaptureTools = createrequirementsAct
									.getAllActiveRequirementsCaptureTools();
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getProductivityIncreaseFactor());
								}
							}
							systemtestplan
									.setNumKnownErrors((double) (((double) (systemtestplan
											.getNumKnownErrors())) + ((1 - ((double) (systemtestplan
											.getCompletnessDiffReqDoc()))) * (allActiveEmpSoftwareEngineerProductivityInRequirements
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2)))
											* (1 + allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor) * 2))));
						}
					}
				}
			}
		}
	}

	// CorrectRequirementsEffectRuleA rule (CorrectRequirements Action):
	private void correctRequirementsEffectRuleA(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<CorrectRequirementsAction> correctrequirementsActs = state
				.getActionStateRepository()
				.getCorrectRequirementsActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < correctrequirementsActs.size(); i++) {
				CorrectRequirementsAction correctrequirementsAct = correctrequirementsActs
						.elementAt(i);
				if ((correctrequirementsAct.getAllEmps().size() >= 1)
						&& (correctrequirementsAct.getAllRequirementsDocs()
								.size() >= 1)
						&& (correctrequirementsAct.getAllProjs().size() >= 1)
						&& (correctrequirementsAct
								.getAllRequirementsCaptureTools().size() >= 0)) {
					Vector<Employee> emps = correctrequirementsAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInRequirements((double) ((((double) (softwareengineer
											.getProductivityInRequirementsUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInRequirements((double) ((((double) (softwareengineer
											.getErrorRateInRequirementsUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> requirementsdocs = correctrequirementsAct
							.getAllActiveRequirementsDocs();
					for (int j = 0; j < requirementsdocs.size(); j++) {
						Artifact requirementsdoc2 = requirementsdocs
								.elementAt(j);
						if (requirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) requirementsdoc2;
							requirementsdocument
									.setPercentErroneous((double) ((((double) (requirementsdocument
											.getNumKnownErrors())) + ((double) (requirementsdocument
											.getNumUnknownErrors())))
											/ (((double) (requirementsdocument
													.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInRequirements = 0;
							Vector allActiveEmps = correctrequirementsAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInRequirements += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInRequirements());
								}
							}
							double numEmp = (double) (correctrequirementsAct
									.getAllEmps().size());
							double allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor = 0;
							Vector allActiveRequirementsCaptureTools = correctrequirementsAct
									.getAllActiveRequirementsCaptureTools();
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getErrorRateDecreaseFactor());
								}
							}
							requirementsdocument
									.setNumUnknownErrors((double) (((double) (requirementsdocument
											.getNumUnknownErrors())) + ((.2 * allActiveEmpSoftwareEngineerErrorRateInRequirements)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 - allActiveRequirementsCaptureToolRequirementsCaptureToolErrorRateDecreaseFactor))));
							double allActiveEmpSoftwareEngineerProductivityInRequirements = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInRequirements += (double) (((SoftwareEngineer) emp3)
											.getProductivityInRequirements());
								}
							}
							double allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveRequirementsCaptureTools
									.size(); k++) {
								Object requirementscapturetool3 = allActiveRequirementsCaptureTools
										.elementAt(k);
								if (requirementscapturetool3 instanceof RequirementsCaptureTool) {
									allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor += (double) (((RequirementsCaptureTool) requirementscapturetool3)
											.getProductivityIncreaseFactor());
								}
							}
							requirementsdocument
									.setNumKnownErrors((double) (((double) (requirementsdocument
											.getNumKnownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInRequirements)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 + allActiveRequirementsCaptureToolRequirementsCaptureToolProductivityIncreaseFactor))));
						}
					}
					Vector<Project> projs = correctrequirementsAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Tool> requirementscapturetools = correctrequirementsAct
							.getAllActiveRequirementsCaptureTools();
					for (int j = 0; j < requirementscapturetools.size(); j++) {
						Tool requirementscapturetool2 = requirementscapturetools
								.elementAt(j);
						if (requirementscapturetool2 instanceof RequirementsCaptureTool) {
							RequirementsCaptureTool requirementscapturetool = (RequirementsCaptureTool) requirementscapturetool2;
						}
					}
				}
			}
		}
	}

	// CorrectDesignEffectRuleA rule (CorrectDesign Action):
	private void correctDesignEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CorrectDesignAction> correctdesignActs = state
				.getActionStateRepository()
				.getCorrectDesignActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < correctdesignActs.size(); i++) {
				CorrectDesignAction correctdesignAct = correctdesignActs
						.elementAt(i);
				if ((correctdesignAct.getAllEmps().size() >= 1)
						&& (correctdesignAct.getAllDesignDocs().size() >= 1)
						&& (correctdesignAct.getAllProjs().size() >= 1)
						&& (correctdesignAct.getAllAssociatedRequirementsDocs()
								.size() >= 1)
						&& (correctdesignAct.getAllDesignEnvironments().size() >= 0)) {
					Vector<Employee> emps = correctdesignAct.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInDesign((double) ((((double) (softwareengineer
											.getProductivityInDesignUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInDesign((double) ((((double) (softwareengineer
											.getErrorRateInDesignUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> designdocs = correctdesignAct
							.getAllActiveDesignDocs();
					for (int j = 0; j < designdocs.size(); j++) {
						Artifact designdoc2 = designdocs.elementAt(j);
						if (designdoc2 instanceof DesignDocument) {
							DesignDocument designdocument = (DesignDocument) designdoc2;
							designdocument
									.setPercentErroneous((double) ((((double) (designdocument
											.getNumKnownErrors())) + ((double) (designdocument
											.getNumUnknownErrors())))
											/ (((double) (designdocument
													.getSize())) + .1) * 100));
							double allActiveEmpSoftwareEngineerErrorRateInDesign = 0;
							Vector allActiveEmps = correctdesignAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInDesign += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInDesign());
								}
							}
							double numEmp = (double) (correctdesignAct
									.getAllEmps().size());
							double allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor = 0;
							Vector allActiveDesignEnvironments = correctdesignAct
									.getAllActiveDesignEnvironments();
							for (int k = 0; k < allActiveDesignEnvironments
									.size(); k++) {
								Object designenvironment3 = allActiveDesignEnvironments
										.elementAt(k);
								if (designenvironment3 instanceof DesignEnvironment) {
									allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor += (double) (((DesignEnvironment) designenvironment3)
											.getErrorRateDecreaseFactor());
								}
							}
							designdocument
									.setNumUnknownErrors((double) (((double) (designdocument
											.getNumUnknownErrors())) + ((.2 * allActiveEmpSoftwareEngineerErrorRateInDesign)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 - allActiveDesignEnvironmentDesignEnvironmentErrorRateDecreaseFactor))));
							double allActiveEmpSoftwareEngineerProductivityInDesign = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInDesign += (double) (((SoftwareEngineer) emp3)
											.getProductivityInDesign());
								}
							}
							double allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor = 0;
							for (int k = 0; k < allActiveDesignEnvironments
									.size(); k++) {
								Object designenvironment3 = allActiveDesignEnvironments
										.elementAt(k);
								if (designenvironment3 instanceof DesignEnvironment) {
									allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor += (double) (((DesignEnvironment) designenvironment3)
											.getProductivityIncreaseFactor());
								}
							}
							designdocument
									.setNumKnownErrors((double) (((double) (designdocument
											.getNumKnownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInDesign)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 + allActiveDesignEnvironmentDesignEnvironmentProductivityIncreaseFactor))));
						}
					}
					Vector<Project> projs = correctdesignAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctdesignAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Tool> designenvironments = correctdesignAct
							.getAllActiveDesignEnvironments();
					for (int j = 0; j < designenvironments.size(); j++) {
						Tool designenvironment2 = designenvironments
								.elementAt(j);
						if (designenvironment2 instanceof DesignEnvironment) {
							DesignEnvironment designenvironment = (DesignEnvironment) designenvironment2;
						}
					}
				}
			}
		}
	}

	// CreateCodeTrigRule rule (CreateCode Action):
	private void createCodeTrigRule(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CreateCodeAction> createcodeActs = state
				.getActionStateRepository()
				.getCreateCodeActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("CreateCodeTrigRule"))) {
			for (int i = 0; i < createcodeActs.size(); i++) {
				CreateCodeAction createcodeAct = createcodeActs.elementAt(i);
				if (createcodeAct == action) {
					if ((createcodeAct.getAllEmps().size() >= 1)
							&& (createcodeAct.getAllCodeDocs().size() >= 1)
							&& (createcodeAct.getAllProjs().size() >= 1)
							&& (createcodeAct
									.getAllAssociatedRequirementsDocs().size() >= 1)
							&& (createcodeAct.getAllAssociatedDesignDocuments()
									.size() >= 1)
							&& (createcodeAct.getAllDevelopmentEnvironments()
									.size() >= 0)
							&& (createcodeAct.getAllAssociatedSystemTestPlans()
									.size() >= 1)) {
						Vector<Employee> emps = createcodeAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
						Vector<Artifact> codedocs = createcodeAct
								.getAllActiveCodeDocs();
						for (int j = 0; j < codedocs.size(); j++) {
							Artifact codedoc2 = codedocs.elementAt(j);
							if (codedoc2 instanceof Code) {
								Code code = (Code) codedoc2;
								double numEmp = (double) (createcodeAct
										.getAllEmps().size());
								code.setNumAuthors((int) (numEmp));
							}
						}
						Vector<Project> projs = createcodeAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
							}
						}
						Vector<Artifact> associatedrequirementsdocs = createcodeAct
								.getAllActiveAssociatedRequirementsDocs();
						for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
							Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
									.elementAt(j);
							if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
								RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
							}
						}
						Vector<Artifact> associateddesigndocuments = createcodeAct
								.getAllActiveAssociatedDesignDocuments();
						for (int j = 0; j < associateddesigndocuments.size(); j++) {
							Artifact associateddesigndocument2 = associateddesigndocuments
									.elementAt(j);
							if (associateddesigndocument2 instanceof DesignDocument) {
								DesignDocument designdocument = (DesignDocument) associateddesigndocument2;
							}
						}
						Vector<Tool> developmentenvironments = createcodeAct
								.getAllActiveDevelopmentEnvironments();
						for (int j = 0; j < developmentenvironments.size(); j++) {
							Tool developmentenvironment2 = developmentenvironments
									.elementAt(j);
							if (developmentenvironment2 instanceof IDE) {
								IDE ide = (IDE) developmentenvironment2;
							}
						}
						Vector<Artifact> associatedsystemtestplans = createcodeAct
								.getAllActiveAssociatedSystemTestPlans();
						for (int j = 0; j < associatedsystemtestplans.size(); j++) {
							Artifact associatedsystemtestplan2 = associatedsystemtestplans
									.elementAt(j);
							if (associatedsystemtestplan2 instanceof SystemTestPlan) {
								SystemTestPlan systemtestplan = (SystemTestPlan) associatedsystemtestplan2;
							}
						}
					}
				}
			}
		}
	}

	// CorrectTestPlanEffectRuleA rule (CorrectSystemTestPlan Action):
	private void correctTestPlanEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<CorrectSystemTestPlanAction> correctsystemtestplanActs = state
				.getActionStateRepository()
				.getCorrectSystemTestPlanActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ALL_CONTINUOUS)) {
			for (int i = 0; i < correctsystemtestplanActs.size(); i++) {
				CorrectSystemTestPlanAction correctsystemtestplanAct = correctsystemtestplanActs
						.elementAt(i);
				if ((correctsystemtestplanAct.getAllEmps().size() >= 1)
						&& (correctsystemtestplanAct.getAllTestPlans().size() >= 1)
						&& (correctsystemtestplanAct
								.getAllAssociatedRequirementsDocs().size() >= 1)
						&& (correctsystemtestplanAct.getAllProjs().size() >= 1)
						&& (correctsystemtestplanAct.getAllTestingTools()
								.size() >= 0)) {
					Vector<Employee> emps = correctsystemtestplanAct
							.getAllActiveEmps();
					for (int j = 0; j < emps.size(); j++) {
						Employee emp2 = emps.elementAt(j);
						if (emp2 instanceof SoftwareEngineer) {
							SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							softwareengineer
									.setEnergy((double) (((double) (softwareengineer
											.getEnergy())) - .0025));
							softwareengineer
									.setMood((double) (((double) (softwareengineer
											.getMood())) - .00125));
							double numActiveActionsThisPartA = (double) (state
									.getActionStateRepository()
									.getAllActiveActions(emp2).size());
							softwareengineer
									.setProductivityInTesting((double) ((((double) (softwareengineer
											.getProductivityInTestingUnadjusted())) * ((double) (softwareengineer
											.getEnergy()))) / (numActiveActionsThisPartA - 1)));
							softwareengineer
									.setErrorRateInTesting((double) ((((double) (softwareengineer
											.getErrorRateInTestingUnadjusted())) * (1 + 1 - ((double) (softwareengineer
											.getEnergy())))) / (numActiveActionsThisPartA - 1)));
						}
					}
					Vector<Artifact> testplans = correctsystemtestplanAct
							.getAllActiveTestPlans();
					for (int j = 0; j < testplans.size(); j++) {
						Artifact testplan2 = testplans.elementAt(j);
						if (testplan2 instanceof SystemTestPlan) {
							SystemTestPlan systemtestplan = (SystemTestPlan) testplan2;
							double allActiveEmpSoftwareEngineerProductivityInTesting = 0;
							Vector allActiveEmps = correctsystemtestplanAct
									.getAllActiveEmps();
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerProductivityInTesting += (double) (((SoftwareEngineer) emp3)
											.getProductivityInTesting());
								}
							}
							double numEmp = (double) (correctsystemtestplanAct
									.getAllEmps().size());
							double allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor = 0;
							Vector allActiveTestingTools = correctsystemtestplanAct
									.getAllActiveTestingTools();
							for (int k = 0; k < allActiveTestingTools.size(); k++) {
								Object testingtool3 = allActiveTestingTools
										.elementAt(k);
								if (testingtool3 instanceof AutomatedTestingTool) {
									allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor += (double) (((AutomatedTestingTool) testingtool3)
											.getProductivityIncreaseFactor());
								}
							}
							systemtestplan
									.setNumKnownErrors((double) (((double) (systemtestplan
											.getNumKnownErrors())) - ((.5 * allActiveEmpSoftwareEngineerProductivityInTesting)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 + allActiveTestingToolAutomatedTestingToolProductivityIncreaseFactor))));
							double allActiveEmpSoftwareEngineerErrorRateInTesting = 0;
							for (int k = 0; k < allActiveEmps.size(); k++) {
								Object emp3 = allActiveEmps.elementAt(k);
								if (emp3 instanceof SoftwareEngineer) {
									allActiveEmpSoftwareEngineerErrorRateInTesting += (double) (((SoftwareEngineer) emp3)
											.getErrorRateInTesting());
								}
							}
							double allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor = 0;
							for (int k = 0; k < allActiveTestingTools.size(); k++) {
								Object testingtool3 = allActiveTestingTools
										.elementAt(k);
								if (testingtool3 instanceof AutomatedTestingTool) {
									allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor += (double) (((AutomatedTestingTool) testingtool3)
											.getErrorRateDecreaseFactor());
								}
							}
							systemtestplan
									.setNumUnknownErrors((double) (((double) (systemtestplan
											.getNumUnknownErrors())) + ((.2 * allActiveEmpSoftwareEngineerErrorRateInTesting)
											* (1 - (.01 * (numEmp
													* (numEmp - 1) / 2))) * (1 - allActiveTestingToolAutomatedTestingToolErrorRateDecreaseFactor))));
							systemtestplan
									.setPercentErroneous((double) ((((double) (systemtestplan
											.getNumKnownErrors())) + ((double) (systemtestplan
											.getNumUnknownErrors())))
											/ (((double) (systemtestplan
													.getSize())) + .1) * 100));
						}
					}
					Vector<Artifact> associatedrequirementsdocs = correctsystemtestplanAct
							.getAllActiveAssociatedRequirementsDocs();
					for (int j = 0; j < associatedrequirementsdocs.size(); j++) {
						Artifact associatedrequirementsdoc2 = associatedrequirementsdocs
								.elementAt(j);
						if (associatedrequirementsdoc2 instanceof RequirementsDocument) {
							RequirementsDocument requirementsdocument = (RequirementsDocument) associatedrequirementsdoc2;
						}
					}
					Vector<Project> projs = correctsystemtestplanAct
							.getAllActiveProjs();
					for (int j = 0; j < projs.size(); j++) {
						Project proj2 = projs.elementAt(j);
						if (proj2 instanceof SEProject) {
							SEProject seproject = (SEProject) proj2;
						}
					}
					Vector<Tool> testingtools = correctsystemtestplanAct
							.getAllActiveTestingTools();
					for (int j = 0; j < testingtools.size(); j++) {
						Tool testingtool2 = testingtools.elementAt(j);
						if (testingtool2 instanceof AutomatedTestingTool) {
							AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) testingtool2;
						}
					}
				}
			}
		}
	}

	// CalculateScore rule (DeliverProduct Action):
	private void calculateScore(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<DeliverProductAction> deliverproductActs = state
				.getActionStateRepository()
				.getDeliverProductActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("CalculateScore"))) {
			for (int i = 0; i < deliverproductActs.size(); i++) {
				DeliverProductAction deliverproductAct = deliverproductActs
						.elementAt(i);
				if (deliverproductAct == action) {
					if ((deliverproductAct.getAllEmps().size() >= 1)
							&& (deliverproductAct.getAllProjs().size() >= 1)
							&& (deliverproductAct.getAllCodeDocs().size() >= 1)
							&& (deliverproductAct.getAllCusts().size() >= 1)) {
						Vector<Employee> emps = deliverproductAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
						Vector<Project> projs = deliverproductAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								double allActiveCodeDocCodeNumUnknownErrors = 0;
								Vector allActiveCodeDocs = deliverproductAct
										.getAllActiveCodeDocs();
								for (int k = 0; k < allActiveCodeDocs.size(); k++) {
									Object codedoc3 = allActiveCodeDocs
											.elementAt(k);
									if (codedoc3 instanceof Code) {
										allActiveCodeDocCodeNumUnknownErrors += (double) (((Code) codedoc3)
												.getNumUnknownErrors());
									}
								}
								double allActiveCodeDocCodeNumKnownErrors = 0;
								for (int k = 0; k < allActiveCodeDocs.size(); k++) {
									Object codedoc3 = allActiveCodeDocs
											.elementAt(k);
									if (codedoc3 instanceof Code) {
										allActiveCodeDocCodeNumKnownErrors += (double) (((Code) codedoc3)
												.getNumKnownErrors());
									}
								}
								double allActiveCodeDocCodeSize = 0;
								for (int k = 0; k < allActiveCodeDocs.size(); k++) {
									Object codedoc3 = allActiveCodeDocs
											.elementAt(k);
									if (codedoc3 instanceof Code) {
										allActiveCodeDocCodeSize += (double) (((Code) codedoc3)
												.getSize());
									}
								}
								seproject
										.setCodeCorrectnessScore((double) (1 - ((allActiveCodeDocCodeNumUnknownErrors + allActiveCodeDocCodeNumKnownErrors) / (allActiveCodeDocCodeSize + .1))));
								double allActiveCodeDocCodePercentComplete = 0;
								for (int k = 0; k < allActiveCodeDocs.size(); k++) {
									Object codedoc3 = allActiveCodeDocs
											.elementAt(k);
									if (codedoc3 instanceof Code) {
										allActiveCodeDocCodePercentComplete += (double) (((Code) codedoc3)
												.getPercentComplete());
									}
								}
								seproject
										.setCodeCompletenessScore((double) (allActiveCodeDocCodePercentComplete / 100));
								seproject
										.setBudgetScore((double) (1 + ((((double) (seproject
												.getBudget())) - ((double) (seproject
												.getMoneySpent()))) / ((double) (seproject
												.getBudget())))));
								seproject
										.setScheduleScore((double) (1 + ((((double) (seproject
												.getAllottedTime())) - ((double) (seproject
												.getTimeUsed()))) / ((double) (seproject
												.getAllottedTime())))));
								double allActiveCodeDocCodePercentIntegrated = 0;
								for (int k = 0; k < allActiveCodeDocs.size(); k++) {
									Object codedoc3 = allActiveCodeDocs
											.elementAt(k);
									if (codedoc3 instanceof Code) {
										allActiveCodeDocCodePercentIntegrated += (double) (((Code) codedoc3)
												.getPercentIntegrated());
									}
								}
								seproject
										.setScore((int) (100 * (.3
												+ ((((double) (seproject
														.getCodeCompletenessScore()))
														* ((double) (seproject
																.getCodeCorrectnessScore())) * (allActiveCodeDocCodePercentIntegrated / 100)) * .7)
												- (.3 * (1 - ((double) (seproject
														.getBudgetScore())))) - (.3 * (1 - ((double) (seproject
												.getScheduleScore())))))));
							}
						}
						Vector<Artifact> codedocs = deliverproductAct
								.getAllActiveCodeDocs();
						for (int j = 0; j < codedocs.size(); j++) {
							Artifact codedoc2 = codedocs.elementAt(j);
							if (codedoc2 instanceof Code) {
								Code code = (Code) codedoc2;
							}
						}
						Vector<Customer> custs = deliverproductAct
								.getAllActiveCusts();
						for (int j = 0; j < custs.size(); j++) {
							Customer cust2 = custs.elementAt(j);
							if (cust2 instanceof ACustomer) {
								ACustomer acustomer = (ACustomer) cust2;
							}
						}
					}
				}
			}
		}
	}

	// BreakDestRule rule (Break Action):
	private void breakDestRule(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<BreakAction> breakActs = state.getActionStateRepository()
				.getBreakActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("BreakDestRule"))) {
			for (int i = 0; i < breakActs.size(); i++) {
				BreakAction breakAct = breakActs.elementAt(i);
				if (breakAct == action) {
					if ((breakAct.getAllBreakers().size() >= 1)) {
						Vector<Employee> breakers = breakAct
								.getAllActiveBreakers();
						for (int j = 0; j < breakers.size(); j++) {
							Employee breaker2 = breakers.elementAt(j);
							if (breaker2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) breaker2;
								Vector<CreateRequirementsAction> createrequirementsactionsActivate = state
										.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < createrequirementsactionsActivate
										.size(); k++) {
									CreateRequirementsAction tempAct = createrequirementsactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<ReviewRequirementsAction> reviewrequirementsactionsActivate = state
										.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < reviewrequirementsactionsActivate
										.size(); k++) {
									ReviewRequirementsAction tempAct = reviewrequirementsactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CorrectRequirementsAction> correctrequirementsactionsActivate = state
										.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < correctrequirementsactionsActivate
										.size(); k++) {
									CorrectRequirementsAction tempAct = correctrequirementsactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CreateDesignAction> createdesignactionsActivate = state
										.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < createdesignactionsActivate
										.size(); k++) {
									CreateDesignAction tempAct = createdesignactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<ReviewDesignAction> reviewdesignactionsActivate = state
										.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < reviewdesignactionsActivate
										.size(); k++) {
									ReviewDesignAction tempAct = reviewdesignactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CorrectDesignAction> correctdesignactionsActivate = state
										.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < correctdesignactionsActivate
										.size(); k++) {
									CorrectDesignAction tempAct = correctdesignactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CreateCodeAction> createcodeactionsActivate = state
										.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < createcodeactionsActivate
										.size(); k++) {
									CreateCodeAction tempAct = createcodeactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<InspectCodeAction> inspectcodeactionsActivate = state
										.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < inspectcodeactionsActivate
										.size(); k++) {
									InspectCodeAction tempAct = inspectcodeactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CorrectCodeAction> correctcodeactionsActivate = state
										.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < correctcodeactionsActivate
										.size(); k++) {
									CorrectCodeAction tempAct = correctcodeactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<IntegrateCodeAction> integratecodeactionsActivate = state
										.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < integratecodeactionsActivate
										.size(); k++) {
									IntegrateCodeAction tempAct = integratecodeactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<SystemTestAction> systemtestactionsActivate = state
										.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < systemtestactionsActivate
										.size(); k++) {
									SystemTestAction tempAct = systemtestactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CreateSystemTestPlanAction> createsystemtestplanactionsActivate = state
										.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < createsystemtestplanactionsActivate
										.size(); k++) {
									CreateSystemTestPlanAction tempAct = createsystemtestplanactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<ReviewSystemTestPlanAction> reviewsystemtestplanactionsActivate = state
										.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < reviewsystemtestplanactionsActivate
										.size(); k++) {
									ReviewSystemTestPlanAction tempAct = reviewsystemtestplanactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<CorrectSystemTestPlanAction> correctsystemtestplanactionsActivate = state
										.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < correctsystemtestplanactionsActivate
										.size(); k++) {
									CorrectSystemTestPlanAction tempAct = correctsystemtestplanactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<DeliverProductAction> deliverproductactionsActivate = state
										.getActionStateRepository()
										.getDeliverProductActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < deliverproductactionsActivate
										.size(); k++) {
									DeliverProductAction tempAct = deliverproductactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<GetSickAction> getsickactionsActivate = state
										.getActionStateRepository()
										.getGetSickActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < getsickactionsActivate
										.size(); k++) {
									GetSickAction tempAct = getsickactionsActivate
											.elementAt(k);
									tempAct.setSickPersonActive(softwareengineer);
								}
								Vector<QuitAction> quitactionsActivate = state
										.getActionStateRepository()
										.getQuitActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < quitactionsActivate.size(); k++) {
									QuitAction tempAct = quitactionsActivate
											.elementAt(k);
									tempAct.setQuitterActive(softwareengineer);
								}
								Vector<IntroduceNewRequirementsAction> introducenewrequirementsactionsActivate = state
										.getActionStateRepository()
										.getIntroduceNewRequirementsActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < introducenewrequirementsactionsActivate
										.size(); k++) {
									IntroduceNewRequirementsAction tempAct = introducenewrequirementsactionsActivate
											.elementAt(k);
									tempAct.setEmpWOverheadTextActive(softwareengineer);
								}
								Vector<UpdateProjectAttributesAction> updateprojectattributesactionsActivate = state
										.getActionStateRepository()
										.getUpdateProjectAttributesActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < updateprojectattributesactionsActivate
										.size(); k++) {
									UpdateProjectAttributesAction tempAct = updateprojectattributesactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<ChangePayRateAction> changepayrateactionsActivate = state
										.getActionStateRepository()
										.getChangePayRateActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < changepayrateactionsActivate
										.size(); k++) {
									ChangePayRateAction tempAct = changepayrateactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<GiveBonusAction> givebonusactionsActivate = state
										.getActionStateRepository()
										.getGiveBonusActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < givebonusactionsActivate
										.size(); k++) {
									GiveBonusAction tempAct = givebonusactionsActivate
											.elementAt(k);
									tempAct.setEmpActive(softwareengineer);
								}
								Vector<FireAction> fireactionsActivate = state
										.getActionStateRepository()
										.getFireActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < fireactionsActivate.size(); k++) {
									FireAction tempAct = fireactionsActivate
											.elementAt(k);
									tempAct.setFiredPersonActive(softwareengineer);
								}
								Vector<PurchaseToolAction> purchasetoolactionsActivate = state
										.getActionStateRepository()
										.getPurchaseToolActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < purchasetoolactionsActivate
										.size(); k++) {
									PurchaseToolAction tempAct = purchasetoolactionsActivate
											.elementAt(k);
									tempAct.setEmpWhoseMenuClickedOnActive(softwareengineer);
								}
								softwareengineer.setOnBreak(false);
							}
						}
					}
				}
			}
		}
	}

	// GetSickDestRule rule (GetSick Action):
	private void getSickDestRule(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<GetSickAction> getsickActs = state.getActionStateRepository()
				.getGetSickActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("GetSickDestRule"))) {
			for (int i = 0; i < getsickActs.size(); i++) {
				GetSickAction getsickAct = getsickActs.elementAt(i);
				if (getsickAct == action) {
					if ((getsickAct.getAllSickPersons().size() >= 1)) {
						Vector<Employee> sickpersons = getsickAct
								.getAllActiveSickPersons();
						for (int j = 0; j < sickpersons.size(); j++) {
							Employee sickperson2 = sickpersons.elementAt(j);
							if (sickperson2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) sickperson2;
								Vector<simse.adts.actions.Action> otherActs = state
										.getActionStateRepository()
										.getAllInactiveActions(softwareengineer);
								for (int k = 0; k < otherActs.size(); k++) {
									simse.adts.actions.Action tempAct = otherActs
											.elementAt(k);
									if (tempAct instanceof CreateRequirementsAction) {
										((CreateRequirementsAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof ReviewRequirementsAction) {
										((ReviewRequirementsAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CorrectRequirementsAction) {
										((CorrectRequirementsAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CreateDesignAction) {
										((CreateDesignAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof ReviewDesignAction) {
										((ReviewDesignAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CorrectDesignAction) {
										((CorrectDesignAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CreateCodeAction) {
										((CreateCodeAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof InspectCodeAction) {
										((InspectCodeAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CorrectCodeAction) {
										((CorrectCodeAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof IntegrateCodeAction) {
										((IntegrateCodeAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof SystemTestAction) {
										((SystemTestAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CreateSystemTestPlanAction) {
										((CreateSystemTestPlanAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof ReviewSystemTestPlanAction) {
										((ReviewSystemTestPlanAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof CorrectSystemTestPlanAction) {
										((CorrectSystemTestPlanAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof DeliverProductAction) {
										((DeliverProductAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof BreakAction) {
										((BreakAction) tempAct)
												.setBreakerActive(softwareengineer);
									} else if (tempAct instanceof GetSickAction) {
										if (tempAct.equals(getsickAct) == false) {
											((GetSickAction) tempAct)
													.setSickPersonActive(softwareengineer);
										}
									} else if (tempAct instanceof QuitAction) {
										((QuitAction) tempAct)
												.setQuitterActive(softwareengineer);
									} else if (tempAct instanceof IntroduceNewRequirementsAction) {
										((IntroduceNewRequirementsAction) tempAct)
												.setEmpWOverheadTextActive(softwareengineer);
									} else if (tempAct instanceof UpdateProjectAttributesAction) {
										((UpdateProjectAttributesAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof ChangePayRateAction) {
										((ChangePayRateAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof GiveBonusAction) {
										((GiveBonusAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof FireAction) {
										((FireAction) tempAct)
												.setFiredPersonActive(softwareengineer);
									} else if (tempAct instanceof PurchaseToolAction) {
										((PurchaseToolAction) tempAct)
												.setEmpWhoseMenuClickedOnActive(softwareengineer);
									} else if (tempAct instanceof SuggestedRequirementsPhaseDurationAction) {
										((SuggestedRequirementsPhaseDurationAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof SuggestedDesignPhaseDurationAction) {
										((SuggestedDesignPhaseDurationAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof SuggestedImplIntegrationPhaseDurationAction) {
										((SuggestedImplIntegrationPhaseDurationAction) tempAct)
												.setEmpActive(softwareengineer);
									} else if (tempAct instanceof SuggestedTestingPhaseDurationAction) {
										((SuggestedTestingPhaseDurationAction) tempAct)
												.setEmpActive(softwareengineer);
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// PurchaseToolEffectRuleA rule (PurchaseTool Action):
	private void purchaseToolEffectRuleA(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<PurchaseToolAction> purchasetoolActs = state
				.getActionStateRepository()
				.getPurchaseToolActionStateRepository().getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("PurchaseToolEffectRuleA"))) {
			for (int i = 0; i < purchasetoolActs.size(); i++) {
				PurchaseToolAction purchasetoolAct = purchasetoolActs
						.elementAt(i);
				if (purchasetoolAct == action) {
					if ((purchasetoolAct.getAllEmpWhoseMenuClickedOns().size() >= 1)
							&& (purchasetoolAct.getAllSETools().size() >= 1)
							&& (purchasetoolAct.getAllProjs().size() >= 1)) {
						Vector<Employee> empwhosemenuclickedons = purchasetoolAct
								.getAllActiveEmpWhoseMenuClickedOns();
						for (int j = 0; j < empwhosemenuclickedons.size(); j++) {
							Employee empwhosemenuclickedon2 = empwhosemenuclickedons
									.elementAt(j);
							if (empwhosemenuclickedon2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) empwhosemenuclickedon2;
							}
						}
						Vector<Tool> setools = purchasetoolAct
								.getAllActiveSETools();
						for (int j = 0; j < setools.size(); j++) {
							Tool setool2 = setools.elementAt(j);
							if (setool2 instanceof IDE) {
								IDE ide = (IDE) setool2;
								ide.setPurchased(true);
							} else if (setool2 instanceof RequirementsCaptureTool) {
								RequirementsCaptureTool requirementscapturetool = (RequirementsCaptureTool) setool2;
								requirementscapturetool.setPurchased(true);
							} else if (setool2 instanceof AutomatedTestingTool) {
								AutomatedTestingTool automatedtestingtool = (AutomatedTestingTool) setool2;
								automatedtestingtool.setPurchased(true);
							} else if (setool2 instanceof DesignEnvironment) {
								DesignEnvironment designenvironment = (DesignEnvironment) setool2;
								designenvironment.setPurchased(true);
							}
						}
						Vector<Project> projs = purchasetoolAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								double allActiveSEToolIDECost = 0;
								Vector allActiveSETools = purchasetoolAct
										.getAllActiveSETools();
								for (int k = 0; k < allActiveSETools.size(); k++) {
									Object setool3 = allActiveSETools
											.elementAt(k);
									if (setool3 instanceof IDE) {
										allActiveSEToolIDECost += (double) (((IDE) setool3)
												.getCost());
									}
								}
								double allActiveSEToolRequirementsCaptureToolCost = 0;
								for (int k = 0; k < allActiveSETools.size(); k++) {
									Object setool3 = allActiveSETools
											.elementAt(k);
									if (setool3 instanceof RequirementsCaptureTool) {
										allActiveSEToolRequirementsCaptureToolCost += (double) (((RequirementsCaptureTool) setool3)
												.getCost());
									}
								}
								double allActiveSEToolAutomatedTestingToolCost = 0;
								for (int k = 0; k < allActiveSETools.size(); k++) {
									Object setool3 = allActiveSETools
											.elementAt(k);
									if (setool3 instanceof AutomatedTestingTool) {
										allActiveSEToolAutomatedTestingToolCost += (double) (((AutomatedTestingTool) setool3)
												.getCost());
									}
								}
								double allActiveSEToolDesignEnvironmentCost = 0;
								for (int k = 0; k < allActiveSETools.size(); k++) {
									Object setool3 = allActiveSETools
											.elementAt(k);
									if (setool3 instanceof DesignEnvironment) {
										allActiveSEToolDesignEnvironmentCost += (double) (((DesignEnvironment) setool3)
												.getCost());
									}
								}
								seproject
										.setMoneySpent((double) (((double) (seproject
												.getMoneySpent()))
												+ allActiveSEToolIDECost
												+ allActiveSEToolRequirementsCaptureToolCost
												+ allActiveSEToolAutomatedTestingToolCost + allActiveSEToolDesignEnvironmentCost));
							}
						}
					}
				}
			}
		}
	}

	// DeactivateEmpsSuggReq rule (SuggestedRequirementsPhaseDuration Action):
	private void deactivateEmpsSuggReq(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedRequirementsPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("DeactivateEmpsSuggReq"))) {
			for (int i = 0; i < suggestedrequirementsphasedurationActs.size(); i++) {
				SuggestedRequirementsPhaseDurationAction suggestedrequirementsphasedurationAct = suggestedrequirementsphasedurationActs
						.elementAt(i);
				if (suggestedrequirementsphasedurationAct == action) {
					if ((suggestedrequirementsphasedurationAct.getAllProjs()
							.size() >= 1)
							&& (suggestedrequirementsphasedurationAct
									.getAllEmps().size() >= 1)) {
						Vector<Project> projs = suggestedrequirementsphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
							}
						}
						Vector<Employee> emps = suggestedrequirementsphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
								Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationactionsDeactivate = state
										.getActionStateRepository()
										.getSuggestedRequirementsPhaseDurationActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < suggestedrequirementsphasedurationactionsDeactivate
										.size(); k++) {
									SuggestedRequirementsPhaseDurationAction tempAct = suggestedrequirementsphasedurationactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
							}
						}
					}
				}
			}
		}
	}

	// SetSuggestedRequirementsDone rule (SuggestedRequirementsPhaseDuration
	// Action):
	private void setSuggestedRequirementsDone(JFrame gui,
			int updateInstructions, String ruleName,
			simse.adts.actions.Action action) {
		Vector<SuggestedRequirementsPhaseDurationAction> suggestedrequirementsphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedRequirementsPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("SetSuggestedRequirementsDone"))) {
			for (int i = 0; i < suggestedrequirementsphasedurationActs.size(); i++) {
				SuggestedRequirementsPhaseDurationAction suggestedrequirementsphasedurationAct = suggestedrequirementsphasedurationActs
						.elementAt(i);
				if (suggestedrequirementsphasedurationAct == action) {
					if ((suggestedrequirementsphasedurationAct.getAllProjs()
							.size() >= 1)
							&& (suggestedrequirementsphasedurationAct
									.getAllEmps().size() >= 1)) {
						Vector<Project> projs = suggestedrequirementsphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								seproject.setSuggestedRequirementsDone(true);
							}
						}
						Vector<Employee> emps = suggestedrequirementsphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
					}
				}
			}
		}
	}

	// DeactivateEmpsSuggDes rule (SuggestedDesignPhaseDuration Action):
	private void deactivateEmpsSuggDes(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedDesignPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("DeactivateEmpsSuggDes"))) {
			for (int i = 0; i < suggesteddesignphasedurationActs.size(); i++) {
				SuggestedDesignPhaseDurationAction suggesteddesignphasedurationAct = suggesteddesignphasedurationActs
						.elementAt(i);
				if (suggesteddesignphasedurationAct == action) {
					if ((suggesteddesignphasedurationAct.getAllProjs().size() >= 1)
							&& (suggesteddesignphasedurationAct.getAllEmps()
									.size() >= 1)) {
						Vector<Project> projs = suggesteddesignphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
							}
						}
						Vector<Employee> emps = suggesteddesignphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
								Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationactionsDeactivate = state
										.getActionStateRepository()
										.getSuggestedDesignPhaseDurationActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < suggesteddesignphasedurationactionsDeactivate
										.size(); k++) {
									SuggestedDesignPhaseDurationAction tempAct = suggesteddesignphasedurationactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
							}
						}
					}
				}
			}
		}
	}

	// SetSuggestedDesignDone rule (SuggestedDesignPhaseDuration Action):
	private void setSuggestedDesignDone(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedDesignPhaseDurationAction> suggesteddesignphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedDesignPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("SetSuggestedDesignDone"))) {
			for (int i = 0; i < suggesteddesignphasedurationActs.size(); i++) {
				SuggestedDesignPhaseDurationAction suggesteddesignphasedurationAct = suggesteddesignphasedurationActs
						.elementAt(i);
				if (suggesteddesignphasedurationAct == action) {
					if ((suggesteddesignphasedurationAct.getAllProjs().size() >= 1)
							&& (suggesteddesignphasedurationAct.getAllEmps()
									.size() >= 1)) {
						Vector<Project> projs = suggesteddesignphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								seproject.setSuggestedDesignDone(true);
							}
						}
						Vector<Employee> emps = suggesteddesignphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
					}
				}
			}
		}
	}

	// DeactivateEmpsSuggImp rule (SuggestedImplIntegrationPhaseDuration
	// Action):
	private void deactivateEmpsSuggImp(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("DeactivateEmpsSuggImp"))) {
			for (int i = 0; i < suggestedimplintegrationphasedurationActs
					.size(); i++) {
				SuggestedImplIntegrationPhaseDurationAction suggestedimplintegrationphasedurationAct = suggestedimplintegrationphasedurationActs
						.elementAt(i);
				if (suggestedimplintegrationphasedurationAct == action) {
					if ((suggestedimplintegrationphasedurationAct.getAllProjs()
							.size() >= 1)
							&& (suggestedimplintegrationphasedurationAct
									.getAllEmps().size() >= 1)) {
						Vector<Project> projs = suggestedimplintegrationphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
							}
						}
						Vector<Employee> emps = suggestedimplintegrationphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
								Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationactionsDeactivate = state
										.getActionStateRepository()
										.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < suggestedimplintegrationphasedurationactionsDeactivate
										.size(); k++) {
									SuggestedImplIntegrationPhaseDurationAction tempAct = suggestedimplintegrationphasedurationactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
							}
						}
					}
				}
			}
		}
	}

	// SetSuggestedImplDone rule (SuggestedImplIntegrationPhaseDuration Action):
	private void setSuggestedImplDone(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedImplIntegrationPhaseDurationAction> suggestedimplintegrationphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("SetSuggestedImplDone"))) {
			for (int i = 0; i < suggestedimplintegrationphasedurationActs
					.size(); i++) {
				SuggestedImplIntegrationPhaseDurationAction suggestedimplintegrationphasedurationAct = suggestedimplintegrationphasedurationActs
						.elementAt(i);
				if (suggestedimplintegrationphasedurationAct == action) {
					if ((suggestedimplintegrationphasedurationAct.getAllProjs()
							.size() >= 1)
							&& (suggestedimplintegrationphasedurationAct
									.getAllEmps().size() >= 1)) {
						Vector<Project> projs = suggestedimplintegrationphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								seproject
										.setSuggestedImplementationIntegrationDone(true);
							}
						}
						Vector<Employee> emps = suggestedimplintegrationphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
					}
				}
			}
		}
	}

	// DeactivateEmpsSuggTest rule (SuggestedTestingPhaseDuration Action):
	private void deactivateEmpsSuggTest(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedTestingPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("DeactivateEmpsSuggTest"))) {
			for (int i = 0; i < suggestedtestingphasedurationActs.size(); i++) {
				SuggestedTestingPhaseDurationAction suggestedtestingphasedurationAct = suggestedtestingphasedurationActs
						.elementAt(i);
				if (suggestedtestingphasedurationAct == action) {
					if ((suggestedtestingphasedurationAct.getAllProjs().size() >= 1)
							&& (suggestedtestingphasedurationAct.getAllEmps()
									.size() >= 1)) {
						Vector<Project> projs = suggestedtestingphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
							}
						}
						Vector<Employee> emps = suggestedtestingphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
								Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationactionsDeactivate = state
										.getActionStateRepository()
										.getSuggestedTestingPhaseDurationActionStateRepository()
										.getAllActiveActions(softwareengineer);
								for (int k = 0; k < suggestedtestingphasedurationactionsDeactivate
										.size(); k++) {
									SuggestedTestingPhaseDurationAction tempAct = suggestedtestingphasedurationactionsDeactivate
											.elementAt(k);
									tempAct.setEmpInactive(softwareengineer);
								}
							}
						}
					}
				}
			}
		}
	}

	// SetSuggestedTestingDone rule (SuggestedTestingPhaseDuration Action):
	private void setSuggestedTestingDone(JFrame gui, int updateInstructions,
			String ruleName, simse.adts.actions.Action action) {
		Vector<SuggestedTestingPhaseDurationAction> suggestedtestingphasedurationActs = state
				.getActionStateRepository()
				.getSuggestedTestingPhaseDurationActionStateRepository()
				.getAllActions();
		if ((updateInstructions == UPDATE_ONE)
				&& (ruleName.equals("SetSuggestedTestingDone"))) {
			for (int i = 0; i < suggestedtestingphasedurationActs.size(); i++) {
				SuggestedTestingPhaseDurationAction suggestedtestingphasedurationAct = suggestedtestingphasedurationActs
						.elementAt(i);
				if (suggestedtestingphasedurationAct == action) {
					if ((suggestedtestingphasedurationAct.getAllProjs().size() >= 1)
							&& (suggestedtestingphasedurationAct.getAllEmps()
									.size() >= 1)) {
						Vector<Project> projs = suggestedtestingphasedurationAct
								.getAllActiveProjs();
						for (int j = 0; j < projs.size(); j++) {
							Project proj2 = projs.elementAt(j);
							if (proj2 instanceof SEProject) {
								SEProject seproject = (SEProject) proj2;
								seproject.setSuggestedTestDone(true);
							}
						}
						Vector<Employee> emps = suggestedtestingphasedurationAct
								.getAllActiveEmps();
						for (int j = 0; j < emps.size(); j++) {
							Employee emp2 = emps.elementAt(j);
							if (emp2 instanceof SoftwareEngineer) {
								SoftwareEngineer softwareengineer = (SoftwareEngineer) emp2;
							}
						}
					}
				}
			}
		}
	}

	private void checkAllMins(JFrame parent) {
		Vector<simse.adts.actions.Action> actions = state
				.getActionStateRepository().getAllActions();
		for (int i = 0; i < actions.size(); i++) {
			simse.adts.actions.Action act = actions.elementAt(i);
			if (act instanceof CreateRequirementsAction) {
				CreateRequirementsAction b = (CreateRequirementsAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllReqDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllRequirementsCaptureTools().size() < -999999)
						|| (b.getAllAssociatedCodeDocs().size() < 1)
						|| (b.getAllAssociatedDesignDocs().size() < 1)
						|| (b.getAllAssociatedSystemTestPlans().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped creating the requirements document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped creating the requirements document");
						}
					}
					state.getActionStateRepository()
							.getCreateRequirementsActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof ReviewRequirementsAction) {
				ReviewRequirementsAction b = (ReviewRequirementsAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllRequirementsDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I'm done reviewing the requirements document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I'm done reviewing the requirements document");
						}
					}
					state.getActionStateRepository()
							.getReviewRequirementsActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof CorrectRequirementsAction) {
				CorrectRequirementsAction b = (CorrectRequirementsAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllRequirementsDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllRequirementsCaptureTools().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped correcting the requirements document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped correcting the requirements document");
						}
					}
					state.getActionStateRepository()
							.getCorrectRequirementsActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof CreateDesignAction) {
				CreateDesignAction b = (CreateDesignAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllDesignDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllDesignEnvironments().size() < -999999)
						|| (b.getAllAssociatedCodeDocs().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped creating the design document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped creating the design document");
						}
					}
					state.getActionStateRepository()
							.getCreateDesignActionStateRepository().remove(b);
				}
			} else if (act instanceof ReviewDesignAction) {
				ReviewDesignAction b = (ReviewDesignAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllDesignDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped reviewing the design document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped reviewing the design document");
						}
					}
					state.getActionStateRepository()
							.getReviewDesignActionStateRepository().remove(b);
				}
			} else if (act instanceof CorrectDesignAction) {
				CorrectDesignAction b = (CorrectDesignAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllDesignDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllDesignEnvironments().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped correcting the design document");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped correcting the design document");
						}
					}
					state.getActionStateRepository()
							.getCorrectDesignActionStateRepository().remove(b);
				}
			} else if (act instanceof CreateCodeAction) {
				CreateCodeAction b = (CreateCodeAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllAssociatedDesignDocuments().size() < 1)
						|| (b.getAllDevelopmentEnvironments().size() < -999999)
						|| (b.getAllAssociatedSystemTestPlans().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped creating code");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped creating code");
						}
					}
					state.getActionStateRepository()
							.getCreateCodeActionStateRepository().remove(b);
				}
			} else if (act instanceof InspectCodeAction) {
				InspectCodeAction b = (InspectCodeAction) act;
				if ((b.getAllEmps().size() < 3)
						|| (b.getAllCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllAssociatedDesignDocs().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped inspecting the code");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped inspecting the code");
						}
					}
					state.getActionStateRepository()
							.getInspectCodeActionStateRepository().remove(b);
				}
			} else if (act instanceof CorrectCodeAction) {
				CorrectCodeAction b = (CorrectCodeAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllAssociatedDesignDocs().size() < 1)
						|| (b.getAllDevelopmentEnvironments().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped correcting code");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped correcting code");
						}
					}
					state.getActionStateRepository()
							.getCorrectCodeActionStateRepository().remove(b);
				}
			} else if (act instanceof IntegrateCodeAction) {
				IntegrateCodeAction b = (IntegrateCodeAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllAssociatedDesignDocs().size() < 1)
						|| (b.getAllDevelopmentEnvironments().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped integrating code");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped integrating code");
						}
					}
					state.getActionStateRepository()
							.getIntegrateCodeActionStateRepository().remove(b);
				}
			} else if (act instanceof SystemTestAction) {
				SystemTestAction b = (SystemTestAction) act;
				if ((b.getAllCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllEmps().size() < 1)
						|| (b.getAllAssociatedSystemTestPlans().size() < 1)
						|| (b.getAllTestingTools().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped doing the system test");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped doing the system test");
						}
					}
					state.getActionStateRepository()
							.getSystemTestActionStateRepository().remove(b);
				}
			} else if (act instanceof CreateSystemTestPlanAction) {
				CreateSystemTestPlanAction b = (CreateSystemTestPlanAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllAssociatedCodeDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllSystemTestPlanDocs().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllTestingTools().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped creating the system test plan");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped creating the system test plan");
						}
					}
					state.getActionStateRepository()
							.getCreateSystemTestPlanActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof ReviewSystemTestPlanAction) {
				ReviewSystemTestPlanAction b = (ReviewSystemTestPlanAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllTestPlans().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped reviewing the system test plan");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped reviewing the system test plan");
						}
					}
					state.getActionStateRepository()
							.getReviewSystemTestPlanActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof CorrectSystemTestPlanAction) {
				CorrectSystemTestPlanAction b = (CorrectSystemTestPlanAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllTestPlans().size() < 1)
						|| (b.getAllAssociatedRequirementsDocs().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllTestingTools().size() < -999999)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I've stopped correcting the system test plan");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I've stopped correcting the system test plan");
						}
					}
					state.getActionStateRepository()
							.getCorrectSystemTestPlanActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof DeliverProductAction) {
				DeliverProductAction b = (DeliverProductAction) act;
				if ((b.getAllEmps().size() < 1) || (b.getAllProjs().size() < 1)
						|| (b.getAllCodeDocs().size() < 1)
						|| (b.getAllCusts().size() < 1)) {
					state.getActionStateRepository()
							.getDeliverProductActionStateRepository().remove(b);
				}
			} else if (act instanceof BreakAction) {
				BreakAction b = (BreakAction) act;
				if ((b.getAllBreakers().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I'm going back to work now");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I'm going back to work now");
						}
					}
					update(parent, UPDATE_ONE, "BreakDestRule", b);
					state.getActionStateRepository()
							.getBreakActionStateRepository().remove(b);
				}
			} else if (act instanceof GetSickAction) {
				GetSickAction b = (GetSickAction) act;
				if ((b.getAllSickPersons().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("I'm not sick anymore -- back to work!");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("I'm not sick anymore -- back to work!");
						}
					}
					update(parent, UPDATE_ONE, "GetSickDestRule", b);
					state.getActionStateRepository()
							.getGetSickActionStateRepository().remove(b);
				}
			} else if (act instanceof QuitAction) {
				QuitAction b = (QuitAction) act;
				if ((b.getAllQuitters().size() < 1)) {
					state.getActionStateRepository()
							.getQuitActionStateRepository().remove(b);
				}
			} else if (act instanceof IntroduceNewRequirementsAction) {
				IntroduceNewRequirementsAction b = (IntroduceNewRequirementsAction) act;
				if ((b.getAllCusts().size() < 1)
						|| (b.getAllAssociatedRequirementsDocuments().size() < 1)
						|| (b.getAllProjs().size() < 1)
						|| (b.getAllEmpWOverheadTexts().size() < 1)
						|| (b.getAllAssociatedCodes().size() < 1)
						|| (b.getAllAssociatedDesignDocuments().size() < 1)
						|| (b.getAllAssociatedSystemTestPlans().size() < 1)) {
					state.getActionStateRepository()
							.getIntroduceNewRequirementsActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof UpdateProjectAttributesAction) {
				UpdateProjectAttributesAction b = (UpdateProjectAttributesAction) act;
				if ((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1)) {
					state.getActionStateRepository()
							.getUpdateProjectAttributesActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof ChangePayRateAction) {
				ChangePayRateAction b = (ChangePayRateAction) act;
				if ((b.getAllEmps().size() < 1)) {
					state.getActionStateRepository()
							.getChangePayRateActionStateRepository().remove(b);
				}
			} else if (act instanceof GiveBonusAction) {
				GiveBonusAction b = (GiveBonusAction) act;
				if ((b.getAllEmps().size() < 1)
						|| (b.getAllProjectWithBudgets().size() < 1)) {
					Vector<SSObject> c = b.getAllParticipants();
					for (int j = 0; j < c.size(); j++) {
						SSObject d = c.elementAt(j);
						if (d instanceof Employee) {
							((Employee) d)
									.setOverheadText("Thanks for the bonus!");
						} else if (d instanceof Customer) {
							((Customer) d)
									.setOverheadText("Thanks for the bonus!");
						}
					}
					state.getActionStateRepository()
							.getGiveBonusActionStateRepository().remove(b);
				}
			} else if (act instanceof FireAction) {
				FireAction b = (FireAction) act;
				if ((b.getAllFiredPersons().size() < 1)) {
					state.getActionStateRepository()
							.getFireActionStateRepository().remove(b);
				}
			} else if (act instanceof PurchaseToolAction) {
				PurchaseToolAction b = (PurchaseToolAction) act;
				if ((b.getAllEmpWhoseMenuClickedOns().size() < 1)
						|| (b.getAllSETools().size() < 1)
						|| (b.getAllProjs().size() < 1)) {
					state.getActionStateRepository()
							.getPurchaseToolActionStateRepository().remove(b);
				}
			} else if (act instanceof SuggestedRequirementsPhaseDurationAction) {
				SuggestedRequirementsPhaseDurationAction b = (SuggestedRequirementsPhaseDurationAction) act;
				if ((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1)) {
					update(parent, UPDATE_ONE, "SetSuggestedRequirementsDone",
							b);
					state.getActionStateRepository()
							.getSuggestedRequirementsPhaseDurationActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof SuggestedDesignPhaseDurationAction) {
				SuggestedDesignPhaseDurationAction b = (SuggestedDesignPhaseDurationAction) act;
				if ((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1)) {
					update(parent, UPDATE_ONE, "SetSuggestedDesignDone", b);
					state.getActionStateRepository()
							.getSuggestedDesignPhaseDurationActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof SuggestedImplIntegrationPhaseDurationAction) {
				SuggestedImplIntegrationPhaseDurationAction b = (SuggestedImplIntegrationPhaseDurationAction) act;
				if ((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1)) {
					update(parent, UPDATE_ONE, "SetSuggestedImplDone", b);
					state.getActionStateRepository()
							.getSuggestedImplIntegrationPhaseDurationActionStateRepository()
							.remove(b);
				}
			} else if (act instanceof SuggestedTestingPhaseDurationAction) {
				SuggestedTestingPhaseDurationAction b = (SuggestedTestingPhaseDurationAction) act;
				if ((b.getAllProjs().size() < 1) || (b.getAllEmps().size() < 1)) {
					update(parent, UPDATE_ONE, "SetSuggestedTestingDone", b);
					state.getActionStateRepository()
							.getSuggestedTestingPhaseDurationActionStateRepository()
							.remove(b);
				}
			}
		}
	}
}