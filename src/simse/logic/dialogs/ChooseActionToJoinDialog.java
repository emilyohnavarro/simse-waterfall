/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseActionToJoinDialogGenerator */
package simse.logic.dialogs;

import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;

public class ChooseActionToJoinDialog extends JDialog implements ActionListener {
	private JFrame gui;
	private Vector<? extends simse.adts.actions.Action> actions;
	private State state;
	private Employee emp;
	private Vector<JRadioButton> radioButtons;
	private ButtonGroup radioButtonGroup;
	private JButton okButton;
	private JButton cancelButton;
	private String menuText;
	private RuleExecutor ruleExec;

	public ChooseActionToJoinDialog(JFrame owner,
			Vector<? extends simse.adts.actions.Action> acts, Employee e,
			State s, String menText, RuleExecutor re) {
		super(owner, true);
		gui = owner;
		actions = acts;
		emp = e;
		state = s;
		menuText = menText;
		ruleExec = re;
		radioButtons = new Vector<JRadioButton>();
		radioButtonGroup = new ButtonGroup();
		setTitle("Join Action");
		Box mainPane = Box.createVerticalBox();
		JPanel topPane = new JPanel();
		String actionName = new String();
		simse.adts.actions.Action tempAct = actions.elementAt(0);
		if (tempAct instanceof CreateRequirementsAction) {
			actionName = "CreateRequirements";
		} else if (tempAct instanceof ReviewRequirementsAction) {
			actionName = "ReviewRequirements";
		} else if (tempAct instanceof CorrectRequirementsAction) {
			actionName = "CorrectRequirements";
		} else if (tempAct instanceof CreateDesignAction) {
			actionName = "CreateDesign";
		} else if (tempAct instanceof ReviewDesignAction) {
			actionName = "ReviewDesign";
		} else if (tempAct instanceof CorrectDesignAction) {
			actionName = "CorrectDesign";
		} else if (tempAct instanceof CreateCodeAction) {
			actionName = "CreateCode";
		} else if (tempAct instanceof InspectCodeAction) {
			actionName = "InspectCode";
		} else if (tempAct instanceof CorrectCodeAction) {
			actionName = "CorrectCode";
		} else if (tempAct instanceof IntegrateCodeAction) {
			actionName = "IntegrateCode";
		} else if (tempAct instanceof SystemTestAction) {
			actionName = "SystemTest";
		} else if (tempAct instanceof CreateSystemTestPlanAction) {
			actionName = "CreateSystemTestPlan";
		} else if (tempAct instanceof ReviewSystemTestPlanAction) {
			actionName = "ReviewSystemTestPlan";
		} else if (tempAct instanceof CorrectSystemTestPlanAction) {
			actionName = "CorrectSystemTestPlan";
		} else if (tempAct instanceof DeliverProductAction) {
			actionName = "DeliverProduct";
		} else if (tempAct instanceof ChangePayRateAction) {
			actionName = "ChangePayRate";
		} else if (tempAct instanceof GiveBonusAction) {
			actionName = "GiveBonus";
		} else if (tempAct instanceof FireAction) {
			actionName = "Fire";
		} else if (tempAct instanceof PurchaseToolAction) {
			actionName = "PurchaseTool";
		}
		topPane.add(new JLabel("Choose which " + actionName
				+ " Action to join:"));
		JPanel middlePane = new JPanel(new GridLayout(0, 1));
		if (tempAct instanceof CreateRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateRequirementsAction act = (CreateRequirementsAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("ReqDoc(s): ");
				Vector<Artifact> allReqDocs = act.getAllReqDocs();
				for (int j = 0; j < allReqDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allReqDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("RequirementsCaptureTool(s): ");
				Vector<Tool> allRequirementsCaptureTools = act
						.getAllRequirementsCaptureTools();
				for (int j = 0; j < allRequirementsCaptureTools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allRequirementsCaptureTools.elementAt(j);
					if (a instanceof RequirementsCaptureTool) {
						label.append("RequirementsCaptureTool("
								+ ((RequirementsCaptureTool) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedCodeDoc(s): ");
				Vector<Artifact> allAssociatedCodeDocs = act
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedDesignDoc(s): ");
				Vector<Artifact> allAssociatedDesignDocs = act
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedSystemTestPlan(s): ");
				Vector<Artifact> allAssociatedSystemTestPlans = act
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedSystemTestPlans.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof ReviewRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewRequirementsAction act = (ReviewRequirementsAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("RequirementsDoc(s): ");
				Vector<Artifact> allRequirementsDocs = act
						.getAllRequirementsDocs();
				for (int j = 0; j < allRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CorrectRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectRequirementsAction act = (CorrectRequirementsAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("RequirementsDoc(s): ");
				Vector<Artifact> allRequirementsDocs = act
						.getAllRequirementsDocs();
				for (int j = 0; j < allRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("RequirementsCaptureTool(s): ");
				Vector<Tool> allRequirementsCaptureTools = act
						.getAllRequirementsCaptureTools();
				for (int j = 0; j < allRequirementsCaptureTools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allRequirementsCaptureTools.elementAt(j);
					if (a instanceof RequirementsCaptureTool) {
						label.append("RequirementsCaptureTool("
								+ ((RequirementsCaptureTool) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CreateDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateDesignAction act = (CreateDesignAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DesignDoc(s): ");
				Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
				for (int j = 0; j < allDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DesignEnvironment(s): ");
				Vector<Tool> allDesignEnvironments = act
						.getAllDesignEnvironments();
				for (int j = 0; j < allDesignEnvironments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allDesignEnvironments.elementAt(j);
					if (a instanceof DesignEnvironment) {
						label.append("DesignEnvironment("
								+ ((DesignEnvironment) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedCodeDoc(s): ");
				Vector<Artifact> allAssociatedCodeDocs = act
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof ReviewDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewDesignAction act = (ReviewDesignAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DesignDoc(s): ");
				Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
				for (int j = 0; j < allDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CorrectDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectDesignAction act = (CorrectDesignAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DesignDoc(s): ");
				Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
				for (int j = 0; j < allDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DesignEnvironment(s): ");
				Vector<Tool> allDesignEnvironments = act
						.getAllDesignEnvironments();
				for (int j = 0; j < allDesignEnvironments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allDesignEnvironments.elementAt(j);
					if (a instanceof DesignEnvironment) {
						label.append("DesignEnvironment("
								+ ((DesignEnvironment) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CreateCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateCodeAction act = (CreateCodeAction) actions.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedDesignDocument(s): ");
				Vector<Artifact> allAssociatedDesignDocuments = act
						.getAllAssociatedDesignDocuments();
				for (int j = 0; j < allAssociatedDesignDocuments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedDesignDocuments.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DevelopmentEnvironment(s): ");
				Vector<Tool> allDevelopmentEnvironments = act
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allDevelopmentEnvironments.elementAt(j);
					if (a instanceof IDE) {
						label.append("IDE(" + ((IDE) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedSystemTestPlan(s): ");
				Vector<Artifact> allAssociatedSystemTestPlans = act
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedSystemTestPlans.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof InspectCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				InspectCodeAction act = (InspectCodeAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedDesignDoc(s): ");
				Vector<Artifact> allAssociatedDesignDocs = act
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CorrectCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectCodeAction act = (CorrectCodeAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedDesignDoc(s): ");
				Vector<Artifact> allAssociatedDesignDocs = act
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DevelopmentEnvironment(s): ");
				Vector<Tool> allDevelopmentEnvironments = act
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allDevelopmentEnvironments.elementAt(j);
					if (a instanceof IDE) {
						label.append("IDE(" + ((IDE) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof IntegrateCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				IntegrateCodeAction act = (IntegrateCodeAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedDesignDoc(s): ");
				Vector<Artifact> allAssociatedDesignDocs = act
						.getAllAssociatedDesignDocs();
				for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedDesignDocs.elementAt(j);
					if (a instanceof DesignDocument) {
						label.append("DesignDocument("
								+ ((DesignDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("DevelopmentEnvironment(s): ");
				Vector<Tool> allDevelopmentEnvironments = act
						.getAllDevelopmentEnvironments();
				for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allDevelopmentEnvironments.elementAt(j);
					if (a instanceof IDE) {
						label.append("IDE(" + ((IDE) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof SystemTestAction) {
			for (int i = 0; i < actions.size(); i++) {
				SystemTestAction act = (SystemTestAction) actions.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedSystemTestPlan(s): ");
				Vector<Artifact> allAssociatedSystemTestPlans = act
						.getAllAssociatedSystemTestPlans();
				for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedSystemTestPlans.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("TestingTool(s): ");
				Vector<Tool> allTestingTools = act.getAllTestingTools();
				for (int j = 0; j < allTestingTools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allTestingTools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
						label.append("AutomatedTestingTool("
								+ ((AutomatedTestingTool) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CreateSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateSystemTestPlanAction act = (CreateSystemTestPlanAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedCodeDoc(s): ");
				Vector<Artifact> allAssociatedCodeDocs = act
						.getAllAssociatedCodeDocs();
				for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("SystemTestPlanDoc(s): ");
				Vector<Artifact> allSystemTestPlanDocs = act
						.getAllSystemTestPlanDocs();
				for (int j = 0; j < allSystemTestPlanDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allSystemTestPlanDocs.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("TestingTool(s): ");
				Vector<Tool> allTestingTools = act.getAllTestingTools();
				for (int j = 0; j < allTestingTools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allTestingTools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
						label.append("AutomatedTestingTool("
								+ ((AutomatedTestingTool) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof ReviewSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewSystemTestPlanAction act = (ReviewSystemTestPlanAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("TestPlan(s): ");
				Vector<Artifact> allTestPlans = act.getAllTestPlans();
				for (int j = 0; j < allTestPlans.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allTestPlans.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof CorrectSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectSystemTestPlanAction act = (CorrectSystemTestPlanAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("TestPlan(s): ");
				Vector<Artifact> allTestPlans = act.getAllTestPlans();
				for (int j = 0; j < allTestPlans.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allTestPlans.elementAt(j);
					if (a instanceof SystemTestPlan) {
						label.append("SystemTestPlan("
								+ ((SystemTestPlan) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("AssociatedRequirementsDoc(s): ");
				Vector<Artifact> allAssociatedRequirementsDocs = act
						.getAllAssociatedRequirementsDocs();
				for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allAssociatedRequirementsDocs.elementAt(j);
					if (a instanceof RequirementsDocument) {
						label.append("RequirementsDocument("
								+ ((RequirementsDocument) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("TestingTool(s): ");
				Vector<Tool> allTestingTools = act.getAllTestingTools();
				for (int j = 0; j < allTestingTools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allTestingTools.elementAt(j);
					if (a instanceof AutomatedTestingTool) {
						label.append("AutomatedTestingTool("
								+ ((AutomatedTestingTool) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof DeliverProductAction) {
			for (int i = 0; i < actions.size(); i++) {
				DeliverProductAction act = (DeliverProductAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("; <br>");
				label.append("CodeDoc(s): ");
				Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
				for (int j = 0; j < allCodeDocs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Artifact a = allCodeDocs.elementAt(j);
					if (a instanceof Code) {
						label.append("Code(" + ((Code) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Cust(s): ");
				Vector<Customer> allCusts = act.getAllCusts();
				for (int j = 0; j < allCusts.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Customer a = allCusts.elementAt(j);
					if (a instanceof ACustomer) {
						label.append("aCustomer(" + ((ACustomer) a).getName()
								+ ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof ChangePayRateAction) {
			for (int i = 0; i < actions.size(); i++) {
				ChangePayRateAction act = (ChangePayRateAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof GiveBonusAction) {
			for (int i = 0; i < actions.size(); i++) {
				GiveBonusAction act = (GiveBonusAction) actions.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("Emp(s): ");
				Vector<Employee> allEmps = act.getAllEmps();
				for (int j = 0; j < allEmps.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmps.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("ProjectWithBudget(s): ");
				Vector<Project> allProjectWithBudgets = act
						.getAllProjectWithBudgets();
				for (int j = 0; j < allProjectWithBudgets.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjectWithBudgets.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof FireAction) {
			for (int i = 0; i < actions.size(); i++) {
				FireAction act = (FireAction) actions.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("FiredPerson(s): ");
				Vector<Employee> allFiredPersons = act.getAllFiredPersons();
				for (int j = 0; j < allFiredPersons.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allFiredPersons.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		} else if (tempAct instanceof PurchaseToolAction) {
			for (int i = 0; i < actions.size(); i++) {
				PurchaseToolAction act = (PurchaseToolAction) actions
						.elementAt(i);
				StringBuffer label = new StringBuffer("<html>");
				label.append("EmpWhoseMenuClickedOn(s): ");
				Vector<Employee> allEmpWhoseMenuClickedOns = act
						.getAllEmpWhoseMenuClickedOns();
				for (int j = 0; j < allEmpWhoseMenuClickedOns.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Employee a = allEmpWhoseMenuClickedOns.elementAt(j);
					if (a instanceof SoftwareEngineer) {
						label.append("SoftwareEngineer("
								+ ((SoftwareEngineer) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("SETool(s): ");
				Vector<Tool> allSETools = act.getAllSETools();
				for (int j = 0; j < allSETools.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Tool a = allSETools.elementAt(j);
					if (a instanceof IDE) {
						label.append("IDE(" + ((IDE) a).getName() + ")");
					} else if (a instanceof RequirementsCaptureTool) {
						label.append("RequirementsCaptureTool("
								+ ((RequirementsCaptureTool) a).getName() + ")");
					} else if (a instanceof AutomatedTestingTool) {
						label.append("AutomatedTestingTool("
								+ ((AutomatedTestingTool) a).getName() + ")");
					} else if (a instanceof DesignEnvironment) {
						label.append("DesignEnvironment("
								+ ((DesignEnvironment) a).getName() + ")");
					}
				}
				label.append("; <br>");
				label.append("Proj(s): ");
				Vector<Project> allProjs = act.getAllProjs();
				for (int j = 0; j < allProjs.size(); j++) {
					if (j > 0) {
						label.append(", ");
					}
					Project a = allProjs.elementAt(j);
					if (a instanceof SEProject) {
						label.append("SEProject("
								+ ((SEProject) a).getDescription() + ")");
					}
				}
				label.append("</HTML>");
				JPanel tempPane = new JPanel(new BorderLayout());
				JRadioButton tempRadioButton = new JRadioButton(
						label.toString());
				radioButtonGroup.add(tempRadioButton);
				tempPane.add(tempRadioButton, BorderLayout.WEST);
				radioButtons.add(tempRadioButton);
				middlePane.add(tempPane);
			}
		}
		JPanel bottomPane = new JPanel();
		okButton = new JButton("OK");
		okButton.addActionListener(this);
		bottomPane.add(okButton);
		cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(this);
		bottomPane.add(cancelButton);
		mainPane.add(topPane);
		mainPane.add(middlePane);
		mainPane.add(bottomPane);
		setContentPane(mainPane);
		validate();
		pack();
		repaint();
		toFront();
		Point ownerLoc = owner.getLocationOnScreen();
		Point thisLoc = new Point();
		thisLoc.setLocation(
				(ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)),
				(ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
		setLocation(thisLoc);
		if (radioButtons.size() == 1) {
			onlyOneChoice(owner);
		} else {
			setVisible(true);
		}
	}

	public void actionPerformed(ActionEvent evt) {
		Object source = evt.getSource();
		if (source == cancelButton) {
			setVisible(false);
			dispose();
		} else if (source == okButton) {
			boolean anySelected = false;
			for (int i = 0; i < radioButtons.size(); i++) {
				JRadioButton tempRButt = radioButtons.elementAt(i);
				if (tempRButt.isSelected()) {
					anySelected = true;
					break;
				}
			}
			if (!anySelected) {
				JOptionPane.showMessageDialog(null,
						("You must choose at least one action"),
						"Invalid Input", JOptionPane.ERROR_MESSAGE);
			} else {
				for (int i = 0; i < radioButtons.size(); i++) {
					JRadioButton rButt = radioButtons.elementAt(i);
					if (rButt.isSelected()) {
						simse.adts.actions.Action tempAct = actions
								.elementAt(i);
						Vector<String> participantNames = new Vector<String>();
						if (tempAct instanceof CreateRequirementsAction) {
							Vector allEmps = ((CreateRequirementsAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Create Requirements Document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof ReviewRequirementsAction) {
							Vector allEmps = ((ReviewRequirementsAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Review requirements document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CorrectRequirementsAction) {
							Vector allEmps = ((CorrectRequirementsAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Correct the requirements document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CreateDesignAction) {
							Vector allEmps = ((CreateDesignAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Create the design document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof ReviewDesignAction) {
							Vector allEmps = ((ReviewDesignAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Review the design document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CorrectDesignAction) {
							Vector allEmps = ((CorrectDesignAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Correct the design document")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CreateCodeAction) {
							Vector allEmps = ((CreateCodeAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText.equals("Create code")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof InspectCodeAction) {
							Vector allEmps = ((InspectCodeAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText.equals("Inspect the code")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CorrectCodeAction) {
							Vector allEmps = ((CorrectCodeAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText.equals("Correct code")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof IntegrateCodeAction) {
							Vector allEmps = ((IntegrateCodeAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText.equals("Integrate code")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof SystemTestAction) {
							Vector allEmps = ((SystemTestAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText.equals("Do system test")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CreateSystemTestPlanAction) {
							Vector allEmps = ((CreateSystemTestPlanAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Create the system test plan")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof ReviewSystemTestPlanAction) {
							Vector allEmps = ((ReviewSystemTestPlanAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Review the system test plan")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof CorrectSystemTestPlanAction) {
							Vector allEmps = ((CorrectSystemTestPlanAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 999999)) {
								if (menuText
										.equals("Correct the system test plan")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 1.0)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof DeliverProductAction) {
							Vector allEmps = ((DeliverProductAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 1)) {
								if (menuText
										.equals("Deliver product to customer")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getHealth() >= 0.7)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof ChangePayRateAction) {
							Vector allEmps = ((ChangePayRateAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 1)) {
								if (menuText.equals("Change pay rate")) {
									if ((emp instanceof SoftwareEngineer)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof GiveBonusAction) {
							Vector allEmps = ((GiveBonusAction) tempAct)
									.getAllEmps();
							if ((allEmps.contains(emp) == false)
									&& (allEmps.size() < 1)) {
								if (menuText.equals("Give bonus")) {
									if ((emp instanceof SoftwareEngineer)) {
										participantNames.add("Emp");
									}
								}
							}
						} else if (tempAct instanceof FireAction) {
							Vector allFiredPersons = ((FireAction) tempAct)
									.getAllFiredPersons();
							if ((allFiredPersons.contains(emp) == false)
									&& (allFiredPersons.size() < 1)) {
								if (menuText.equals("Fire")) {
									if ((emp instanceof SoftwareEngineer)
											&& (((SoftwareEngineer) emp)
													.getOnBreak() == false)) {
										participantNames.add("FiredPerson");
									}
								}
							}
						} else if (tempAct instanceof PurchaseToolAction) {
							Vector allEmpWhoseMenuClickedOns = ((PurchaseToolAction) tempAct)
									.getAllEmpWhoseMenuClickedOns();
							if ((allEmpWhoseMenuClickedOns.contains(emp) == false)
									&& (allEmpWhoseMenuClickedOns.size() < 1)) {
								if (menuText.equals("Purchase tool(s)")) {
									if ((emp instanceof SoftwareEngineer)) {
										participantNames
												.add("EmpWhoseMenuClickedOn");
									}
								}
							}
						}
						new ChooseRoleToPlayDialog(gui, participantNames, emp,
								tempAct, menuText, ruleExec);
						setVisible(false);
						dispose();
						break;
					}
				}
			}
		}
	}

	private void onlyOneChoice(JFrame owner) {
		for (int i = 0; i < radioButtons.size(); i++) {
			JRadioButton rButt = radioButtons.elementAt(i);
			simse.adts.actions.Action tempAct = actions.elementAt(i);
			Vector<String> participantNames = new Vector<String>();
			if (tempAct instanceof CreateRequirementsAction) {
				Vector allEmps = ((CreateRequirementsAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Create Requirements Document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof ReviewRequirementsAction) {
				Vector allEmps = ((ReviewRequirementsAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Review requirements document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CorrectRequirementsAction) {
				Vector allEmps = ((CorrectRequirementsAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Correct the requirements document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CreateDesignAction) {
				Vector allEmps = ((CreateDesignAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Create the design document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof ReviewDesignAction) {
				Vector allEmps = ((ReviewDesignAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Review the design document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CorrectDesignAction) {
				Vector allEmps = ((CorrectDesignAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Correct the design document")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CreateCodeAction) {
				Vector allEmps = ((CreateCodeAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Create code")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof InspectCodeAction) {
				Vector allEmps = ((InspectCodeAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Inspect the code")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CorrectCodeAction) {
				Vector allEmps = ((CorrectCodeAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Correct code")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof IntegrateCodeAction) {
				Vector allEmps = ((IntegrateCodeAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Integrate code")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof SystemTestAction) {
				Vector allEmps = ((SystemTestAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Do system test")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CreateSystemTestPlanAction) {
				Vector allEmps = ((CreateSystemTestPlanAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Create the system test plan")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof ReviewSystemTestPlanAction) {
				Vector allEmps = ((ReviewSystemTestPlanAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Review the system test plan")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof CorrectSystemTestPlanAction) {
				Vector allEmps = ((CorrectSystemTestPlanAction) tempAct)
						.getAllEmps();
				if ((allEmps.contains(emp) == false)
						&& (allEmps.size() < 999999)) {
					if (menuText.equals("Correct the system test plan")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 1.0)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof DeliverProductAction) {
				Vector allEmps = ((DeliverProductAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false) && (allEmps.size() < 1)) {
					if (menuText.equals("Deliver product to customer")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getHealth() >= 0.7)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof ChangePayRateAction) {
				Vector allEmps = ((ChangePayRateAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false) && (allEmps.size() < 1)) {
					if (menuText.equals("Change pay rate")) {
						if ((emp instanceof SoftwareEngineer)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof GiveBonusAction) {
				Vector allEmps = ((GiveBonusAction) tempAct).getAllEmps();
				if ((allEmps.contains(emp) == false) && (allEmps.size() < 1)) {
					if (menuText.equals("Give bonus")) {
						if ((emp instanceof SoftwareEngineer)) {
							participantNames.add("Emp");
						}
					}
				}
			} else if (tempAct instanceof FireAction) {
				Vector allFiredPersons = ((FireAction) tempAct)
						.getAllFiredPersons();
				if ((allFiredPersons.contains(emp) == false)
						&& (allFiredPersons.size() < 1)) {
					if (menuText.equals("Fire")) {
						if ((emp instanceof SoftwareEngineer)
								&& (((SoftwareEngineer) emp).getOnBreak() == false)) {
							participantNames.add("FiredPerson");
						}
					}
				}
			} else if (tempAct instanceof PurchaseToolAction) {
				Vector allEmpWhoseMenuClickedOns = ((PurchaseToolAction) tempAct)
						.getAllEmpWhoseMenuClickedOns();
				if ((allEmpWhoseMenuClickedOns.contains(emp) == false)
						&& (allEmpWhoseMenuClickedOns.size() < 1)) {
					if (menuText.equals("Purchase tool(s)")) {
						if ((emp instanceof SoftwareEngineer)) {
							participantNames.add("EmpWhoseMenuClickedOn");
						}
					}
				}
			}
			new ChooseRoleToPlayDialog(owner, participantNames, emp, tempAct,
					menuText, ruleExec);
			dispose();
			break;
		}
	}
}
