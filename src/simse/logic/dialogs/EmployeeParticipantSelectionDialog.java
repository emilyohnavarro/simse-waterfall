/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.EmployeeParticipantSelectionDialogGenerator */
package simse.logic.dialogs;

import simse.gui.ImageLoader;
import simse.gui.TabPanel;
import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;

public class EmployeeParticipantSelectionDialog extends JDialog implements
		ActionListener {
	private String partName;
	private Vector<SSObject> participants;
	private simse.adts.actions.Action action;
	private State state;
	private Employee selectedEmp;
	private int minNumParts;
	private int maxNumParts;
	private Vector<JCheckBox> checkBoxes;
	private JButton checkAllButton;
	private JButton clearAllButton;
	private JButton okButton;
	private JButton cancelButton;
	private boolean actionCancelled;

	public EmployeeParticipantSelectionDialog(JFrame owner, String pName,
			Vector<SSObject> parts, simse.adts.actions.Action act, State s,
			Employee emp) {
		super(owner, true);
		partName = pName;
		participants = parts;
		action = act;
		state = s;
		selectedEmp = emp;
		actionCancelled = false;
		setMinAndMax();
		if (((selectedEmp != null) && (maxNumParts > 0) && (participants.size() > 0))
				|| ((selectedEmp == null) && (participants.size() > minNumParts))) {
			checkBoxes = new Vector<JCheckBox>();
			setTitle("Participant Selection");
			Box mainPane = Box.createVerticalBox();
			JPanel topPane = new JPanel();
			String title = "Choose ";
			if (selectedEmp != null) // selected emp already added in this
										// participant role
			{
				title = title.concat("other ");
			}
			title = title.concat(partName + " participant(s) (");
			if (minNumParts == maxNumParts) {
				title = title.concat("exactly " + minNumParts);
			} else {
				title = title.concat("at least " + minNumParts);
				if (maxNumParts < 999999) // not boundless
				{
					title = title.concat(", at most " + maxNumParts);
				}
			}
			title = title.concat("):");
			topPane.add(new JLabel(title));
			JPanel middlePane = new JPanel(new GridLayout(0, 1));
			for (int i = 0; i < participants.size(); i++) {
				SSObject tempObj = participants.elementAt(i);
				String label = new String();
				if (tempObj instanceof SoftwareEngineer) {
					label = ("SoftwareEngineer ("
							+ ((SoftwareEngineer) tempObj).getName() + ")");
				} else if (tempObj instanceof RequirementsDocument) {
					label = ("RequirementsDocument ("
							+ ((RequirementsDocument) tempObj).getName() + ")");
				} else if (tempObj instanceof DesignDocument) {
					label = ("DesignDocument ("
							+ ((DesignDocument) tempObj).getName() + ")");
				} else if (tempObj instanceof Code) {
					label = ("Code (" + ((Code) tempObj).getName() + ")");
				} else if (tempObj instanceof SystemTestPlan) {
					label = ("SystemTestPlan ("
							+ ((SystemTestPlan) tempObj).getName() + ")");
				} else if (tempObj instanceof SEProject) {
					label = ("SEProject ("
							+ ((SEProject) tempObj).getDescription() + ")");
				} else if (tempObj instanceof RequirementsCaptureTool) {
					label = ("RequirementsCaptureTool ("
							+ ((RequirementsCaptureTool) tempObj).getName() + ")");
				} else if (tempObj instanceof DesignEnvironment) {
					label = ("DesignEnvironment ("
							+ ((DesignEnvironment) tempObj).getName() + ")");
				} else if (tempObj instanceof IDE) {
					label = ("IDE (" + ((IDE) tempObj).getName() + ")");
				} else if (tempObj instanceof AutomatedTestingTool) {
					label = ("AutomatedTestingTool ("
							+ ((AutomatedTestingTool) tempObj).getName() + ")");
				} else if (tempObj instanceof ACustomer) {
					label = ("ACustomer (" + ((ACustomer) tempObj).getName() + ")");
				}
				JPanel tempPane = new JPanel(new BorderLayout());
				JCheckBox tempCheckBox = new JCheckBox(label);
				tempPane.add(tempCheckBox, BorderLayout.WEST);
				checkBoxes.add(tempCheckBox);
				ImageIcon icon = new ImageIcon(ImageLoader.getImageFromURL(
						TabPanel.getImage(tempObj)).getScaledInstance(30, 30,
						Image.SCALE_AREA_AVERAGING));
				tempPane.add(new JLabel(icon), BorderLayout.EAST);
				middlePane.add(tempPane);
			}
			JPanel checkPane = new JPanel();
			checkAllButton = new JButton("Check All");
			checkAllButton.addActionListener(this);
			checkPane.add(checkAllButton);
			clearAllButton = new JButton("Clear All");
			clearAllButton.addActionListener(this);
			checkPane.add(clearAllButton);
			JPanel bottomPane = new JPanel();
			okButton = new JButton("OK");
			okButton.addActionListener(this);
			bottomPane.add(okButton);
			cancelButton = new JButton("Cancel");
			cancelButton.addActionListener(this);
			bottomPane.add(cancelButton);
			mainPane.add(topPane);
			mainPane.add(middlePane);
			JSeparator separator1 = new JSeparator();
			separator1.setMaximumSize(new Dimension(900, 1));
			mainPane.add(separator1);
			mainPane.add(checkPane);
			JSeparator separator2 = new JSeparator();
			separator2.setMaximumSize(new Dimension(900, 1));
			mainPane.add(separator2);
			mainPane.add(bottomPane);
			addWindowListener(new ExitListener());
			setContentPane(mainPane);
			validate();
			pack();
			repaint();
			toFront();
			Point ownerLoc = owner.getLocationOnScreen();
			Point thisLoc = new Point();
			thisLoc.setLocation(
					(ownerLoc.getX() + (owner.getWidth() / 2) - (this
							.getWidth() / 2)),
					(ownerLoc.getY() + (owner.getHeight() / 2) - (this
							.getHeight() / 2)));
			setLocation(thisLoc);
			setVisible(true);
		} else if ((selectedEmp == null)
				&& (participants.size() == minNumParts)) {
			for (int i = 0; i < participants.size(); i++) {
				Employee tempEmp = (Employee) participants.elementAt(i);
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("Emp")) {
						((CreateRequirementsAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof ReviewRequirementsAction) {
					if (partName.equals("Emp")) {
						((ReviewRequirementsAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("Emp")) {
						((CorrectRequirementsAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("Emp")) {
						((CreateDesignAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("Emp")) {
						((ReviewDesignAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("Emp")) {
						((CorrectDesignAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("Emp")) {
						((CreateCodeAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("Emp")) {
						((InspectCodeAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("Emp")) {
						((CorrectCodeAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("Emp")) {
						((IntegrateCodeAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("Emp")) {
						((SystemTestAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CreateSystemTestPlanAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((ReviewSystemTestPlanAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CorrectSystemTestPlanAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("Emp")) {
						((DeliverProductAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof ChangePayRateAction) {
					if (partName.equals("Emp")) {
						((ChangePayRateAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof GiveBonusAction) {
					if (partName.equals("Emp")) {
						((GiveBonusAction) action).addEmp(tempEmp);
					}
				} else if (action instanceof FireAction) {
					if (partName.equals("FiredPerson")) {
						((FireAction) action).addFiredPerson(tempEmp);
					}
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("EmpWhoseMenuClickedOn")) {
						((PurchaseToolAction) action)
								.addEmpWhoseMenuClickedOn(tempEmp);
					}
				}
			}
		}
		if (selectedEmp != null) {
			if (action instanceof CreateRequirementsAction) {
				if (partName.equals("Emp")) {
					((CreateRequirementsAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof ReviewRequirementsAction) {
				if (partName.equals("Emp")) {
					((ReviewRequirementsAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CorrectRequirementsAction) {
				if (partName.equals("Emp")) {
					((CorrectRequirementsAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CreateDesignAction) {
				if (partName.equals("Emp")) {
					((CreateDesignAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof ReviewDesignAction) {
				if (partName.equals("Emp")) {
					((ReviewDesignAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CorrectDesignAction) {
				if (partName.equals("Emp")) {
					((CorrectDesignAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CreateCodeAction) {
				if (partName.equals("Emp")) {
					((CreateCodeAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof InspectCodeAction) {
				if (partName.equals("Emp")) {
					((InspectCodeAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CorrectCodeAction) {
				if (partName.equals("Emp")) {
					((CorrectCodeAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof IntegrateCodeAction) {
				if (partName.equals("Emp")) {
					((IntegrateCodeAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof SystemTestAction) {
				if (partName.equals("Emp")) {
					((SystemTestAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CreateSystemTestPlanAction) {
				if (partName.equals("Emp")) {
					((CreateSystemTestPlanAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof ReviewSystemTestPlanAction) {
				if (partName.equals("Emp")) {
					((ReviewSystemTestPlanAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof CorrectSystemTestPlanAction) {
				if (partName.equals("Emp")) {
					((CorrectSystemTestPlanAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof DeliverProductAction) {
				if (partName.equals("Emp")) {
					((DeliverProductAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof ChangePayRateAction) {
				if (partName.equals("Emp")) {
					((ChangePayRateAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof GiveBonusAction) {
				if (partName.equals("Emp")) {
					((GiveBonusAction) action).addEmp(selectedEmp);
				}
			} else if (action instanceof FireAction) {
				if (partName.equals("FiredPerson")) {
					((FireAction) action).addFiredPerson(selectedEmp);
				}
			} else if (action instanceof PurchaseToolAction) {
				if (partName.equals("EmpWhoseMenuClickedOn")) {
					((PurchaseToolAction) action)
							.addEmpWhoseMenuClickedOn(selectedEmp);
				}
			}
		}
	}

	public void actionPerformed(ActionEvent evt) {
		Object source = evt.getSource();
		if (source == cancelButton) {
			actionCancelled = true;
			setVisible(false);
			dispose();
		} else if (source == okButton) {
			Vector<JCheckBox> checkedBoxes = new Vector<JCheckBox>();
			for (int i = 0; i < checkBoxes.size(); i++) {
				JCheckBox tempCBox = checkBoxes.elementAt(i);
				if (tempCBox.isSelected()) {
					checkedBoxes.add(tempCBox);
				}
			}
			if (checkedBoxes.size() < minNumParts) {
				JOptionPane
						.showMessageDialog(null, ("You must choose at least "
								+ minNumParts + " participants"),
								"Invalid Input", JOptionPane.ERROR_MESSAGE);
			} else if (checkedBoxes.size() > maxNumParts) {
				JOptionPane
						.showMessageDialog(
								null,
								("You may only choose at most " + maxNumParts + " participants"),
								"Invalid Input", JOptionPane.ERROR_MESSAGE);
			} else {
				for (int i = 0; i < checkedBoxes.size(); i++) {
					JCheckBox checkedBox = checkedBoxes.elementAt(i);
					String cBoxText = checkedBox.getText();
					String objTypeName = cBoxText.substring(0,
							(cBoxText.indexOf('(') - 1));
					String keyValStr = cBoxText.substring(
							(cBoxText.indexOf('(') + 1),
							cBoxText.lastIndexOf(')'));

					addParticipant(objTypeName, keyValStr);
				}
				setVisible(false);
				dispose();
			}
		} else if (source == checkAllButton) {
			for (int i = 0; i < checkBoxes.size(); i++) {
				checkBoxes.elementAt(i).setSelected(true);
			}
		} else if (source == clearAllButton) {
			for (int i = 0; i < checkBoxes.size(); i++) {
				checkBoxes.elementAt(i).setSelected(false);
			}
		}
	}

	private void addParticipant(String objTypeName, String keyValStr) {
		if (objTypeName.equals("SoftwareEngineer")) {
			SoftwareEngineer a = state.getEmployeeStateRepository()
					.getSoftwareEngineerStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("Emp")) {
						((CreateRequirementsAction) action).addEmp(a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
					if (partName.equals("Emp")) {
						((ReviewRequirementsAction) action).addEmp(a);
					}
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("Emp")) {
						((CorrectRequirementsAction) action).addEmp(a);
					}
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("Emp")) {
						((CreateDesignAction) action).addEmp(a);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("Emp")) {
						((ReviewDesignAction) action).addEmp(a);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("Emp")) {
						((CorrectDesignAction) action).addEmp(a);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("Emp")) {
						((CreateCodeAction) action).addEmp(a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("Emp")) {
						((InspectCodeAction) action).addEmp(a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("Emp")) {
						((CorrectCodeAction) action).addEmp(a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("Emp")) {
						((IntegrateCodeAction) action).addEmp(a);
					}
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("Emp")) {
						((SystemTestAction) action).addEmp(a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CreateSystemTestPlanAction) action).addEmp(a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((ReviewSystemTestPlanAction) action).addEmp(a);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CorrectSystemTestPlanAction) action).addEmp(a);
					}
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("Emp")) {
						((DeliverProductAction) action).addEmp(a);
					}
				} else if (action instanceof ChangePayRateAction) {
					if (partName.equals("Emp")) {
						((ChangePayRateAction) action).addEmp(a);
					}
				} else if (action instanceof GiveBonusAction) {
					if (partName.equals("Emp")) {
						((GiveBonusAction) action).addEmp(a);
					}
				} else if (action instanceof FireAction) {
					if (partName.equals("FiredPerson")) {
						((FireAction) action).addFiredPerson(a);
					}
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("EmpWhoseMenuClickedOn")) {
						((PurchaseToolAction) action)
								.addEmpWhoseMenuClickedOn(a);
					}
				}
			}
		}
	}

	private void setMinAndMax() {
		if (action instanceof CreateRequirementsAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("ReqDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("RequirementsCaptureTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof ReviewRequirementsAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("RequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectRequirementsAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("RequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("RequirementsCaptureTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateDesignAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DesignEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof ReviewDesignAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectDesignAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DesignEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateCodeAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof InspectCodeAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 3;
					maxNumParts = 999999;
				} else {
					minNumParts = 3 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectCodeAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof IntegrateCodeAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof SystemTestAction) {
			if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("SystemTestPlanDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof ReviewSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("TestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("TestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof DeliverProductAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Cust")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof BreakAction) {
			if (partName.equals("Breaker")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			}
		} else if (action instanceof GetSickAction) {
			if (partName.equals("SickPerson")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			}
		} else if (action instanceof QuitAction) {
			if (partName.equals("Quitter")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			}
		} else if (action instanceof IntroduceNewRequirementsAction) {
			if (partName.equals("Cust")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("EmpWOverheadText")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			} else if (partName.equals("AssociatedCode")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof UpdateProjectAttributesAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			}
		} else if (action instanceof ChangePayRateAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			}
		} else if (action instanceof GiveBonusAction) {
			if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			} else if (partName.equals("ProjectWithBudget")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof FireAction) {
			if (partName.equals("FiredPerson")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			}
		} else if (action instanceof PurchaseToolAction) {
			if (partName.equals("EmpWhoseMenuClickedOn")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 1;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 1 - 1;
				}

			} else if (partName.equals("SETool")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			}
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			}
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			}
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				if (selectedEmp == null) {
					minNumParts = 1;
					maxNumParts = 999999;
				} else {
					minNumParts = 1 - 1;
					maxNumParts = 999999;
				}

			}
		}
	}

	public boolean actionCancelled() {
		return actionCancelled;
	}

	public class ExitListener extends WindowAdapter {
		public void windowClosing(WindowEvent event) {
			actionCancelled = true;
		}
	}
}
