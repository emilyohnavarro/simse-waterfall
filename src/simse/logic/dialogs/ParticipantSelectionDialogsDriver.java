/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ParticipantSelectionDialogsDriverGenerator */
package simse.logic.dialogs;

import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import simse.logic.*;
import simse.gui.*;
import java.util.*;
import javax.swing.*;

public class ParticipantSelectionDialogsDriver {
	private Vector<String> partNames;
	private Vector<Vector<? extends SSObject>> partsVector;
	private simse.adts.actions.Action action;
	private State state;
	private Employee selectedEmp;
	private RuleExecutor ruleExec;
	private DestroyerChecker destChecker;
	private String menuText;

	public ParticipantSelectionDialogsDriver(JFrame gui, Vector<String> pNames,
			Vector<Vector<? extends SSObject>> parts,
			simse.adts.actions.Action act, State s, RuleExecutor re,
			DestroyerChecker dc, Employee emp, String mText) {
		partNames = pNames;
		partsVector = parts;
		action = act;
		state = s;
		selectedEmp = emp;
		ruleExec = re;
		destChecker = dc;
		menuText = mText;
		boolean actionValid = true;
		for (int i = 0; i < partNames.size(); i++) {
			String participantName = partNames.elementAt(i);
			Vector<? extends SSObject> participants = partsVector.elementAt(i);
			// check to see if any of these possible participants have already
			// been added to the action in a different role:
			Vector<SSObject> allParts = action.getAllParticipants();
			Enumeration participantsEnum = participants.elements();
			while (participantsEnum.hasMoreElements()) {
				SSObject tempObj = (SSObject) participantsEnum.nextElement();
				for (int k = 0; k < allParts.size(); k++) {
					SSObject tempObj2 = allParts.elementAt(k);
					if (tempObj == tempObj2) {
						participants.remove(tempObj);
						break;
					}
				}
			}
			if ((participants.size() == 0)
					|| (participants.elementAt(0) instanceof Employee)) {
				for (int j = 0; j < allParts.size(); j++) {
					SSObject tempObj = allParts.elementAt(j);
					if ((selectedEmp != null) && (tempObj == selectedEmp)) {
						selectedEmp = null;
						break;
					}
				}
				boolean participantsContainsSelEmp = false;
				Iterator participantsIterator = participants.iterator();
				while (participantsIterator.hasNext()) {
					SSObject tempObj = (SSObject) participantsIterator.next();
					if (tempObj == selectedEmp) {
						participantsContainsSelEmp = true;
						break;
					}
				}

				if ((selectedEmp != null) && (participantsContainsSelEmp)) // selectedEmp
																			// needs
																			// to
																			// be
																			// added
																			// to
																			// the
																			// action
																			// as
																			// one
																			// of
																			// these
																			// participants
				{
					participants.remove(selectedEmp);
					EmployeeParticipantSelectionDialog psd = new EmployeeParticipantSelectionDialog(
							gui, participantName, new Vector<SSObject>(
									participants), action, state, selectedEmp);
					if (psd.actionCancelled()) {
						actionValid = false;
						break;
					}
				} else // pass null in instead of selectedEmp
				{
					EmployeeParticipantSelectionDialog psd = new EmployeeParticipantSelectionDialog(
							gui, participantName, new Vector<SSObject>(
									participants), action, state, null);
					if (psd.actionCancelled()) {
						actionValid = false;
						break;
					}
				}
			} else {
				NonEmployeeParticipantSelectionDialog psd = new NonEmployeeParticipantSelectionDialog(
						gui, participantName,
						new Vector<SSObject>(participants), action, state);
				if (psd.actionCancelled()) {
					actionValid = false;
					break;
				}
			}
		}
		if (actionValid) {
			if (action instanceof CreateRequirementsAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Create Requirements Document")) {
							((Employee) obj)
									.setOverheadText("I'm creating the requirements document now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Create Requirements Document")) {
							((Customer) obj)
									.setOverheadText("I'm creating the requirements document now");
						}
					}
				}
				state.getActionStateRepository()
						.getCreateRequirementsActionStateRepository()
						.add((CreateRequirementsAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof ReviewRequirementsAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Review requirements document")) {
							((Employee) obj)
									.setOverheadText("I'm reviewing the requirements document now, to try to find any errors");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Review requirements document")) {
							((Customer) obj)
									.setOverheadText("I'm reviewing the requirements document now, to try to find any errors");
						}
					}
				}
				state.getActionStateRepository()
						.getReviewRequirementsActionStateRepository()
						.add((ReviewRequirementsAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CorrectRequirementsAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText
								.equals("Correct the requirements document")) {
							((Employee) obj)
									.setOverheadText("I'm correcting the requirements document now");
						}
					} else if (obj instanceof Customer) {
						if (menuText
								.equals("Correct the requirements document")) {
							((Customer) obj)
									.setOverheadText("I'm correcting the requirements document now");
						}
					}
				}
				state.getActionStateRepository()
						.getCorrectRequirementsActionStateRepository()
						.add((CorrectRequirementsAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CreateDesignAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Create the design document")) {
							((Employee) obj)
									.setOverheadText("I'm creating the design document now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Create the design document")) {
							((Customer) obj)
									.setOverheadText("I'm creating the design document now");
						}
					}
				}
				state.getActionStateRepository()
						.getCreateDesignActionStateRepository()
						.add((CreateDesignAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof ReviewDesignAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Review the design document")) {
							((Employee) obj)
									.setOverheadText("I'm reviewing the design document now, to try to find any errors");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Review the design document")) {
							((Customer) obj)
									.setOverheadText("I'm reviewing the design document now, to try to find any errors");
						}
					}
				}
				state.getActionStateRepository()
						.getReviewDesignActionStateRepository()
						.add((ReviewDesignAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CorrectDesignAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Correct the design document")) {
							((Employee) obj)
									.setOverheadText("I'm correcting the design document now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Correct the design document")) {
							((Customer) obj)
									.setOverheadText("I'm correcting the design document now");
						}
					}
				}
				state.getActionStateRepository()
						.getCorrectDesignActionStateRepository()
						.add((CorrectDesignAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CreateCodeAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Create code")) {
							((Employee) obj).setOverheadText("I'm coding now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Create code")) {
							((Customer) obj).setOverheadText("I'm coding now");
						}
					}
				}
				state.getActionStateRepository()
						.getCreateCodeActionStateRepository()
						.add((CreateCodeAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"CreateCodeTrigRule", action);
				destChecker.update(false, gui);
			} else if (action instanceof InspectCodeAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Inspect the code")) {
							((Employee) obj)
									.setOverheadText("I'm inspecting the code now, to try to find any errors");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Inspect the code")) {
							((Customer) obj)
									.setOverheadText("I'm inspecting the code now, to try to find any errors");
						}
					}
				}
				state.getActionStateRepository()
						.getInspectCodeActionStateRepository()
						.add((InspectCodeAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CorrectCodeAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Correct code")) {
							((Employee) obj)
									.setOverheadText("I'm correcting code now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Correct code")) {
							((Customer) obj)
									.setOverheadText("I'm correcting code now");
						}
					}
				}
				state.getActionStateRepository()
						.getCorrectCodeActionStateRepository()
						.add((CorrectCodeAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof IntegrateCodeAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Integrate code")) {
							((Employee) obj)
									.setOverheadText("I'm integrating code now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Integrate code")) {
							((Customer) obj)
									.setOverheadText("I'm integrating code now");
						}
					}
				}
				state.getActionStateRepository()
						.getIntegrateCodeActionStateRepository()
						.add((IntegrateCodeAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof SystemTestAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Do system test")) {
							((Employee) obj)
									.setOverheadText("I'm doing the system test now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Do system test")) {
							((Customer) obj)
									.setOverheadText("I'm doing the system test now");
						}
					}
				}
				state.getActionStateRepository()
						.getSystemTestActionStateRepository()
						.add((SystemTestAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CreateSystemTestPlanAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Create the system test plan")) {
							((Employee) obj)
									.setOverheadText("I'm creating the system test plan now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Create the system test plan")) {
							((Customer) obj)
									.setOverheadText("I'm creating the system test plan now");
						}
					}
				}
				state.getActionStateRepository()
						.getCreateSystemTestPlanActionStateRepository()
						.add((CreateSystemTestPlanAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof ReviewSystemTestPlanAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Review the system test plan")) {
							((Employee) obj)
									.setOverheadText("I'm reviewing the system test plan now, to try to find any errors");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Review the system test plan")) {
							((Customer) obj)
									.setOverheadText("I'm reviewing the system test plan now, to try to find any errors");
						}
					}
				}
				state.getActionStateRepository()
						.getReviewSystemTestPlanActionStateRepository()
						.add((ReviewSystemTestPlanAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof CorrectSystemTestPlanAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Correct the system test plan")) {
							((Employee) obj)
									.setOverheadText("I'm correcting the system test plan now");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Correct the system test plan")) {
							((Customer) obj)
									.setOverheadText("I'm correcting the system test plan now");
						}
					}
				}
				state.getActionStateRepository()
						.getCorrectSystemTestPlanActionStateRepository()
						.add((CorrectSystemTestPlanAction) action);
				destChecker.update(false, gui);
			} else if (action instanceof DeliverProductAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
					} else if (obj instanceof Customer) {
					}
				}
				state.getActionStateRepository()
						.getDeliverProductActionStateRepository()
						.add((DeliverProductAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE, "CalculateScore",
						action);
				destChecker.update(false, gui);
				if (menuText.equals("Deliver product to customer")) {
					// stop game and give score:
					DeliverProductAction a = (DeliverProductAction) action;
					if (a.getAllProjs().size() > 0) {
						SEProject t = (SEProject) (a.getAllProjs().elementAt(0));
						if (t != null) {
							int v = t.getScore();
							state.getClock().stop();
							state.setScore(v);
							((SimSEGUI) gui).update();
							JOptionPane.showMessageDialog(null,
									("Your score is " + v), "Game over!",
									JOptionPane.INFORMATION_MESSAGE);
						}
					}
				}
			} else if (action instanceof ChangePayRateAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
					} else if (obj instanceof Customer) {
					}
				}
				state.getActionStateRepository()
						.getChangePayRateActionStateRepository()
						.add((ChangePayRateAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"ChangePayRateEffectRuleA", action);
				destChecker.update(false, gui);
			} else if (action instanceof GiveBonusAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
					} else if (obj instanceof Customer) {
					}
				}
				state.getActionStateRepository()
						.getGiveBonusActionStateRepository()
						.add((GiveBonusAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"GiveBonusEffectRuleA", action);
				destChecker.update(false, gui);
			} else if (action instanceof FireAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Fire")) {
							((Employee) obj)
									.setOverheadText("I'm fired?! Waaahhh!");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Fire")) {
							((Customer) obj)
									.setOverheadText("I'm fired?! Waaahhh!");
						}
					}
				}
				state.getActionStateRepository().getFireActionStateRepository()
						.add((FireAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"FireDestroyObjectsRuleA", action);
				destChecker.update(false, gui);
			} else if (action instanceof PurchaseToolAction) {
				Vector<SSObject> participants = action.getAllParticipants();
				for (int i = 0; i < participants.size(); i++) {
					SSObject obj = participants.elementAt(i);
					if (obj instanceof Employee) {
						if (menuText.equals("Purchase tool(s)")) {
							((Employee) obj)
									.setOverheadText("Tool(s) have been purchased!");
						}
					} else if (obj instanceof Customer) {
						if (menuText.equals("Purchase tool(s)")) {
							((Customer) obj)
									.setOverheadText("Tool(s) have been purchased!");
						}
					}
				}
				state.getActionStateRepository()
						.getPurchaseToolActionStateRepository()
						.add((PurchaseToolAction) action);
				ruleExec.update(gui, RuleExecutor.UPDATE_ONE,
						"PurchaseToolEffectRuleA", action);
				destChecker.update(false, gui);
			}
		}
	}
}
