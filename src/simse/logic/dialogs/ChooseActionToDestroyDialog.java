/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseActionToDestroyDialogGenerator */
package simse.logic.dialogs;

import simse.state.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import simse.logic.*;
import simse.gui.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.event.*;

public class ChooseActionToDestroyDialog extends JDialog implements
		ActionListener {
	private Vector<? extends simse.adts.actions.Action> actions;
	private State state;
	private RuleExecutor ruleExec;
	private Employee emp;
	private String menuText;
	private JFrame gui;
	private Vector<JCheckBox> checkBoxes;
	private JButton okButton;
	private JButton cancelButton;

	public ChooseActionToDestroyDialog(JFrame owner,
			Vector<? extends simse.adts.actions.Action> acts, State s,
			Employee e, RuleExecutor r, String mText) {
		super(owner, true);
		actions = acts;
		state = s;
		ruleExec = r;
		gui = owner;
		emp = e;
		menuText = mText;
		checkBoxes = new Vector<JCheckBox>();
		setTitle("Stop Action(s)");
		Box mainPane = Box.createVerticalBox();
		JPanel topPane = new JPanel();
		String actionName = new String();
		simse.adts.actions.Action tempAct = actions.elementAt(0);
		if (tempAct instanceof CreateRequirementsAction) {
			actionName = "CreateRequirements";
		} else if (tempAct instanceof ReviewRequirementsAction) {
			actionName = "ReviewRequirements";
		} else if (tempAct instanceof CorrectRequirementsAction) {
			actionName = "CorrectRequirements";
		} else if (tempAct instanceof CreateDesignAction) {
			actionName = "CreateDesign";
		} else if (tempAct instanceof ReviewDesignAction) {
			actionName = "ReviewDesign";
		} else if (tempAct instanceof CorrectDesignAction) {
			actionName = "CorrectDesign";
		} else if (tempAct instanceof CreateCodeAction) {
			actionName = "CreateCode";
		} else if (tempAct instanceof InspectCodeAction) {
			actionName = "InspectCode";
		} else if (tempAct instanceof CorrectCodeAction) {
			actionName = "CorrectCode";
		} else if (tempAct instanceof IntegrateCodeAction) {
			actionName = "IntegrateCode";
		} else if (tempAct instanceof SystemTestAction) {
			actionName = "SystemTest";
		} else if (tempAct instanceof CreateSystemTestPlanAction) {
			actionName = "CreateSystemTestPlan";
		} else if (tempAct instanceof ReviewSystemTestPlanAction) {
			actionName = "ReviewSystemTestPlan";
		} else if (tempAct instanceof CorrectSystemTestPlanAction) {
			actionName = "CorrectSystemTestPlan";
		}
		topPane.add(new JLabel("Choose which " + actionName
				+ " Action to stop:"));
		JPanel middlePane = new JPanel(new GridLayout(0, 1));
		if (tempAct instanceof CreateRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateRequirementsAction act = (CreateRequirementsAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("ReqDoc(s); ");
					Vector<Artifact> allReqDocs = act.getAllReqDocs();
					for (int j = 0; j < allReqDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allReqDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("RequirementsCaptureTool(s); ");
					Vector<Tool> allRequirementsCaptureTools = act
							.getAllRequirementsCaptureTools();
					for (int j = 0; j < allRequirementsCaptureTools.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allRequirementsCaptureTools.elementAt(j);
						if (a instanceof RequirementsCaptureTool) {
							label.append("RequirementsCaptureTool("
									+ ((RequirementsCaptureTool) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("AssociatedCodeDoc(s); ");
					Vector<Artifact> allAssociatedCodeDocs = act
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedDesignDoc(s); ");
					Vector<Artifact> allAssociatedDesignDocs = act
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedSystemTestPlan(s); ");
					Vector<Artifact> allAssociatedSystemTestPlans = act
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedSystemTestPlans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof ReviewRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewRequirementsAction act = (ReviewRequirementsAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("RequirementsDoc(s); ");
					Vector<Artifact> allRequirementsDocs = act
							.getAllRequirementsDocs();
					for (int j = 0; j < allRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CorrectRequirementsAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectRequirementsAction act = (CorrectRequirementsAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("RequirementsDoc(s); ");
					Vector<Artifact> allRequirementsDocs = act
							.getAllRequirementsDocs();
					for (int j = 0; j < allRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("RequirementsCaptureTool(s); ");
					Vector<Tool> allRequirementsCaptureTools = act
							.getAllRequirementsCaptureTools();
					for (int j = 0; j < allRequirementsCaptureTools.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allRequirementsCaptureTools.elementAt(j);
						if (a instanceof RequirementsCaptureTool) {
							label.append("RequirementsCaptureTool("
									+ ((RequirementsCaptureTool) a).getName()
									+ ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CreateDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateDesignAction act = (CreateDesignAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DesignDoc(s); ");
					Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
					for (int j = 0; j < allDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("DesignEnvironment(s); ");
					Vector<Tool> allDesignEnvironments = act
							.getAllDesignEnvironments();
					for (int j = 0; j < allDesignEnvironments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allDesignEnvironments.elementAt(j);
						if (a instanceof DesignEnvironment) {
							label.append("DesignEnvironment("
									+ ((DesignEnvironment) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedCodeDoc(s); ");
					Vector<Artifact> allAssociatedCodeDocs = act
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof ReviewDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewDesignAction act = (ReviewDesignAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DesignDoc(s); ");
					Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
					for (int j = 0; j < allDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CorrectDesignAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectDesignAction act = (CorrectDesignAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DesignDoc(s); ");
					Vector<Artifact> allDesignDocs = act.getAllDesignDocs();
					for (int j = 0; j < allDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("DesignEnvironment(s); ");
					Vector<Tool> allDesignEnvironments = act
							.getAllDesignEnvironments();
					for (int j = 0; j < allDesignEnvironments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allDesignEnvironments.elementAt(j);
						if (a instanceof DesignEnvironment) {
							label.append("DesignEnvironment("
									+ ((DesignEnvironment) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CreateCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateCodeAction act = (CreateCodeAction) actions.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("CodeDoc(s); ");
					Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
					for (int j = 0; j < allCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("AssociatedDesignDocument(s); ");
					Vector<Artifact> allAssociatedDesignDocuments = act
							.getAllAssociatedDesignDocuments();
					for (int j = 0; j < allAssociatedDesignDocuments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedDesignDocuments.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DevelopmentEnvironment(s); ");
					Vector<Tool> allDevelopmentEnvironments = act
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allDevelopmentEnvironments.elementAt(j);
						if (a instanceof IDE) {
							label.append("IDE(" + ((IDE) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedSystemTestPlan(s); ");
					Vector<Artifact> allAssociatedSystemTestPlans = act
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedSystemTestPlans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof InspectCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				InspectCodeAction act = (InspectCodeAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("CodeDoc(s); ");
					Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
					for (int j = 0; j < allCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("AssociatedDesignDoc(s); ");
					Vector<Artifact> allAssociatedDesignDocs = act
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CorrectCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectCodeAction act = (CorrectCodeAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("CodeDoc(s); ");
					Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
					for (int j = 0; j < allCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("AssociatedDesignDoc(s); ");
					Vector<Artifact> allAssociatedDesignDocs = act
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DevelopmentEnvironment(s); ");
					Vector<Tool> allDevelopmentEnvironments = act
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allDevelopmentEnvironments.elementAt(j);
						if (a instanceof IDE) {
							label.append("IDE(" + ((IDE) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof IntegrateCodeAction) {
			for (int i = 0; i < actions.size(); i++) {
				IntegrateCodeAction act = (IntegrateCodeAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("CodeDoc(s); ");
					Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
					for (int j = 0; j < allCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("AssociatedDesignDoc(s); ");
					Vector<Artifact> allAssociatedDesignDocs = act
							.getAllAssociatedDesignDocs();
					for (int j = 0; j < allAssociatedDesignDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedDesignDocs.elementAt(j);
						if (a instanceof DesignDocument) {
							label.append("DesignDocument("
									+ ((DesignDocument) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("DevelopmentEnvironment(s); ");
					Vector<Tool> allDevelopmentEnvironments = act
							.getAllDevelopmentEnvironments();
					for (int j = 0; j < allDevelopmentEnvironments.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allDevelopmentEnvironments.elementAt(j);
						if (a instanceof IDE) {
							label.append("IDE(" + ((IDE) a).getName() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof SystemTestAction) {
			for (int i = 0; i < actions.size(); i++) {
				SystemTestAction act = (SystemTestAction) actions.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("CodeDoc(s); ");
					Vector<Artifact> allCodeDocs = act.getAllCodeDocs();
					for (int j = 0; j < allCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedSystemTestPlan(s); ");
					Vector<Artifact> allAssociatedSystemTestPlans = act
							.getAllAssociatedSystemTestPlans();
					for (int j = 0; j < allAssociatedSystemTestPlans.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedSystemTestPlans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("TestingTool(s); ");
					Vector<Tool> allTestingTools = act.getAllTestingTools();
					for (int j = 0; j < allTestingTools.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allTestingTools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
							label.append("AutomatedTestingTool("
									+ ((AutomatedTestingTool) a).getName()
									+ ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CreateSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				CreateSystemTestPlanAction act = (CreateSystemTestPlanAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedCodeDoc(s); ");
					Vector<Artifact> allAssociatedCodeDocs = act
							.getAllAssociatedCodeDocs();
					for (int j = 0; j < allAssociatedCodeDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedCodeDocs.elementAt(j);
						if (a instanceof Code) {
							label.append("Code(" + ((Code) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("SystemTestPlanDoc(s); ");
					Vector<Artifact> allSystemTestPlanDocs = act
							.getAllSystemTestPlanDocs();
					for (int j = 0; j < allSystemTestPlanDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allSystemTestPlanDocs.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("TestingTool(s); ");
					Vector<Tool> allTestingTools = act.getAllTestingTools();
					for (int j = 0; j < allTestingTools.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allTestingTools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
							label.append("AutomatedTestingTool("
									+ ((AutomatedTestingTool) a).getName()
									+ ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof ReviewSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				ReviewSystemTestPlanAction act = (ReviewSystemTestPlanAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("TestPlan(s); ");
					Vector<Artifact> allTestPlans = act.getAllTestPlans();
					for (int j = 0; j < allTestPlans.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allTestPlans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		} else if (tempAct instanceof CorrectSystemTestPlanAction) {
			for (int i = 0; i < actions.size(); i++) {
				CorrectSystemTestPlanAction act = (CorrectSystemTestPlanAction) actions
						.elementAt(i);
				if (act.getAllParticipants().contains(emp)) {
					StringBuffer label = new StringBuffer();
					label.append("Emp(s); ");
					Vector<Employee> allEmps = act.getAllEmps();
					for (int j = 0; j < allEmps.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Employee a = allEmps.elementAt(j);
						if (a instanceof SoftwareEngineer) {
							label.append("SoftwareEngineer("
									+ ((SoftwareEngineer) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("TestPlan(s); ");
					Vector<Artifact> allTestPlans = act.getAllTestPlans();
					for (int j = 0; j < allTestPlans.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allTestPlans.elementAt(j);
						if (a instanceof SystemTestPlan) {
							label.append("SystemTestPlan("
									+ ((SystemTestPlan) a).getName() + ")");
						}
					}
					label.append("; ");
					label.append("AssociatedRequirementsDoc(s); ");
					Vector<Artifact> allAssociatedRequirementsDocs = act
							.getAllAssociatedRequirementsDocs();
					for (int j = 0; j < allAssociatedRequirementsDocs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Artifact a = allAssociatedRequirementsDocs.elementAt(j);
						if (a instanceof RequirementsDocument) {
							label.append("RequirementsDocument("
									+ ((RequirementsDocument) a).getName()
									+ ")");
						}
					}
					label.append("; ");
					label.append("Proj(s); ");
					Vector<Project> allProjs = act.getAllProjs();
					for (int j = 0; j < allProjs.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Project a = allProjs.elementAt(j);
						if (a instanceof SEProject) {
							label.append("SEProject("
									+ ((SEProject) a).getDescription() + ")");
						}
					}
					label.append("; ");
					label.append("TestingTool(s); ");
					Vector<Tool> allTestingTools = act.getAllTestingTools();
					for (int j = 0; j < allTestingTools.size(); j++) {
						if (j > 0) {
							label.append(", ");
						}
						Tool a = allTestingTools.elementAt(j);
						if (a instanceof AutomatedTestingTool) {
							label.append("AutomatedTestingTool("
									+ ((AutomatedTestingTool) a).getName()
									+ ")");
						}
					}
					JPanel tempPane = new JPanel(new BorderLayout());
					JCheckBox tempCheckBox = new JCheckBox(label.toString());
					tempPane.add(tempCheckBox, BorderLayout.WEST);
					checkBoxes.add(tempCheckBox);
					middlePane.add(tempPane);
				}
			}
		}
		JPanel bottomPane = new JPanel();
		okButton = new JButton("OK");
		okButton.addActionListener(this);
		bottomPane.add(okButton);
		cancelButton = new JButton("Cancel");
		cancelButton.addActionListener(this);
		bottomPane.add(cancelButton);
		mainPane.add(topPane);
		mainPane.add(middlePane);
		mainPane.add(bottomPane);
		setContentPane(mainPane);
		validate();
		pack();
		repaint();
		toFront();
		Point ownerLoc = owner.getLocationOnScreen();
		Point thisLoc = new Point();
		thisLoc.setLocation(
				(ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)),
				(ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
		setLocation(thisLoc);
		setVisible(true);
	}

	public void actionPerformed(ActionEvent evt) {
		Object source = evt.getSource();
		if (source == cancelButton) {
			setVisible(false);
			dispose();
		} else if (source == okButton) {
			int numChecked = 0;
			for (int i = 0; i < checkBoxes.size(); i++) {
				JCheckBox tempCBox = checkBoxes.elementAt(i);
				if (tempCBox.isSelected()) {
					numChecked++;
				}
			}
			if (numChecked == 0) {
				JOptionPane.showMessageDialog(null,
						("You must choose at least one action"),
						"Invalid Input", JOptionPane.ERROR_MESSAGE);
			} else {
				for (int i = 0; i < checkBoxes.size(); i++) {
					JCheckBox cBox = checkBoxes.elementAt(i);
					if (cBox.isSelected()) {
						simse.adts.actions.Action tempAct = actions
								.elementAt(i);
						if (tempAct instanceof CreateRequirementsAction) {
							CreateRequirementsAction createrequirementsAct = (CreateRequirementsAction) tempAct;
							createrequirementsAct.removeEmp(emp);
							if (menuText
									.equals("Stop creating the requirements document")) {
								emp.setOverheadText("I've stopped creating the requirements document");
							}
							if (createrequirementsAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct.getAllReqDocs()
									.size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct
									.getAllRequirementsCaptureTools().size() < 0) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct
									.getAllAssociatedCodeDocs().size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct
									.getAllAssociatedDesignDocs().size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							} else if (createrequirementsAct
									.getAllAssociatedSystemTestPlans().size() < 1) {
								Vector<SSObject> c = createrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the requirements document")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateRequirementsActionStateRepository()
										.remove(createrequirementsAct);
							}
						} else if (tempAct instanceof ReviewRequirementsAction) {
							ReviewRequirementsAction reviewrequirementsAct = (ReviewRequirementsAction) tempAct;
							reviewrequirementsAct.removeEmp(emp);
							if (menuText
									.equals("Stop reviewing the requirements document")) {
								emp.setOverheadText("I'm done reviewing the requirements document");
							}
							if (reviewrequirementsAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = reviewrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Employee) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Customer) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.remove(reviewrequirementsAct);
							} else if (reviewrequirementsAct
									.getAllRequirementsDocs().size() < 1) {
								Vector<SSObject> c = reviewrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Employee) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Customer) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.remove(reviewrequirementsAct);
							} else if (reviewrequirementsAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = reviewrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Employee) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the requirements document")) {
											((Customer) d)
													.setOverheadText("I'm done reviewing the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewRequirementsActionStateRepository()
										.remove(reviewrequirementsAct);
							}
						} else if (tempAct instanceof CorrectRequirementsAction) {
							CorrectRequirementsAction correctrequirementsAct = (CorrectRequirementsAction) tempAct;
							correctrequirementsAct.removeEmp(emp);
							if (menuText
									.equals("Stop correcting the requirements doc")) {
								emp.setOverheadText("I've stopped correcting the requirements document");
							}
							if (correctrequirementsAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = correctrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.remove(correctrequirementsAct);
							} else if (correctrequirementsAct
									.getAllRequirementsDocs().size() < 1) {
								Vector<SSObject> c = correctrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.remove(correctrequirementsAct);
							} else if (correctrequirementsAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = correctrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.remove(correctrequirementsAct);
							} else if (correctrequirementsAct
									.getAllRequirementsCaptureTools().size() < 0) {
								Vector<SSObject> c = correctrequirementsAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the requirements doc")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the requirements document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectRequirementsActionStateRepository()
										.remove(correctrequirementsAct);
							}
						} else if (tempAct instanceof CreateDesignAction) {
							CreateDesignAction createdesignAct = (CreateDesignAction) tempAct;
							createdesignAct.removeEmp(emp);
							if (menuText.equals("Stop creating the design")) {
								emp.setOverheadText("I've stopped creating the design document");
							}
							if (createdesignAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							} else if (createdesignAct.getAllDesignDocs()
									.size() < 1) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							} else if (createdesignAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							} else if (createdesignAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							} else if (createdesignAct
									.getAllDesignEnvironments().size() < 0) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							} else if (createdesignAct
									.getAllAssociatedCodeDocs().size() < 1) {
								Vector<SSObject> c = createdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the design")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the design")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateDesignActionStateRepository()
										.remove(createdesignAct);
							}
						} else if (tempAct instanceof ReviewDesignAction) {
							ReviewDesignAction reviewdesignAct = (ReviewDesignAction) tempAct;
							reviewdesignAct.removeEmp(emp);
							if (menuText
									.equals("Stop reviewing the design document")) {
								emp.setOverheadText("I've stopped reviewing the design document");
							}
							if (reviewdesignAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = reviewdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.remove(reviewdesignAct);
							} else if (reviewdesignAct.getAllDesignDocs()
									.size() < 1) {
								Vector<SSObject> c = reviewdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.remove(reviewdesignAct);
							} else if (reviewdesignAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = reviewdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.remove(reviewdesignAct);
							} else if (reviewdesignAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = reviewdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewDesignActionStateRepository()
										.remove(reviewdesignAct);
							}
						} else if (tempAct instanceof CorrectDesignAction) {
							CorrectDesignAction correctdesignAct = (CorrectDesignAction) tempAct;
							correctdesignAct.removeEmp(emp);
							if (menuText
									.equals("Stop correcting the design document")) {
								emp.setOverheadText("I've stopped correcting the design document");
							}
							if (correctdesignAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = correctdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(correctdesignAct);
							} else if (correctdesignAct.getAllDesignDocs()
									.size() < 1) {
								Vector<SSObject> c = correctdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(correctdesignAct);
							} else if (correctdesignAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = correctdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(correctdesignAct);
							} else if (correctdesignAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = correctdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(correctdesignAct);
							} else if (correctdesignAct
									.getAllDesignEnvironments().size() < 0) {
								Vector<SSObject> c = correctdesignAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the design document")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the design document");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectDesignActionStateRepository()
										.remove(correctdesignAct);
							}
						} else if (tempAct instanceof CreateCodeAction) {
							CreateCodeAction createcodeAct = (CreateCodeAction) tempAct;
							createcodeAct.removeEmp(emp);
							if (menuText.equals("Stop creating code")) {
								emp.setOverheadText("I've stopped creating code");
							}
							if (createcodeAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct.getAllCodeDocs().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct
									.getAllAssociatedDesignDocuments().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct
									.getAllDevelopmentEnvironments().size() < 0) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							} else if (createcodeAct
									.getAllAssociatedSystemTestPlans().size() < 1) {
								Vector<SSObject> c = createcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating code")) {
											((Employee) d)
													.setOverheadText("I've stopped creating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating code")) {
											((Customer) d)
													.setOverheadText("I've stopped creating code");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateCodeActionStateRepository()
										.remove(createcodeAct);
							}
						} else if (tempAct instanceof InspectCodeAction) {
							InspectCodeAction inspectcodeAct = (InspectCodeAction) tempAct;
							inspectcodeAct.removeEmp(emp);
							if (menuText.equals("Stop inspecting code")) {
								emp.setOverheadText("I've stopped inspecting the code");
							}
							if (inspectcodeAct.getAllEmps().size() < 3) {
								Vector<SSObject> c = inspectcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Employee) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Customer) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(inspectcodeAct);
							} else if (inspectcodeAct.getAllCodeDocs().size() < 1) {
								Vector<SSObject> c = inspectcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Employee) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Customer) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(inspectcodeAct);
							} else if (inspectcodeAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = inspectcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Employee) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Customer) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(inspectcodeAct);
							} else if (inspectcodeAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = inspectcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Employee) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Customer) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(inspectcodeAct);
							} else if (inspectcodeAct
									.getAllAssociatedDesignDocs().size() < 1) {
								Vector<SSObject> c = inspectcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Employee) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop inspecting code")) {
											((Customer) d)
													.setOverheadText("I've stopped inspecting the code");
										}
									}
								}
								state.getActionStateRepository()
										.getInspectCodeActionStateRepository()
										.remove(inspectcodeAct);
							}
						} else if (tempAct instanceof CorrectCodeAction) {
							CorrectCodeAction correctcodeAct = (CorrectCodeAction) tempAct;
							correctcodeAct.removeEmp(emp);
							if (menuText.equals("Stop correcting code")) {
								emp.setOverheadText("I've stopped correcting code");
							}
							if (correctcodeAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							} else if (correctcodeAct.getAllCodeDocs().size() < 1) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							} else if (correctcodeAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							} else if (correctcodeAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							} else if (correctcodeAct
									.getAllAssociatedDesignDocs().size() < 1) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							} else if (correctcodeAct
									.getAllDevelopmentEnvironments().size() < 0) {
								Vector<SSObject> c = correctcodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting code")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting code")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting code");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectCodeActionStateRepository()
										.remove(correctcodeAct);
							}
						} else if (tempAct instanceof IntegrateCodeAction) {
							IntegrateCodeAction integratecodeAct = (IntegrateCodeAction) tempAct;
							integratecodeAct.removeEmp(emp);
							if (menuText.equals("Stop integrating code")) {
								emp.setOverheadText("I've stopped integrating code");
							}
							if (integratecodeAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							} else if (integratecodeAct.getAllCodeDocs().size() < 1) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							} else if (integratecodeAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							} else if (integratecodeAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							} else if (integratecodeAct
									.getAllAssociatedDesignDocs().size() < 1) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							} else if (integratecodeAct
									.getAllDevelopmentEnvironments().size() < 0) {
								Vector<SSObject> c = integratecodeAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop integrating code")) {
											((Employee) d)
													.setOverheadText("I've stopped integrating code");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop integrating code")) {
											((Customer) d)
													.setOverheadText("I've stopped integrating code");
										}
									}
								}
								state.getActionStateRepository()
										.getIntegrateCodeActionStateRepository()
										.remove(integratecodeAct);
							}
						} else if (tempAct instanceof SystemTestAction) {
							SystemTestAction systemtestAct = (SystemTestAction) tempAct;
							systemtestAct.removeEmp(emp);
							if (menuText.equals("Stop doing the system test")) {
								emp.setOverheadText("I've stopped doing the system test");
							}
							if (systemtestAct.getAllCodeDocs().size() < 1) {
								Vector<SSObject> c = systemtestAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Employee) d)
													.setOverheadText("I've stopped doing the system test");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Customer) d)
													.setOverheadText("I've stopped doing the system test");
										}
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(systemtestAct);
							} else if (systemtestAct.getAllProjs().size() < 1) {
								Vector<SSObject> c = systemtestAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Employee) d)
													.setOverheadText("I've stopped doing the system test");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Customer) d)
													.setOverheadText("I've stopped doing the system test");
										}
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(systemtestAct);
							} else if (systemtestAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = systemtestAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Employee) d)
													.setOverheadText("I've stopped doing the system test");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Customer) d)
													.setOverheadText("I've stopped doing the system test");
										}
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(systemtestAct);
							} else if (systemtestAct
									.getAllAssociatedSystemTestPlans().size() < 1) {
								Vector<SSObject> c = systemtestAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Employee) d)
													.setOverheadText("I've stopped doing the system test");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Customer) d)
													.setOverheadText("I've stopped doing the system test");
										}
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(systemtestAct);
							} else if (systemtestAct.getAllTestingTools()
									.size() < 0) {
								Vector<SSObject> c = systemtestAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Employee) d)
													.setOverheadText("I've stopped doing the system test");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop doing the system test")) {
											((Customer) d)
													.setOverheadText("I've stopped doing the system test");
										}
									}
								}
								state.getActionStateRepository()
										.getSystemTestActionStateRepository()
										.remove(systemtestAct);
							}
						} else if (tempAct instanceof CreateSystemTestPlanAction) {
							CreateSystemTestPlanAction createsystemtestplanAct = (CreateSystemTestPlanAction) tempAct;
							createsystemtestplanAct.removeEmp(emp);
							if (menuText
									.equals("Stop creating the system test plan")) {
								emp.setOverheadText("I've stopped creating the system test plan");
							}
							if (createsystemtestplanAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							} else if (createsystemtestplanAct
									.getAllAssociatedCodeDocs().size() < 1) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							} else if (createsystemtestplanAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							} else if (createsystemtestplanAct
									.getAllSystemTestPlanDocs().size() < 1) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							} else if (createsystemtestplanAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							} else if (createsystemtestplanAct
									.getAllTestingTools().size() < 0) {
								Vector<SSObject> c = createsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop creating the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped creating the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCreateSystemTestPlanActionStateRepository()
										.remove(createsystemtestplanAct);
							}
						} else if (tempAct instanceof ReviewSystemTestPlanAction) {
							ReviewSystemTestPlanAction reviewsystemtestplanAct = (ReviewSystemTestPlanAction) tempAct;
							reviewsystemtestplanAct.removeEmp(emp);
							if (menuText
									.equals("Stop reviewing the system test plan")) {
								emp.setOverheadText("I've stopped reviewing the system test plan");
							}
							if (reviewsystemtestplanAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = reviewsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.remove(reviewsystemtestplanAct);
							} else if (reviewsystemtestplanAct
									.getAllTestPlans().size() < 1) {
								Vector<SSObject> c = reviewsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.remove(reviewsystemtestplanAct);
							} else if (reviewsystemtestplanAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = reviewsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.remove(reviewsystemtestplanAct);
							} else if (reviewsystemtestplanAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = reviewsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop reviewing the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped reviewing the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getReviewSystemTestPlanActionStateRepository()
										.remove(reviewsystemtestplanAct);
							}
						} else if (tempAct instanceof CorrectSystemTestPlanAction) {
							CorrectSystemTestPlanAction correctsystemtestplanAct = (CorrectSystemTestPlanAction) tempAct;
							correctsystemtestplanAct.removeEmp(emp);
							if (menuText
									.equals("Stop correcting the system test plan")) {
								emp.setOverheadText("I've stopped correcting the system test plan");
							}
							if (correctsystemtestplanAct.getAllEmps().size() < 1) {
								Vector<SSObject> c = correctsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(correctsystemtestplanAct);
							} else if (correctsystemtestplanAct
									.getAllTestPlans().size() < 1) {
								Vector<SSObject> c = correctsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(correctsystemtestplanAct);
							} else if (correctsystemtestplanAct
									.getAllAssociatedRequirementsDocs().size() < 1) {
								Vector<SSObject> c = correctsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(correctsystemtestplanAct);
							} else if (correctsystemtestplanAct.getAllProjs()
									.size() < 1) {
								Vector<SSObject> c = correctsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(correctsystemtestplanAct);
							} else if (correctsystemtestplanAct
									.getAllTestingTools().size() < 0) {
								Vector<SSObject> c = correctsystemtestplanAct
										.getAllParticipants();
								for (int j = 0; j < c.size(); j++) {
									SSObject d = c.elementAt(j);
									if (d instanceof Employee) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Employee) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									} else if (d instanceof Customer) {
										if (menuText
												.equals("Stop correcting the system test plan")) {
											((Customer) d)
													.setOverheadText("I've stopped correcting the system test plan");
										}
									}
								}
								state.getActionStateRepository()
										.getCorrectSystemTestPlanActionStateRepository()
										.remove(correctsystemtestplanAct);
							}
						}
					}
				}
				setVisible(false);
				dispose();
			}
		}
	}
}
